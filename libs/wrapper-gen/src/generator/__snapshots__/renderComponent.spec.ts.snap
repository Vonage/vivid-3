// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renderComponent should render a component 1`] = `
"
import { defineComponent, ref, h, VNodeData, PropType } from 'vue';
import { isVue2 } from '../../utils/vue';
import { registerExampleComponent } from '@vonage/vivid';
import { registerComponent } from '../../utils/register';
import { Imported } from 'module';
import { handleNamedSlot } from '../../utils/slots';
import type { ExampleComponent } from '@vonage/vivid/lib/example-component/example-component';


/**
 * This is an example component
 */
export default defineComponent({
  name: 'VExampleComponent',
  
  model: isVue2 ? {
    prop: 'modelValue',
    event: 'update:modelValue'
  } : undefined,
  props: {
    /**
 * This is an example attribute
 */
        exampleAttribute: {type: String as PropType<string>, default: undefined},

        typeUnion: {type: [String, Number] as PropType<string | number>, default: undefined},

        importedType: {type: Object as PropType<Imported>, default: undefined},

        value: {type: String as PropType<string>, default: undefined},

        modelValue: {type: String as PropType<string>, default: undefined},

        start: {type: String as PropType<string>, default: undefined},

        forcedDomProp: {type: String as PropType<string>, default: undefined}
  },
  emits: [
			
						/**
 * This is an example event
 * @type {string}
 */
							'example-event',

						/**
 * @type {Event}
 */
							'input',

						/**
 * @type {CustomEvent<{a: string | number}>}
 */
							'input:start',

						/**
 * @type {string}
 */
							'update:modelValue',

						/**
 * @type {string}
 */
							'update:start'],
  methods: {
  	
        /**
 * This is an example method
 */
        exampleMethod(exampleArg: string): string { return (this.element as any)?.exampleMethod(exampleArg); }
	},
	
  setup(props, ctx) {
    const componentName = registerComponent('example-component', registerExampleComponent);

    const element = ref<ExampleComponent | null>(null);

    return { componentName, element };
  },
  render() {
    
    if (isVue2) {
        return h(this.componentName, {
            ref: 'element',
            attrs: { ...(this.exampleAttribute !== undefined ? {'example-attribute': this.exampleAttribute } : {}),...(this.typeUnion !== undefined ? {'type-union': this.typeUnion } : {}),...(this.modelValue ?? this.value !== undefined ? {'value': this.modelValue ?? this.value } : {}),...(this.start !== undefined ? {'start': this.start } : {}) },
            class: 'vvd-component',
            domProps: { ...(this.importedType !== undefined ? {'importedType': this.importedType } : {}),...(this.forcedDomProp !== undefined ? {'forcedDomProp': this.forcedDomProp } : {}) },
            on: { 'example-event': (event: Event) => this.$emit('example-event', event),'input': (event: Event) => {
          this.$emit('update:modelValue', (event.target as any).value);
          this.$emit('input', event);
        },'input:start': (event: Event) => {
          this.$emit('update:start', (event.target as any).start);
          this.$emit('input:start', event);
        } },
        }, [
            this.$slots.default,
            // @slot example-slot This is an example slot
      handleNamedSlot('example-slot', this.$slots['example-slot']),// @slot no-description 
      handleNamedSlot('no-description', this.$slots['no-description'])
        ]);
      }
      // @ts-ignore
      return h(this.componentName, {
          ref: 'element',
          class: 'vvd-component',
          ...(this.exampleAttribute !== undefined ? {'^example-attribute': this.exampleAttribute } : {}),...(this.typeUnion !== undefined ? {'^type-union': this.typeUnion } : {}),...(this.importedType !== undefined ? {'.importedType': this.importedType } : {}),...(this.modelValue ?? this.value !== undefined ? {'^value': this.modelValue ?? this.value } : {}),...(this.start !== undefined ? {'^start': this.start } : {}),...(this.forcedDomProp !== undefined ? {'.forcedDomProp': this.forcedDomProp } : {}),'onExampleEvent': (event: Event) => this.$emit('example-event', event),'onInput': (event: Event) => {
          this.$emit('update:modelValue', (event.target as any).value);
          this.$emit('input', event);
        },'onInput:start': (event: Event) => {
          this.$emit('update:start', (event.target as any).start);
          this.$emit('input:start', event);
        }
      } as unknown as VNodeData, [
          // @ts-ignore
          this.$slots.default && this.$slots.default(),
          // @slot example-slot This is an example slot
      handleNamedSlot('example-slot', this.$slots['example-slot']),// @slot no-description 
      handleNamedSlot('no-description', this.$slots['no-description'])
      ]);
    
  },
});
"
`;

exports[`renderComponent should render a component as a Vue 3 stub 1`] = `
"
import { defineComponent, ref, h, VNodeData, PropType } from 'vue3';
import { isVue2 } from '../../utils/vue';
import { registerExampleComponent } from '@vonage/vivid';
import { registerComponent } from '../../utils/register';
import { Imported } from 'module';
import { handleNamedSlot } from '../../utils/slots';
import type { ExampleComponent } from '@vonage/vivid/lib/example-component/example-component';
import type { SlotsType } from 'vue3';


/**
 * This is an example component
 */
export default defineComponent({
  name: 'VExampleComponent',
  
  model: isVue2 ? {
    prop: 'modelValue',
    event: 'update:modelValue'
  } : undefined,
  props: {
    /**
 * This is an example attribute
 */
        exampleAttribute: {type: String as PropType<string>, default: undefined},

        typeUnion: {type: [String, Number] as PropType<string | number>, default: undefined},

        importedType: {type: Object as PropType<Imported>, default: undefined},

        value: {type: String as PropType<string>, default: undefined},

        modelValue: {type: String as PropType<string>, default: undefined},

        start: {type: String as PropType<string>, default: undefined},

        forcedDomProp: {type: String as PropType<string>, default: undefined}
  },
  emits: {
			
						/**
 * This is an example event
 * @type {string}
 */
						['example-event'](event: string) { return true },

						/**
 * @type {Event}
 */
						['input'](event: Event) { return true },

						/**
 * @type {CustomEvent<{a: string | number}>}
 */
						['input:start'](event: CustomEvent<{a: string | number}>) { return true },

						/**
 * @type {string}
 */
						['update:modelValue'](event: string) { return true },

						/**
 * @type {string}
 */
						['update:start'](event: string) { return true }},
  methods: {
  	
        /**
 * This is an example method
 */
        exampleMethod(exampleArg: string): string { return (this.element as any)?.exampleMethod(exampleArg); }
	},
	slots: Object as SlotsType<{
		
		/**
 * This is an example slot
 */
		\\"example-slot\\": Record<string, never>

		
		\\"no-description\\": Record<string, never>
	}>,
  setup(props, ctx) {
    const componentName = registerComponent('example-component', registerExampleComponent);

    const element = ref<ExampleComponent | null>(null);

    return { componentName, element };
  },
  render() {
    return null;
  },
});
"
`;

exports[`renderComponent should render a minimal component 1`] = `
"
import { defineComponent, ref, h, VNodeData } from 'vue';
import { isVue2 } from '../../utils/vue';
import { registerExampleComponent } from '@vonage/vivid';
import { registerComponent } from '../../utils/register';
import type { ExampleComponent } from '@vonage/vivid/lib/example-component/example-component';



export default defineComponent({
  name: 'VExampleComponent',
  
  props: {
    
  },
  emits: [
			],
  methods: {
  	
	},
	
  setup(props, ctx) {
    const componentName = registerComponent('example-component', registerExampleComponent);

    const element = ref<ExampleComponent | null>(null);

    return { componentName, element };
  },
  render() {
    
    if (isVue2) {
        return h(this.componentName, {
            ref: 'element',
            attrs: {  },
            class: 'vvd-component',
            
            on: {  },
        }, [
            this.$slots.default,
            
        ]);
      }
      // @ts-ignore
      return h(this.componentName, {
          ref: 'element',
          class: 'vvd-component',
          
      } as unknown as VNodeData, [
          // @ts-ignore
          this.$slots.default && this.$slots.default(),
          
      ]);
    
  },
});
"
`;

exports[`renderComponent should render minimal component as a Vue 3 stub 1`] = `
"
import { defineComponent, ref, h, VNodeData } from 'vue3';
import { isVue2 } from '../../utils/vue';
import { registerExampleComponent } from '@vonage/vivid';
import { registerComponent } from '../../utils/register';
import type { ExampleComponent } from '@vonage/vivid/lib/example-component/example-component';
import type { SlotsType } from 'vue3';



export default defineComponent({
  name: 'VExampleComponent',
  
  props: {
    
  },
  emits: {
			},
  methods: {
  	
	},
	slots: Object as SlotsType<Record<string, never>>,
  setup(props, ctx) {
    const componentName = registerComponent('example-component', registerExampleComponent);

    const element = ref<ExampleComponent | null>(null);

    return { componentName, element };
  },
  render() {
    return null;
  },
});
"
`;
