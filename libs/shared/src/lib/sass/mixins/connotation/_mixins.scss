@use 'sass:map';
@use 'sass:list';
@use 'sass:selector';
@use '../../functions' as functions;
@use 'config' as config;
@use 'variables' as variables;
@use '../utils' as utils;


@mixin connotation-base($type) {
	#{variables.$vvd-color-connotation}: var(--vvd-color-#{$type});
	#{variables.$vvd-color-on-connotation}: var(--vvd-color-on-#{$type});
}

@mixin connotation-shades($mapping) {
	$shades: functions.pick-map(config.$shades, $mapping);
	@each $name, $value in $shades {
		#{variables.$vvd-color-connotation}-#{$name}: var(#{$value});
	}
}

@mixin connotation-decorative($mapping) {
	$start: map.get($mapping, start);
	$end: map.get($mapping, end);
	#{variables.$vvd-color-connotation}: linear-gradient(to right, $start, $end);
}

// @mixin selectors($types...) {
// 	@each $type in $types {
// 		$all-connotation-types: map.keys(
// 			map.merge(
// 				functions.pick-map(config.$decoratives, variables.$connotation-mapping-decoratives),
// 				functions.pick-map(config.$subset, variables.$connotation-mapping)
// 			)
// 		);

//     $selector: '';

//     @if $type != config.$default {
//       $selector: selector.unify(&, '.connotation-#{$type}');
//     } @else if list.length($all-connotation-types) < 2 {
// 			$selector: &;
//     } @else {
//       $exceptions: ();
// 			@each $rule-out-type in $all-connotation-types {
// 				@if $rule-out-type != config.$default {
// 					$exceptions: $exceptions + '.connotation-#{$rule-out-type}';
// 				}
// 			}
// 			$selector: '&:not(#{$exceptions})';
// 		}

// 		@at-root #{$selector} {
// 			@content($type);
// 		}
// 	}
// }

@mixin connotation {

	$mapping-shades: functions.pick-map(config.$subset, variables.$connotation-mapping);
	$mapping-decoratives: functions.pick-map(config.$decoratives, variables.$connotation-mapping-decoratives);

	$connotations: map.keys(map.merge($mapping-shades, $mapping-decoratives));

  @include utils.spread-list-selectors('.connotation', $connotations, config.$default) using ($type) {
		@include connotation-base($type);
		@include connotation-shades(map.get($mapping-shades, $type));
	}

	// @include selectors(map.keys($mapping-shades)...) using ($connotation-type) {
	// 	@include connotation-base($connotation-type);
	// 	@include connotation-shades(map.get($mapping-shades, $connotation-type));
	// }

	// @include selectors(map.keys($mapping-decoratives)...) using ($connotation-type) {
	// 	@include connotation-decorative(map.get($mapping-decoratives, $connotation-type));
	// }
}
