@use 'sass:map';
@use 'sass:list';
@use 'sass:selector';
@use 'config' as config;
@use 'variables' as variables;
@use 'functions' as functions;
@use '../../utils' as utils;

@mixin connotation-shades($component, $type, $mapping) {
	$shades: utils.pick-map(config.$shades, $mapping);
	@each $name, $value in $shades {
		/* @cssprop [--vvd-#{$component}-#{$type}-#{$name}=var(#{$value})] */
		#{functions.get-connotation-token($name)}: var(
			--vvd-#{$component}-#{$type}-#{$name},
			var(#{$value})
		);
	}
}

@mixin connotation($component) {
	$connotation-mapping: utils.pick-map(
		config.$connotations,
		variables.$connotation-mapping
	);

	@include utils.spread-list-selectors(
			'.connotation',
			config.$connotations,
			config.$default
		)
		using ($type) {
		@include connotation-shades(
			$component,
			$type,
			map.get($connotation-mapping, $type)
		);
	}
}

@mixin variables-backwards-compatibility($component, $element-class) {
	:host {
		@each $type in config.$connotations {
			--_vvd-#{$component}-#{$type}-firm-wrapper: var(
				--vvd-#{$component}-#{$type}-firm
			);
		}
	}

	#{$element-class} {
		@each $type in config.$connotations {
			--vvd-#{$component}-#{$type}-firm: var(
				--_vvd-#{$component}-#{$type}-firm-wrapper,
				var(--vvd-#{$component}-#{$type}-primary)
			);
		}
	}
}
