@use '../../../../../../../node_modules/@vonage/vivid-tokens/dist/sass/themes/consts' as theme-consts;
@use '../connotation' as connotation;
@use '../../functions' as functions;
@use 'variables' as variables;
@use 'config' as config;
@use 'sass:selector';
@use 'sass:list';
@use 'sass:map';


////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
@function get-variable($type) {
  $prefix: --_appearance-color;
  @return #{$prefix}-#{$type};
}

$hover: ':hover, .hover';
$disabled: ':disabled, .disabled';
$readonly: ':readonly, .readonly';
$selected: '.selected';
$active: ':active, .active';
$error: '.error';

$selectors: (
  idle: '&',
  hover: '&:where(#{$hover}):where(:not(#{$disabled}))',
  disabled: '&:where(#{$disabled})',
  readonly: '&:where(#{$readonly}):where(:not(#{$disabled}, #{$hover}, #{$active}))',
  selected: '&:where(#{$selected}):where(:not(#{$disabled}))',
  active: '&:where(#{$active}):where(:not(#{$disabled}))',
  error: '&:where(#{$error}):where(:not(#{$disabled}))',
);

@function get-default-selector($appearance) {
  @return '&';
}

@mixin appearance {

  @each $state in config.$states {
    #{map.get($selectors, $state)} {

      $state-mapping: map.get(variables.$states-mapping, $state);

      @each $appearance in config.$appearances {
        $selector: if($appearance == config.$default, get-default-selector($appearance), '&.appearance-#{$appearance}');


        #{$selector} {
          $appearance-mapping: map.get($state-mapping, $appearance);
          @each $type, $key in $appearance-mapping {
            #{get-variable($type)}: $key;
          }
        }
      }
    }
  }
}

