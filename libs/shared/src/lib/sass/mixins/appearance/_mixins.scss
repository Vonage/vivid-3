@use 'sass:selector';
@use 'sass:list';
@use 'sass:map';
@use 'sass:string';
@use 'functions' as functions;
@use 'variables' as variables;
@use 'config' as config;

$state-aspect-selectors: (
	hover: '.hover, :hover',
	disabled: '.disabled, :disabled',
	readonly: '.readonly',
	checked: '.checked, :checked',
	selected: '.selected',
	active: '.active, :active',
	error: '.error',
	success: '.success',
);

@function state-selectors($aspect-selectors) {
	$disabled: map.get($aspect-selectors, disabled);
	$readonly: map.get($aspect-selectors, readonly);

	@return (
		idle: (
			'&',
		),
		hover: (
			'&:hover:where(:not(#{$disabled}, #{$readonly}))',
			'&.hover:where(:not(#{$disabled}, #{$readonly}))',
		),
		disabled: (
			'&:disabled',
			'&.disabled',
		),
		readonly: (
			'&.readonly:where(:not(#{$disabled}))',
		),
		selected: (
			'&.selected:where(:not(#{$disabled}))',
		),
		selectedAndHover: (
			'&.selected:hover:where(:not(#{$disabled}, #{$readonly}))',
			'&.selected.hover:where(:not(#{$disabled}, #{$readonly}))',
		),
		selectedAndDisabled: (
			'&.selected:disabled',
			'&.selected.disabled',
		),
		checked: (
			'&:checked:where(:not(#{$disabled}))',
			'&.checked:where(:not(#{$disabled}))',
		),
		checkedAndHover: (
			'&:checked:hover:where(:not(#{$disabled}, #{$readonly}))',
			'&.checked.hover:where(:not(#{$disabled}, #{$readonly}))',
		),
		active: (
			'&:active:where(:not(#{$disabled}))',
			'&.active:where(:not(#{$disabled}))',
		),
		error: (
			'&.error:where(:not(#{$disabled}))',
		),
		success: (
			'&.success:where(:not(#{$disabled}))',
		)
	);
}

/* stylelint-disable value-keyword-case */
$hover-sensitive-states: (hover, selectedAndHover, checkedAndHover);
/* stylelint-enable value-keyword-case */

@mixin appearance($state-selectors: state-selectors($state-aspect-selectors)) {
	@each $state in config.$states {
		$selectors: map.get($state-selectors, $state);

		@each $selector in $selectors {
			@if list.index($hover-sensitive-states, $state) {
				// Only wrap the pseudo-:hover selectors in a media query
				@if string.index($selector, ':hover') {
					@media (hover: hover) {
						#{$selector} {
							@include appearance-inner($state);
						}
					}
				} @else {
					#{$selector} {
						@include appearance-inner($state);
					}
				}
			} @else {
				#{$selector} {
					@include appearance-inner($state);
				}
			}
		}
	}
}

@mixin appearance-inner($state) {
	$state-mapping: map.get(variables.$states-mapping, $state);

	@each $appearance in config.$appearances {
		$selector: if(
			$appearance == config.$default,
			'&',
			'&.appearance-#{$appearance}'
		);

		#{$selector} {
			$appearance-mapping: map.get($state-mapping, $appearance);

			@each $type, $key in $appearance-mapping {
				#{functions.get-appearance-token($type)}: $key;
			}
		}
	}
}
