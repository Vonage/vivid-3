{
	"componentDefs": [
		{
			"name": "accordion",
			"className": "Accordion",
			"vividModulePath": "libs/components/src/lib/accordion/accordion.ts",
			"registerFunctionName": "registerAccordion",
			"description": "",
			"props": [
				{
					"name": "expandMode",
					"description": "Controls the expand mode of the Accordion, either allowing\nsingle or multiple item expansion.",
					"type": "'single' | 'multi'",
					"attributeName": "expand-mode",
					"propertyName": "expandmode"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "change",
					"description": "Fires a custom 'change' event when the active item changes",
					"type": "CustomEvent<string | null>"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [],
			"methods": [{ "name": "closeAll", "args": [], "returnType": "void" }],
			"slots": [{ "name": "default", "description": "Default slot." }]
		},
		{
			"name": "accordion-item",
			"className": "AccordionItem",
			"vividModulePath": "libs/components/src/lib/accordion-item/accordion-item.ts",
			"registerFunctionName": "registerAccordionItem",
			"description": "",
			"props": [
				{
					"name": "expanded",
					"description": "Expands or collapses the item.",
					"type": "boolean",
					"attributeName": "expanded",
					"propertyName": "expanded"
				},
				{
					"name": "heading",
					"type": "string",
					"attributeName": "heading",
					"propertyName": "heading"
				},
				{
					"name": "headingLevel",
					"description": "Configures the https://www.w3.org/TR/wai-aria-1.1/#aria-level | level of the\nheading element.",
					"type": "1 | 2 | 3 | 4 | 5 | 6",
					"attributeName": "heading-level",
					"propertyName": "headinglevel"
				},
				{
					"name": "icon",
					"description": "A decorative icon the custom element should have.\nSee the Vivid Icon Gallery for available icons: https://icons.vivid.vonage.com/",
					"type": "IconId",
					"attributeName": "icon",
					"propertyName": "icon"
				},
				{
					"name": "iconTrailing",
					"description": "Indicates the icon affix alignment.",
					"type": "boolean",
					"attributeName": "icon-trailing",
					"propertyName": "iconTrailing"
				},
				{
					"name": "id",
					"description": "The item ID",
					"type": "string",
					"attributeName": "id",
					"propertyName": "id"
				},
				{
					"name": "meta",
					"type": "string",
					"attributeName": "meta",
					"propertyName": "meta"
				},
				{
					"name": "noIndicator",
					"description": "Indicates whether the accordion-item has indicator",
					"type": "boolean",
					"attributeName": "no-indicator",
					"propertyName": "noIndicator"
				},
				{
					"name": "size",
					"description": "The size the accordion-item should have.",
					"type": "'condensed' | 'normal'",
					"attributeName": "size",
					"propertyName": "size"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "change",
					"description": "Fires a custom 'change' event when the button is invoked",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [],
			"methods": [],
			"slots": [
				{ "name": "default", "description": "Default slot." },
				{
					"name": "icon",
					"description": "The preferred way to add an icon to the component."
				}
			]
		},
		{
			"name": "action-group",
			"className": "ActionGroup",
			"vividModulePath": "libs/components/src/lib/action-group/action-group.ts",
			"registerFunctionName": "registerActionGroup",
			"description": "",
			"props": [
				{
					"name": "appearance",
					"description": "The appearance the ActionGroup should have.",
					"type": "'fieldset' | 'ghost'",
					"attributeName": "appearance",
					"propertyName": "appearance"
				},
				{
					"name": "shape",
					"description": "The shape the ActionGroup should have.",
					"type": "'rounded' | 'pill'",
					"attributeName": "shape",
					"propertyName": "shape"
				},
				{
					"name": "tight",
					"description": "Indicates whether action group should have padding.",
					"type": "boolean",
					"attributeName": "tight",
					"propertyName": "tight"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [],
			"methods": [],
			"slots": [{ "name": "default", "description": "Default slot." }]
		},
		{
			"name": "alert",
			"className": "Alert",
			"vividModulePath": "libs/components/src/lib/alert/alert.ts",
			"registerFunctionName": "registerAlert",
			"description": "",
			"props": [
				{
					"name": "connotation",
					"description": "Sets an appropriate icon / icon color for the connotation.",
					"type": "'accent' | 'information' | 'success' | 'warning' | 'announcement' | 'alert'",
					"attributeName": "connotation",
					"propertyName": "connotation"
				},
				{
					"name": "dismissButtonAriaLabel",
					"description": "Allows setting a custom aria-label for the dismiss button.",
					"type": "string",
					"attributeName": "dismiss-button-aria-label",
					"propertyName": "dismissButtonAriaLabel"
				},
				{
					"name": "headline",
					"description": "Adds a headline to the Alert.",
					"type": "string",
					"attributeName": "headline",
					"propertyName": "headline"
				},
				{
					"name": "icon",
					"description": "A decorative icon the custom element should have.\nSee the Vivid Icon Gallery for available icons: https://icons.vivid.vonage.com/",
					"type": "IconId",
					"attributeName": "icon",
					"propertyName": "icon"
				},
				{
					"name": "open",
					"description": "Open state of the Alert.",
					"type": "boolean",
					"attributeName": "open",
					"propertyName": "open"
				},
				{
					"name": "placement",
					"description": "The placement of the Alert on the screen.",
					"type": "'top' | 'top-start' | 'top-end' | 'bottom' | 'bottom-start' | 'bottom-end'",
					"attributeName": "placement",
					"propertyName": "placement"
				},
				{
					"name": "removable",
					"description": "Adds a close button to the Alert.",
					"type": "boolean",
					"attributeName": "removable",
					"propertyName": "removable"
				},
				{
					"name": "strategy",
					"description": "Controls the `position` of the Alert.",
					"type": "'fixed' | 'static'",
					"attributeName": "strategy",
					"propertyName": "strategy"
				},
				{
					"name": "text",
					"description": "The main text of the Alert.",
					"type": "string",
					"attributeName": "text",
					"propertyName": "text"
				},
				{
					"name": "timeoutms",
					"description": "Timeout after which the Alert will close.",
					"type": "number",
					"attributeName": "timeoutms",
					"propertyName": "timeoutms"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "close",
					"description": "Fired when the Alert is closed",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				},
				{
					"name": "open",
					"description": "Fired when the Alert is opened",
					"type": "CustomEvent<undefined>"
				}
			],
			"vueModels": [],
			"methods": [
				{
					"name": "openChanged",
					"args": [
						{ "name": "oldValue", "type": "boolean" },
						{ "name": "newValue", "type": "boolean" }
					],
					"returnType": "void"
				}
			],
			"slots": [
				{
					"name": "action-items",
					"description": "Add action items to the Alert using this slot."
				},
				{
					"name": "icon",
					"description": "The preferred way to add an icon to the component."
				},
				{ "name": "main", "description": "The main content of the Alert." }
			]
		},
		{
			"name": "audio-player",
			"className": "AudioPlayer",
			"vividModulePath": "libs/components/src/lib/audio-player/audio-player.ts",
			"registerFunctionName": "registerAudioPlayer",
			"description": "",
			"props": [
				{
					"name": "connotation",
					"description": "The connotation the audio-player should have.",
					"type": "'accent' | 'cta'",
					"attributeName": "connotation",
					"propertyName": "connotation"
				},
				{
					"name": "disabled",
					"description": "Indicates whether audio player is disabled.",
					"type": "boolean",
					"attributeName": "disabled",
					"propertyName": "disabled"
				},
				{
					"name": "notime",
					"type": "boolean",
					"attributeName": "notime",
					"propertyName": "notime"
				},
				{
					"name": "pauseButtonAriaLabel",
					"type": "string",
					"attributeName": "pause-button-aria-label",
					"propertyName": "pauseButtonAriaLabel"
				},
				{
					"name": "playButtonAriaLabel",
					"type": "string",
					"attributeName": "play-button-aria-label",
					"propertyName": "playButtonAriaLabel"
				},
				{
					"name": "playbackRates",
					"description": "Sets the available playback rates. When an empty string, no choices will be available",
					"type": "string",
					"attributeName": "playback-rates",
					"propertyName": "playbackRates"
				},
				{
					"name": "skipBackwardAriaLabel",
					"type": "string",
					"attributeName": "skip-backward-aria-label",
					"propertyName": "skipBackwardButtonAriaLabel"
				},
				{
					"name": "skipBy",
					"description": "Allows the audio to skip back or forward",
					"type": "'0' | '5' | '10' | '30'",
					"attributeName": "skip-by",
					"propertyName": "skipBy"
				},
				{
					"name": "skipForwardAriaLabel",
					"type": "string",
					"attributeName": "skip-forward-aria-label",
					"propertyName": "skipForwardButtonAriaLabel"
				},
				{
					"name": "sliderAriaLabel",
					"type": "string",
					"attributeName": "slider-aria-label",
					"propertyName": "sliderAriaLabel"
				},
				{
					"name": "src",
					"description": "Indicates the audio-player's src.",
					"type": "string",
					"attributeName": "src",
					"propertyName": "src"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [],
			"methods": [
				{ "name": "pause", "args": [], "returnType": "unknown" },
				{ "name": "play", "args": [], "returnType": "unknown" },
				{ "name": "srcChanged", "args": [], "returnType": "unknown" }
			],
			"slots": []
		},
		{
			"name": "avatar",
			"className": "Avatar",
			"vividModulePath": "libs/components/src/lib/avatar/avatar.ts",
			"registerFunctionName": "registerAvatar",
			"description": "",
			"props": [
				{
					"name": "appearance",
					"description": "The appearance the avatar should have.",
					"type": "'filled' | 'outlined' | 'duotone' | 'subtle'",
					"attributeName": "appearance",
					"propertyName": "appearance"
				},
				{
					"name": "connotation",
					"description": "The connotation the avatar should have.",
					"type": "'accent' | 'cta'",
					"attributeName": "connotation",
					"propertyName": "connotation"
				},
				{
					"name": "icon",
					"description": "avatar header icon\nSee the Vivid Icon Gallery for available icons: https://icons.vivid.vonage.com/",
					"type": "IconId",
					"attributeName": "icon",
					"propertyName": "icon"
				},
				{
					"name": "initials",
					"description": "avatar name",
					"type": "string",
					"attributeName": "initials",
					"propertyName": "initials"
				},
				{
					"name": "shape",
					"description": "The shape the avatar should have.",
					"type": "'rounded' | 'pill'",
					"attributeName": "shape",
					"propertyName": "shape"
				},
				{
					"name": "size",
					"description": "The size the avatar should have.",
					"type": "'condensed' | 'normal' | 'expanded'",
					"attributeName": "size",
					"propertyName": "size"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [],
			"methods": [],
			"slots": [
				{
					"name": "graphic",
					"description": "Assign nodes to the graphic slot to set a graphic media of any kind (e.g. image, illustration etc)."
				}
			]
		},
		{
			"name": "badge",
			"className": "Badge",
			"vividModulePath": "libs/components/src/lib/badge/badge.ts",
			"registerFunctionName": "registerBadge",
			"description": "",
			"props": [
				{
					"name": "appearance",
					"description": "The appearance the badge should have.",
					"type": "'filled' | 'duotone' | 'subtle' | 'subtle-light'",
					"attributeName": "appearance",
					"propertyName": "appearance"
				},
				{
					"name": "connotation",
					"description": "The connotation the badge should have.",
					"type": "'accent' | 'cta' | 'success' | 'alert' | 'warning' | 'information'",
					"attributeName": "connotation",
					"propertyName": "connotation"
				},
				{
					"name": "icon",
					"description": "A decorative icon the custom element should have.\nSee the Vivid Icon Gallery for available icons: https://icons.vivid.vonage.com/",
					"type": "IconId",
					"attributeName": "icon",
					"propertyName": "icon"
				},
				{
					"name": "iconTrailing",
					"description": "Indicates the icon affix alignment.",
					"type": "boolean",
					"attributeName": "icon-trailing",
					"propertyName": "iconTrailing"
				},
				{
					"name": "shape",
					"description": "The shape the badge should have.",
					"type": "'rounded' | 'pill'",
					"attributeName": "shape",
					"propertyName": "shape"
				},
				{
					"name": "size",
					"description": "The size the badge should have.",
					"type": "'normal' | 'expanded'",
					"attributeName": "size",
					"propertyName": "size"
				},
				{
					"name": "text",
					"description": "Indicates the badge's text.",
					"type": "string",
					"attributeName": "text",
					"propertyName": "text"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [],
			"methods": [],
			"slots": [
				{
					"name": "icon",
					"description": "The preferred way to add an icon to the component."
				}
			]
		},
		{
			"name": "banner",
			"className": "Banner",
			"vividModulePath": "libs/components/src/lib/banner/banner.ts",
			"registerFunctionName": "registerBanner",
			"description": "",
			"props": [
				{
					"name": "actionHref",
					"type": "string",
					"attributeName": "action-href",
					"propertyName": "actionHref"
				},
				{
					"name": "actionText",
					"type": "string",
					"attributeName": "action-text",
					"propertyName": "actionText"
				},
				{
					"name": "connotation",
					"type": "'information' | 'announcement' | 'success' | 'warning' | 'alert'",
					"attributeName": "connotation",
					"propertyName": "connotation"
				},
				{
					"name": "dismissAriaLabel",
					"type": "string",
					"attributeName": "dismiss-aria-label",
					"propertyName": "dismissButtonAriaLabel"
				},
				{
					"name": "icon",
					"description": "A decorative icon the custom element should have.\nSee the Vivid Icon Gallery for available icons: https://icons.vivid.vonage.com/",
					"type": "IconId",
					"attributeName": "icon",
					"propertyName": "icon"
				},
				{
					"name": "removable",
					"type": "boolean",
					"attributeName": "removable",
					"propertyName": "removable"
				},
				{
					"name": "text",
					"type": "string",
					"attributeName": "text",
					"propertyName": "text"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [],
			"methods": [{ "name": "remove", "args": [], "returnType": "void" }],
			"slots": [
				{
					"name": "action-items",
					"description": "Add action items to banner using this slot."
				},
				{
					"name": "icon",
					"description": "The preferred way to add an icon to the component."
				}
			]
		},
		{
			"name": "breadcrumb",
			"className": "Breadcrumb",
			"vividModulePath": "libs/components/src/lib/breadcrumb/breadcrumb.ts",
			"registerFunctionName": "registerBreadcrumb",
			"description": "",
			"props": [],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [],
			"methods": [],
			"slots": [{ "name": "default", "description": "Default slot." }]
		},
		{
			"name": "breadcrumb-item",
			"className": "BreadcrumbItem",
			"vividModulePath": "libs/components/src/lib/breadcrumb-item/breadcrumb-item.ts",
			"registerFunctionName": "registerBreadcrumbItem",
			"description": "",
			"props": [
				{
					"name": "download",
					"description": "Prompts the user to save the linked URL. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
					"type": "string",
					"attributeName": "download",
					"propertyName": "download"
				},
				{
					"name": "href",
					"description": "The URL the hyperlink references. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
					"type": "string",
					"attributeName": "href",
					"propertyName": "href"
				},
				{
					"name": "hreflang",
					"description": "Hints at the language of the referenced resource. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
					"type": "string",
					"attributeName": "hreflang",
					"propertyName": "hreflang"
				},
				{
					"name": "ping",
					"description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
					"type": "string",
					"attributeName": "ping",
					"propertyName": "ping"
				},
				{
					"name": "referrerpolicy",
					"description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
					"type": "string",
					"attributeName": "referrerpolicy",
					"propertyName": "referrerpolicy"
				},
				{
					"name": "rel",
					"description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
					"type": "string",
					"attributeName": "rel",
					"propertyName": "rel"
				},
				{
					"name": "target",
					"description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
					"type": "'_self' | '_blank' | '_parent' | '_top'",
					"attributeName": "target",
					"propertyName": "target"
				},
				{
					"name": "text",
					"type": "string",
					"attributeName": "text",
					"propertyName": "text"
				},
				{
					"name": "type",
					"description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
					"type": "string",
					"attributeName": "type",
					"propertyName": "type"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [],
			"methods": [],
			"slots": []
		},
		{
			"name": "button",
			"className": "Button",
			"vividModulePath": "libs/components/src/lib/button/button.ts",
			"registerFunctionName": "registerButton",
			"description": "",
			"props": [
				{
					"name": "active",
					"description": "Displays the button in active state.",
					"type": "boolean",
					"attributeName": "active",
					"propertyName": "active"
				},
				{
					"name": "appearance",
					"description": "The appearance the button should have.",
					"type": "'filled' | 'outlined' | 'ghost' | 'ghost-light' | 'outlined-light'",
					"attributeName": "appearance",
					"propertyName": "appearance"
				},
				{
					"name": "autofocus",
					"description": "Determines if the element should receive document focus on page load.",
					"type": "boolean",
					"attributeName": "autofocus",
					"propertyName": "autofocus"
				},
				{
					"name": "connotation",
					"description": "The connotation the button should have.",
					"type": "'accent' | 'announcement' | 'cta' | 'success' | 'alert'",
					"attributeName": "connotation",
					"propertyName": "connotation"
				},
				{
					"name": "disabled",
					"description": "Sets the element's disabled state. A disabled element will not be included during form submission.",
					"type": "boolean",
					"attributeName": "disabled",
					"propertyName": "disabled"
				},
				{
					"name": "download",
					"description": "Prompts the user to save the linked URL. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
					"type": "string",
					"attributeName": "download",
					"propertyName": "download"
				},
				{
					"name": "dropdownIndicator",
					"description": "Display a chevron to indicate that the button opens a dropdown.",
					"type": "boolean",
					"attributeName": "dropdown-indicator",
					"propertyName": "dropdownIndicator"
				},
				{
					"name": "form",
					"description": "The id of a form to associate the element to.",
					"type": "string",
					"attributeName": "form",
					"propertyName": "formId"
				},
				{
					"name": "formaction",
					"description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element for more details.",
					"type": "string",
					"attributeName": "formaction",
					"propertyName": "formaction"
				},
				{
					"name": "formenctype",
					"description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element for more details.",
					"type": "string",
					"attributeName": "formenctype",
					"propertyName": "formenctype"
				},
				{
					"name": "formmethod",
					"description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element for more details.",
					"type": "string",
					"attributeName": "formmethod",
					"propertyName": "formmethod"
				},
				{
					"name": "formnovalidate",
					"description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element for more details.",
					"type": "boolean",
					"attributeName": "formnovalidate",
					"propertyName": "formnovalidate"
				},
				{
					"name": "formtarget",
					"description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element for more details.",
					"type": "'_self' | '_blank' | '_parent' | '_top'",
					"attributeName": "formtarget",
					"propertyName": "formtarget"
				},
				{
					"name": "href",
					"description": "The URL the hyperlink references. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
					"type": "string",
					"attributeName": "href",
					"propertyName": "href"
				},
				{
					"name": "hreflang",
					"description": "Hints at the language of the referenced resource. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
					"type": "string",
					"attributeName": "hreflang",
					"propertyName": "hreflang"
				},
				{
					"name": "icon",
					"description": "A decorative icon the custom element should have.\nSee the Vivid Icon Gallery for available icons: https://icons.vivid.vonage.com/",
					"type": "IconId",
					"attributeName": "icon",
					"propertyName": "icon"
				},
				{
					"name": "iconTrailing",
					"description": "Indicates the icon affix alignment.",
					"type": "boolean",
					"attributeName": "icon-trailing",
					"propertyName": "iconTrailing"
				},
				{
					"name": "initialValue",
					"description": "The default value of the element. This value sets the `value` property\nonly when the `value` property has not been explicitly set.",
					"type": "string",
					"attributeName": "value",
					"propertyName": "initialValue"
				},
				{
					"name": "label",
					"description": "Indicates the button's label.",
					"type": "string",
					"attributeName": "label",
					"propertyName": "label"
				},
				{
					"name": "name",
					"description": "The name of the element. This element's value will be surfaced during form submission under the provided name.",
					"type": "string",
					"attributeName": "name",
					"propertyName": "name"
				},
				{
					"name": "pending",
					"description": "Displays the button in pending state.",
					"type": "boolean",
					"attributeName": "pending",
					"propertyName": "pending"
				},
				{
					"name": "ping",
					"description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
					"type": "string",
					"attributeName": "ping",
					"propertyName": "ping"
				},
				{
					"name": "referrerpolicy",
					"description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
					"type": "string",
					"attributeName": "referrerpolicy",
					"propertyName": "referrerpolicy"
				},
				{
					"name": "rel",
					"description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
					"type": "string",
					"attributeName": "rel",
					"propertyName": "rel"
				},
				{
					"name": "required",
					"description": "Require the field to be completed prior to form submission.",
					"type": "boolean",
					"attributeName": "required",
					"propertyName": "required"
				},
				{
					"name": "shape",
					"description": "The shape the button should have.",
					"type": "'rounded' | 'pill'",
					"attributeName": "shape",
					"propertyName": "shape"
				},
				{
					"name": "size",
					"description": "The size the button should have.",
					"type": "'super-condensed' | 'condensed' | 'normal' | 'expanded'",
					"attributeName": "size",
					"propertyName": "size"
				},
				{
					"name": "stacked",
					"description": "Indicates the icon is stacked.",
					"type": "boolean",
					"attributeName": "stacked",
					"propertyName": "stacked"
				},
				{
					"name": "target",
					"description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
					"type": "'_self' | '_blank' | '_parent' | '_top'",
					"attributeName": "target",
					"propertyName": "target"
				},
				{
					"name": "title",
					"description": "Specifies extra information about the button. This information is typically used by browsers to display a tooltip.",
					"type": "string",
					"attributeName": "title",
					"propertyName": "title"
				},
				{
					"name": "type",
					"description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
					"type": "'submit' | 'reset' | 'button'",
					"attributeName": "type",
					"propertyName": "type"
				},
				{
					"name": "value",
					"description": "The current value of the element.",
					"type": "string",
					"attributeName": "current-value",
					"propertyName": "value"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [],
			"methods": [
				{
					"name": "checkValidity",
					"description": "Return the current validity of the element.",
					"args": [],
					"returnType": "boolean"
				},
				{
					"name": "reportValidity",
					"description": "Return the current validity of the element.\nIf false, fires an invalid event at the element.",
					"args": [],
					"returnType": "boolean"
				},
				{
					"name": "validate",
					"description": "{@inheritDoc (FormAssociated:interface).validate}",
					"args": [],
					"returnType": "void"
				}
			],
			"slots": [
				{
					"name": "icon",
					"description": "The preferred way to add an icon to the component."
				}
			]
		},
		{
			"name": "calendar",
			"className": "Calendar",
			"vividModulePath": "libs/components/src/lib/calendar/calendar.ts",
			"registerFunctionName": "registerCalendar",
			"description": "",
			"props": [
				{
					"name": "datetime",
					"description": "The date within a week of choice.\nAccepts any parameter acceptable by the `Date()` constructor.",
					"type": "Date | string",
					"attributeName": "datetime",
					"propertyName": "datetime"
				},
				{
					"name": "hour12",
					"description": "The convention of displayed time in which the day runs from midnight to midnight and is divided into 24 or 12 hours.\nUnless provided, choice will be set according to local time preference (e.g. US = 12, IL = 24)",
					"type": "boolean",
					"attributeName": "hour12",
					"propertyName": "hour12"
				},
				{
					"name": "locales",
					"description": "A locale string or array of locale strings that contain one or more language or locale tags.\nIf you include more than one locale string,\nlist them in descending order of priority so that the first entry is the preferred locale.\nIf you omit this parameter, the default locale of the JavaScript runtime is used.\nThis parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\ne.g. en-US | en-US, he-IL",
					"type": "string | string[]",
					"attributeName": "locales",
					"propertyName": "locales"
				},
				{
					"name": "startDay",
					"description": "The day to show as the first within a work week.\nAccepts either Sunday or Monday\nCalendar will - programmatically - default to Monday if not specified\n\n(only applicable for views of more than a single day)",
					"type": "'sunday' | 'monday'",
					"attributeName": "start-day",
					"propertyName": "startDay"
				},
				{
					"name": "stickyMode",
					"description": "Sticky header and sticky column options",
					"type": "'none' | 'header' | 'column' | 'all'",
					"attributeName": "sticky-mode",
					"propertyName": "stickyMode"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [],
			"methods": [
				{
					"name": "onKeydown",
					"args": [{ "name": "_arg0", "type": "KeyboardEvent" }],
					"returnType": "unknown"
				}
			],
			"slots": [
				{
					"name": "day-0",
					"description": "Assign elements to corresponding day column using this slot."
				},
				{
					"name": "day-1",
					"description": "Assign elements to corresponding day column using this slot."
				},
				{
					"name": "day-2",
					"description": "Assign elements to corresponding day column using this slot."
				},
				{
					"name": "day-3",
					"description": "Assign elements to corresponding day column using this slot."
				},
				{
					"name": "day-4",
					"description": "Assign elements to corresponding day column using this slot."
				},
				{
					"name": "day-5",
					"description": "Assign elements to corresponding day column using this slot."
				},
				{
					"name": "day-6",
					"description": "Assign elements to corresponding day column using this slot."
				},
				{ "name": "default", "description": "Default slot." }
			]
		},
		{
			"name": "calendar-event",
			"className": "CalendarEvent",
			"vividModulePath": "libs/components/src/lib/calendar-event/calendar-event.ts",
			"registerFunctionName": "registerCalendarEvent",
			"description": "",
			"props": [
				{
					"name": "appearance",
					"description": "The appearance the calendar event should have.",
					"type": "'filled' | 'duotone' | 'subtle'",
					"attributeName": "appearance",
					"propertyName": "appearance"
				},
				{
					"name": "connotation",
					"description": "The connotation the calendar event should have.",
					"type": "'accent' | 'cta' | 'success' | 'alert' | 'warning' | 'information' | 'announcement'",
					"attributeName": "connotation",
					"propertyName": "connotation"
				},
				{
					"name": "description",
					"description": "the description of the event",
					"type": "string",
					"attributeName": "description",
					"propertyName": "description"
				},
				{
					"name": "duration",
					"description": "event's time duration in hours",
					"type": "number",
					"attributeName": "duration",
					"propertyName": "duration"
				},
				{
					"name": "heading",
					"description": "the heading of the event",
					"type": "string",
					"attributeName": "heading",
					"propertyName": "heading"
				},
				{
					"name": "overlapCount",
					"description": "sets card display precendence and indentation",
					"type": "number",
					"attributeName": "overlap-count",
					"propertyName": "overlapCount"
				},
				{
					"name": "start",
					"description": "time of day event starts",
					"type": "number",
					"attributeName": "start",
					"propertyName": "start"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [],
			"methods": [],
			"slots": []
		},
		{
			"name": "card",
			"className": "Card",
			"vividModulePath": "libs/components/src/lib/card/card.ts",
			"registerFunctionName": "registerCard",
			"description": "",
			"props": [
				{
					"name": "appearance",
					"description": "The appearance the card should have.",
					"type": "'elevated' | 'ghost' | 'outlined'",
					"attributeName": "appearance",
					"propertyName": "appearance"
				},
				{
					"name": "clickableCard",
					"description": "Indicates whether card should be a clickable <button> element.",
					"type": "boolean",
					"attributeName": "clickable-card",
					"propertyName": "clickableCard"
				},
				{
					"name": "download",
					"description": "Prompts the user to save the linked URL. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
					"type": "string",
					"attributeName": "download",
					"propertyName": "download"
				},
				{
					"name": "elevation",
					"description": "card elevation dp",
					"type": "0 | 2 | 4 | 8 | 12 | 16 | 24",
					"attributeName": "elevation",
					"propertyName": "elevation"
				},
				{
					"name": "headline",
					"description": "the text of the card heading\naccepts string",
					"type": "string",
					"attributeName": "headline",
					"propertyName": "headline"
				},
				{
					"name": "href",
					"description": "The URL the hyperlink references. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
					"type": "string",
					"attributeName": "href",
					"propertyName": "href"
				},
				{
					"name": "hreflang",
					"description": "Hints at the language of the referenced resource. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
					"type": "string",
					"attributeName": "hreflang",
					"propertyName": "hreflang"
				},
				{
					"name": "icon",
					"description": "card header icon\nSee the Vivid Icon Gallery for available icons: https://icons.vivid.vonage.com/",
					"type": "IconId",
					"attributeName": "icon",
					"propertyName": "icon"
				},
				{
					"name": "ping",
					"description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
					"type": "string",
					"attributeName": "ping",
					"propertyName": "ping"
				},
				{
					"name": "referrerpolicy",
					"description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
					"type": "string",
					"attributeName": "referrerpolicy",
					"propertyName": "referrerpolicy"
				},
				{
					"name": "rel",
					"description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
					"type": "string",
					"attributeName": "rel",
					"propertyName": "rel"
				},
				{
					"name": "subtitle",
					"description": "the text of the card sub-heading\naccepts string",
					"type": "string",
					"attributeName": "subtitle",
					"propertyName": "subtitle"
				},
				{
					"name": "target",
					"description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
					"type": "'_self' | '_blank' | '_parent' | '_top'",
					"attributeName": "target",
					"propertyName": "target"
				},
				{
					"name": "text",
					"description": "the text of the card sub-heading\naccepts string",
					"type": "string",
					"attributeName": "text",
					"propertyName": "text"
				},
				{
					"name": "type",
					"description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
					"type": "string",
					"attributeName": "type",
					"propertyName": "type"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [],
			"methods": [],
			"slots": [
				{
					"name": "footer",
					"description": "The footer slot is for content in the card footer."
				},
				{
					"name": "graphic",
					"description": "The graphic slot overrides the icon property."
				},
				{
					"name": "main",
					"description": "Assign nodes to main slot to fully override a card's predefined flow and style with your own."
				},
				{
					"name": "media",
					"description": "The media slot is mainly for images or video content above the card header."
				},
				{
					"name": "meta",
					"description": "The meta slot is for action content in the card header."
				}
			]
		},
		{
			"name": "checkbox",
			"className": "Checkbox",
			"vividModulePath": "libs/components/src/lib/checkbox/checkbox.ts",
			"registerFunctionName": "registerCheckbox",
			"description": "",
			"props": [
				{
					"name": "checked",
					"description": "The current checkedness of the element.",
					"type": "boolean",
					"attributeName": "current-checked",
					"propertyName": "checked"
				},
				{
					"name": "connotation",
					"description": "The connotation the checklist should have.",
					"type": "'accent' | 'cta'",
					"attributeName": "connotation",
					"propertyName": "connotation"
				},
				{
					"name": "defaultChecked",
					"description": "The default checkedness of the element. This value sets the `checked` property\nonly when the `checked` property has not been explicitly set.",
					"type": "boolean",
					"attributeName": "checked",
					"propertyName": "defaultChecked"
				},
				{
					"name": "disabled",
					"description": "Sets the element's disabled state. A disabled element will not be included during form submission.",
					"type": "boolean",
					"attributeName": "disabled",
					"propertyName": "disabled"
				},
				{
					"name": "errorText",
					"description": "The error text for the form element.",
					"type": "string",
					"attributeName": "error-text"
				},
				{
					"name": "helperText",
					"description": "Provides additional information to help the user enter the correct information.\nTo add HTML to the helper text, use the helper-text slot instead.",
					"type": "string",
					"attributeName": "helper-text",
					"propertyName": "helperText"
				},
				{
					"name": "indeterminate",
					"description": "The indeterminate state of the control",
					"type": "boolean",
					"propertyName": "indeterminate"
				},
				{
					"name": "initialValue",
					"description": "The default value of the element. This value sets the `value` property\nonly when the `value` property has not been explicitly set.",
					"type": "string",
					"attributeName": "value",
					"propertyName": "initialValue"
				},
				{
					"name": "label",
					"description": "The label for the form element.",
					"type": "string",
					"attributeName": "label"
				},
				{
					"name": "name",
					"description": "The name of the element. This element's value will be surfaced during form submission under the provided name.",
					"type": "string",
					"attributeName": "name",
					"propertyName": "name"
				},
				{
					"name": "readonly",
					"description": "When true, the control will be immutable by user interaction. See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute for more information.",
					"type": "boolean",
					"attributeName": "readonly",
					"propertyName": "readOnly"
				},
				{
					"name": "required",
					"description": "Require the field to be completed prior to form submission.",
					"type": "boolean",
					"attributeName": "required",
					"propertyName": "required"
				},
				{
					"name": "successText",
					"description": "The success text for the form element.",
					"type": "string",
					"attributeName": "success-text"
				},
				{
					"name": "tabindex",
					"type": "string",
					"attributeName": "tabindex",
					"propertyName": "tabindex"
				},
				{
					"name": "value",
					"description": "The current value of the element.",
					"type": "string",
					"attributeName": "current-value",
					"propertyName": "value"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "change",
					"description": "Emitted when the checked state changes.",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Emitted when the checked state changes.",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [
				{
					"name": "modelValue",
					"propName": "checked",
					"eventNames": ["change"],
					"valueMapping": "event.currentTarget.checked"
				}
			],
			"methods": [
				{ "name": "ariaCheckedChanged", "args": [], "returnType": "unknown" },
				{
					"name": "checkValidity",
					"description": "Return the current validity of the element.",
					"args": [],
					"returnType": "boolean"
				},
				{
					"name": "reportValidity",
					"description": "Return the current validity of the element.\nIf false, fires an invalid event at the element.",
					"args": [],
					"returnType": "boolean"
				}
			],
			"slots": [
				{
					"name": "default",
					"description": "The default slot allows you to use rich content as the checkbox's label."
				},
				{
					"name": "helper-text",
					"description": "Describes how to use the checkbox. Alternative to the `helper-text` attribute."
				}
			]
		},
		{
			"name": "combobox",
			"className": "Combobox",
			"vividModulePath": "libs/components/src/lib/combobox/combobox.ts",
			"registerFunctionName": "registerCombobox",
			"description": "",
			"props": [
				{
					"name": "appearance",
					"description": "The appearance attribute.",
					"type": "'fieldset' | 'ghost'",
					"attributeName": "appearance",
					"propertyName": "appearance"
				},
				{
					"name": "autocomplete",
					"description": "The autocomplete attribute.",
					"type": "'inline' | 'list' | 'both' | 'none'",
					"attributeName": "autocomplete",
					"propertyName": "autocomplete"
				},
				{
					"name": "disabled",
					"description": "Sets the element's disabled state. A disabled element will not be included during form submission.",
					"type": "boolean",
					"attributeName": "disabled",
					"propertyName": "disabled"
				},
				{
					"name": "errorText",
					"description": "The error text for the form element.",
					"type": "string",
					"attributeName": "error-text"
				},
				{
					"name": "fixedDropdown",
					"description": "Whether the dropdown is using a fixed positioning strategy.",
					"type": "boolean",
					"attributeName": "fixed-dropdown",
					"propertyName": "fixedDropdown"
				},
				{
					"name": "helperText",
					"description": "Provides additional information to help the user enter the correct information.\nTo add HTML to the helper text, use the helper-text slot instead.",
					"type": "string",
					"attributeName": "helper-text",
					"propertyName": "helperText"
				},
				{
					"name": "icon",
					"description": "A decorative icon the custom element should have.\nSee the Vivid Icon Gallery for available icons: https://icons.vivid.vonage.com/",
					"type": "IconId",
					"attributeName": "icon",
					"propertyName": "icon"
				},
				{
					"name": "initialValue",
					"description": "The default value of the element. This value sets the `value` property\nonly when the `value` property has not been explicitly set.",
					"type": "string",
					"attributeName": "value",
					"propertyName": "initialValue"
				},
				{
					"name": "label",
					"description": "The label for the form element.",
					"type": "string",
					"attributeName": "label"
				},
				{
					"name": "name",
					"description": "The name of the element. This element's value will be surfaced during form submission under the provided name.",
					"type": "string",
					"attributeName": "name",
					"propertyName": "name"
				},
				{
					"name": "open",
					"description": "The open attribute.",
					"type": "boolean",
					"attributeName": "open",
					"propertyName": "open"
				},
				{
					"name": "placeholder",
					"description": "Sets the placeholder value of the element, generally used to provide a hint to the user.",
					"type": "string",
					"attributeName": "placeholder",
					"propertyName": "placeholder"
				},
				{
					"name": "placement",
					"description": "the placement of the combobox\n\nHTML Attribute: string",
					"type": "'top' | 'bottom'",
					"attributeName": "placement",
					"propertyName": "placement"
				},
				{
					"name": "required",
					"description": "Require the field to be completed prior to form submission.",
					"type": "boolean",
					"attributeName": "required",
					"propertyName": "required"
				},
				{
					"name": "scale",
					"description": "The size the combobox should have.",
					"type": "'condensed' | 'normal'",
					"attributeName": "scale",
					"propertyName": "scale"
				},
				{
					"name": "shape",
					"description": "The shape attribute.",
					"type": "'rounded' | 'pill'",
					"attributeName": "shape",
					"propertyName": "shape"
				},
				{
					"name": "successText",
					"description": "The success text for the form element.",
					"type": "string",
					"attributeName": "success-text"
				},
				{
					"name": "value",
					"description": "The current value of the element.",
					"type": "string",
					"attributeName": "current-value",
					"propertyName": "value"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "change",
					"description": "Fires a custom 'change' event when the value updates",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [
				{
					"name": "modelValue",
					"propName": "value",
					"eventNames": ["change"],
					"valueMapping": "event.currentTarget.value"
				}
			],
			"methods": [
				{
					"name": "checkValidity",
					"description": "Return the current validity of the element.",
					"args": [],
					"returnType": "boolean"
				},
				{
					"name": "filterOptions",
					"description": "Filter available options by text value.",
					"args": [],
					"returnType": "void"
				},
				{
					"name": "reportValidity",
					"description": "Return the current validity of the element.\nIf false, fires an invalid event at the element.",
					"args": [],
					"returnType": "boolean"
				},
				{
					"name": "selectFirstOption",
					"description": "Moves focus to the first selectable option.",
					"args": [],
					"returnType": "void"
				},
				{
					"name": "setSelectedOptions",
					"description": "Sets an option as selected and gives it focus.",
					"args": [],
					"returnType": "unknown"
				},
				{
					"name": "validate",
					"description": "{@inheritDoc (FormAssociated:interface).validate}",
					"args": [],
					"returnType": "void"
				}
			],
			"slots": [
				{ "name": "default", "description": "Default slot." },
				{
					"name": "helper-text",
					"description": "Describes how to use the combobox. Alternative to the `helper-text` attribute."
				},
				{
					"name": "icon",
					"description": "The preferred way to add an icon to the combobox control."
				},
				{
					"name": "meta",
					"description": "Slot to add meta content to the combobox control."
				}
			]
		},
		{
			"name": "data-grid",
			"className": "DataGrid",
			"vividModulePath": "libs/components/src/lib/data-grid/data-grid.ts",
			"registerFunctionName": "registerDataGrid",
			"description": "",
			"props": [
				{
					"name": "generateHeader",
					"description": "Whether the grid should automatically generate a header row and its type",
					"type": "'none' | 'default' | 'sticky'",
					"attributeName": "generate-header",
					"propertyName": "generateHeader"
				},
				{
					"name": "gridTemplateColumns",
					"description": "String that gets applied to the css gridTemplateColumns attribute of child rows",
					"type": "string",
					"attributeName": "grid-template-columns",
					"propertyName": "gridTemplateColumns"
				},
				{
					"name": "noTabbing",
					"description": "When true the component will not add itself to the tab queue.\nDefault is false.",
					"type": "boolean",
					"attributeName": "no-tabbing",
					"propertyName": "noTabbing"
				},
				{
					"name": "rowsData",
					"description": "Array of objects representing the rows of the grid.",
					"type": "any[]",
					"propertyName": "rowsData"
				},
				{
					"name": "selectionMode",
					"description": "Indicates the selection mode.",
					"type": "'none' | 'single-row' | 'multi-row' | 'single-cell' | 'multi-cell'",
					"attributeName": "selection-mode",
					"propertyName": "selectionMode"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "cell-click",
					"description": "Event that fires when a cell is clicked",
					"type": "CustomEvent<{cell: HTMLElement, row: HTMLElement, isHeaderCell: boolean, columnDataKey: string}>"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [],
			"methods": [
				{
					"name": "selectionModeChanged",
					"args": [
						{
							"name": "oldValue",
							"type": "'none' | 'single-row' | 'multi-row' | 'single-cell' | 'multi-cell'"
						}
					],
					"returnType": "unknown"
				}
			],
			"slots": [{ "name": "default", "description": "Default slot." }]
		},
		{
			"name": "data-grid-cell",
			"className": "DataGridCell",
			"vividModulePath": "libs/components/src/lib/data-grid/data-grid-cell.ts",
			"registerFunctionName": "registerDataGrid",
			"description": "",
			"props": [
				{
					"name": "ariaSelected",
					"description": "Indicates the selected status.",
					"type": "string",
					"attributeName": "aria-selected",
					"propertyName": "ariaSelected"
				},
				{
					"name": "ariaSort",
					"description": "Indicates the sort status.",
					"type": "string",
					"attributeName": "aria-sort",
					"propertyName": "ariaSort"
				},
				{
					"name": "cellType",
					"description": "The type of cell",
					"type": "'default' | 'columnheader' | 'rowheader'",
					"attributeName": "cell-type",
					"propertyName": "cellType"
				},
				{
					"name": "columnDefinition",
					"description": "Object representing the column definition.",
					"type": "object",
					"propertyName": "columnDefinition"
				},
				{
					"name": "gridColumn",
					"description": "The column index of the cell.\nThis will be applied to the css grid-column-index value\napplied to the cell",
					"type": "string",
					"attributeName": "grid-column",
					"propertyName": "gridColumn"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "cell-click",
					"description": "Event that fires when a cell is clicked",
					"type": "CustomEvent<{cell: HTMLElement, row: HTMLElement, isHeaderCell: boolean, columnDataKey: string}>"
				},
				{
					"name": "cell-focused",
					"description": "Fires a custom 'cell-focused' event when focus is on the cell or its contents",
					"type": "CustomEvent<HTMLElement>"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				},
				{
					"name": "sort",
					"description": "Event that fires when a sortable column header is clicked",
					"type": "CustomEvent<{columnDataKey: string, ariaSort: string | null}>"
				}
			],
			"vueModels": [],
			"methods": [
				{
					"name": "ariaSelectedChanged",
					"args": [
						{ "name": "_", "type": "string | null" },
						{ "name": "selectedState", "type": "string | null" }
					],
					"returnType": "unknown"
				},
				{
					"name": "handleFocusin",
					"args": [{ "name": "_", "type": "FocusEvent" }],
					"returnType": "void"
				},
				{
					"name": "handleFocusout",
					"args": [{ "name": "_", "type": "FocusEvent" }],
					"returnType": "void"
				},
				{
					"name": "handleKeydown",
					"args": [{ "name": "e", "type": "KeyboardEvent" }],
					"returnType": "void"
				}
			],
			"slots": [{ "name": "default", "description": "Default slot." }]
		},
		{
			"name": "data-grid-row",
			"className": "DataGridRow",
			"vividModulePath": "libs/components/src/lib/data-grid/data-grid-row.ts",
			"registerFunctionName": "registerDataGrid",
			"description": "",
			"props": [
				{
					"name": "ariaSelected",
					"description": "Indicates the selected status.",
					"type": "string",
					"attributeName": "aria-selected",
					"propertyName": "ariaSelected"
				},
				{
					"name": "gridTemplateColumns",
					"description": "String that gets applied to the the css gridTemplateColumns attribute for the row\nx",
					"type": "string",
					"attributeName": "grid-template-columns",
					"propertyName": "gridTemplateColumns"
				},
				{
					"name": "rowType",
					"description": "The type of row",
					"type": "'default' | 'header' | 'sticky-header'",
					"attributeName": "row-type",
					"propertyName": "rowType"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "cell-click",
					"description": "Event that fires when a cell is clicked",
					"type": "CustomEvent<{cell: HTMLElement, row: HTMLElement, isHeaderCell: boolean, columnDataKey: string}>"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				},
				{
					"name": "row-focused",
					"description": "Fires a custom 'row-focused' event when focus is on an element (usually a cell or its contents) in the row",
					"type": "CustomEvent<HTMLElement>"
				}
			],
			"vueModels": [],
			"methods": [
				{
					"name": "handleCellFocus",
					"args": [{ "name": "e", "type": "Event" }],
					"returnType": "void"
				},
				{
					"name": "handleFocusout",
					"args": [{ "name": "_", "type": "FocusEvent" }],
					"returnType": "void"
				},
				{
					"name": "handleKeydown",
					"args": [{ "name": "e", "type": "KeyboardEvent" }],
					"returnType": "void"
				}
			],
			"slots": [{ "name": "default", "description": "Default slot." }]
		},
		{
			"name": "date-picker",
			"className": "DatePicker",
			"vividModulePath": "libs/components/src/lib/date-picker/date-picker.ts",
			"registerFunctionName": "registerDatePicker",
			"description": "Single date picker component.",
			"props": [
				{
					"name": "disabled",
					"description": "Sets the element's disabled state. A disabled element will not be included during form submission.",
					"type": "boolean",
					"attributeName": "disabled",
					"propertyName": "disabled"
				},
				{
					"name": "errorText",
					"description": "The error text for the form element.",
					"type": "string",
					"attributeName": "error-text"
				},
				{
					"name": "helperText",
					"description": "Provides additional information to help the user enter the correct information.\nTo add HTML to the helper text, use the helper-text slot instead.",
					"type": "string",
					"attributeName": "helper-text",
					"propertyName": "helperText"
				},
				{
					"name": "initialValue",
					"description": "The default value of the element. This value sets the `value` property\nonly when the `value` property has not been explicitly set.",
					"type": "string",
					"attributeName": "value",
					"propertyName": "initialValue"
				},
				{
					"name": "label",
					"description": "The label for the form element.",
					"type": "string",
					"attributeName": "label"
				},
				{
					"name": "max",
					"description": "The latest accepted date.",
					"type": "string",
					"attributeName": "max",
					"propertyName": "max"
				},
				{
					"name": "min",
					"description": "The earliest accepted date.",
					"type": "string",
					"attributeName": "min",
					"propertyName": "min"
				},
				{
					"name": "name",
					"description": "The name of the element. This element's value will be surfaced during form submission under the provided name.",
					"type": "string",
					"attributeName": "name",
					"propertyName": "name"
				},
				{
					"name": "readonly",
					"description": "Whether the date-picker is readonly.",
					"type": "boolean",
					"attributeName": "readonly",
					"propertyName": "readOnly"
				},
				{
					"name": "required",
					"description": "Require the field to be completed prior to form submission.",
					"type": "boolean",
					"attributeName": "required",
					"propertyName": "required"
				},
				{
					"name": "value",
					"description": "The current value of the element.",
					"type": "string",
					"attributeName": "current-value",
					"propertyName": "value"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "change",
					"description": "Emitted when the date is changed by the user.",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Emitted when the date is changed by the user.",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [
				{
					"name": "modelValue",
					"propName": "value",
					"eventNames": ["input"],
					"valueMapping": "event.currentTarget.value"
				}
			],
			"methods": [
				{
					"name": "checkValidity",
					"description": "Return the current validity of the element.",
					"args": [],
					"returnType": "boolean"
				},
				{
					"name": "reportValidity",
					"description": "Return the current validity of the element.\nIf false, fires an invalid event at the element.",
					"args": [],
					"returnType": "boolean"
				}
			],
			"slots": [
				{
					"name": "helper-text",
					"description": "Describes how to use the date-picker. Alternative to the `helper-text` attribute."
				}
			]
		},
		{
			"name": "date-range-picker",
			"className": "DateRangePicker",
			"vividModulePath": "libs/components/src/lib/date-range-picker/date-range-picker.ts",
			"registerFunctionName": "registerDateRangePicker",
			"description": "",
			"props": [
				{
					"name": "disabled",
					"description": "Sets the element's disabled state. A disabled element will not be included during form submission.",
					"type": "boolean",
					"attributeName": "disabled",
					"propertyName": "disabled"
				},
				{
					"name": "end",
					"description": "The current end value of the element. This property serves as a mechanism\nto set the `end` property through both property assignment and the\n.setAttribute() method. This is useful for setting the field's value\nin UI libraries that bind data through the .setAttribute() API\nand don't support IDL attribute binding.",
					"type": "string",
					"attributeName": "current-end",
					"propertyName": "currentEnd"
				},
				{
					"name": "errorText",
					"description": "The error text for the form element.",
					"type": "string",
					"attributeName": "error-text"
				},
				{
					"name": "helperText",
					"description": "Provides additional information to help the user enter the correct information.\nTo add HTML to the helper text, use the helper-text slot instead.",
					"type": "string",
					"attributeName": "helper-text",
					"propertyName": "helperText"
				},
				{
					"name": "initialEnd",
					"description": "The initial end value. This value sets the `end` property\nonly when the `end` property has not been explicitly set.",
					"type": "string",
					"attributeName": "end",
					"propertyName": "initialEnd"
				},
				{
					"name": "initialStart",
					"description": "The initial start value. This value sets the `start` property\nonly when the `start` property has not been explicitly set.",
					"type": "string",
					"attributeName": "start",
					"propertyName": "initialStart"
				},
				{
					"name": "initialValue",
					"description": "The default value of the element. This value sets the `value` property\nonly when the `value` property has not been explicitly set.",
					"type": "string",
					"attributeName": "value",
					"propertyName": "initialValue"
				},
				{
					"name": "label",
					"description": "The label for the form element.",
					"type": "string",
					"attributeName": "label"
				},
				{
					"name": "max",
					"description": "The latest accepted date.",
					"type": "string",
					"attributeName": "max",
					"propertyName": "max"
				},
				{
					"name": "min",
					"description": "The earliest accepted date.",
					"type": "string",
					"attributeName": "min",
					"propertyName": "min"
				},
				{
					"name": "name",
					"description": "The name of the element. This element's value will be surfaced during form submission under the provided name.",
					"type": "string",
					"attributeName": "name",
					"propertyName": "name"
				},
				{
					"name": "readonly",
					"description": "Whether the date-picker is readonly.",
					"type": "boolean",
					"attributeName": "readonly",
					"propertyName": "readOnly"
				},
				{
					"name": "required",
					"description": "Require the field to be completed prior to form submission.",
					"type": "boolean",
					"attributeName": "required",
					"propertyName": "required"
				},
				{
					"name": "start",
					"description": "The current start value of the element. This property serves as a mechanism\nto set the `start` property through both property assignment and the\n.setAttribute() method. This is useful for setting the field's value\nin UI libraries that bind data through the .setAttribute() API\nand don't support IDL attribute binding.",
					"type": "string",
					"attributeName": "current-start",
					"propertyName": "currentStart"
				},
				{
					"name": "value",
					"description": "The current value of the element.",
					"type": "string",
					"attributeName": "current-value",
					"propertyName": "value"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "change",
					"description": "Emitted when either the start or end value changes",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Emitted when either the start or end value changes",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "input:end",
					"description": "Event emitted when the end value changes",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "input:start",
					"description": "Event emitted when the start value changes",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [
				{
					"name": "end",
					"propName": "end",
					"eventNames": ["input:end"],
					"valueMapping": "event.currentTarget.end"
				},
				{
					"name": "start",
					"propName": "start",
					"eventNames": ["input:start"],
					"valueMapping": "event.currentTarget.start"
				}
			],
			"methods": [
				{
					"name": "checkValidity",
					"description": "Return the current validity of the element.",
					"args": [],
					"returnType": "boolean"
				},
				{
					"name": "reportValidity",
					"description": "Return the current validity of the element.\nIf false, fires an invalid event at the element.",
					"args": [],
					"returnType": "boolean"
				}
			],
			"slots": [
				{
					"name": "helper-text",
					"description": "Describes how to use the date-range-picker. Alternative to the `helper-text` attribute."
				}
			]
		},
		{
			"name": "date-time-picker",
			"className": "DateTimePicker",
			"vividModulePath": "libs/components/src/lib/date-time-picker/date-time-picker.ts",
			"registerFunctionName": "registerDateTimePicker",
			"description": "Single date picker component.",
			"props": [
				{
					"name": "clock",
					"description": "Forces a 12h or 24h clock to be used.",
					"type": "'12h' | '24h'",
					"attributeName": "clock",
					"propertyName": "clock"
				},
				{
					"name": "disabled",
					"description": "Sets the element's disabled state. A disabled element will not be included during form submission.",
					"type": "boolean",
					"attributeName": "disabled",
					"propertyName": "disabled"
				},
				{
					"name": "errorText",
					"description": "The error text for the form element.",
					"type": "string",
					"attributeName": "error-text"
				},
				{
					"name": "helperText",
					"description": "Provides additional information to help the user enter the correct information.\nTo add HTML to the helper text, use the helper-text slot instead.",
					"type": "string",
					"attributeName": "helper-text",
					"propertyName": "helperText"
				},
				{
					"name": "initialValue",
					"description": "The default value of the element. This value sets the `value` property\nonly when the `value` property has not been explicitly set.",
					"type": "string",
					"attributeName": "value",
					"propertyName": "initialValue"
				},
				{
					"name": "label",
					"description": "The label for the form element.",
					"type": "string",
					"attributeName": "label"
				},
				{
					"name": "max",
					"description": "The latest accepted date-time.",
					"type": "string",
					"attributeName": "max",
					"propertyName": "max"
				},
				{
					"name": "maxDate",
					"description": "The latest accepted time date of the date-time.",
					"type": "string",
					"attributeName": "max-date",
					"propertyName": "maxDate"
				},
				{
					"name": "maxTime",
					"description": "The latest accepted time part of the date-time.",
					"type": "string",
					"attributeName": "max-time",
					"propertyName": "maxTime"
				},
				{
					"name": "min",
					"description": "The earliest accepted date-time.",
					"type": "string",
					"attributeName": "min",
					"propertyName": "min"
				},
				{
					"name": "minDate",
					"description": "The earliest accepted date part of the date-time.",
					"type": "string",
					"attributeName": "min-date",
					"propertyName": "minDate"
				},
				{
					"name": "minTime",
					"description": "The earliest accepted time part of the date-time.",
					"type": "string",
					"attributeName": "min-time",
					"propertyName": "minTime"
				},
				{
					"name": "minutesStep",
					"description": "Distance between presented minute options.",
					"type": "number",
					"attributeName": "minutes-step",
					"propertyName": "minutesStep"
				},
				{
					"name": "name",
					"description": "The name of the element. This element's value will be surfaced during form submission under the provided name.",
					"type": "string",
					"attributeName": "name",
					"propertyName": "name"
				},
				{
					"name": "readonly",
					"description": "Whether the date-picker is readonly.",
					"type": "boolean",
					"attributeName": "readonly",
					"propertyName": "readOnly"
				},
				{
					"name": "required",
					"description": "Require the field to be completed prior to form submission.",
					"type": "boolean",
					"attributeName": "required",
					"propertyName": "required"
				},
				{
					"name": "secondsStep",
					"description": "Distance between presented seconds options. If null, seconds are not presented.",
					"type": "number",
					"attributeName": "seconds-step",
					"propertyName": "secondsStep"
				},
				{
					"name": "value",
					"description": "The current value of the element.",
					"type": "string",
					"attributeName": "current-value",
					"propertyName": "value"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "change",
					"description": "Emitted when the date is changed by the user.",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Emitted when the date is changed by the user.",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [
				{
					"name": "modelValue",
					"propName": "value",
					"eventNames": ["input"],
					"valueMapping": "event.currentTarget.value"
				}
			],
			"methods": [
				{
					"name": "checkValidity",
					"description": "Return the current validity of the element.",
					"args": [],
					"returnType": "boolean"
				},
				{
					"name": "reportValidity",
					"description": "Return the current validity of the element.\nIf false, fires an invalid event at the element.",
					"args": [],
					"returnType": "boolean"
				}
			],
			"slots": [
				{
					"name": "helper-text",
					"description": "Describes how to use the date-picker. Alternative to the `helper-text` attribute."
				}
			]
		},
		{
			"name": "dial-pad",
			"className": "DialPad",
			"vividModulePath": "libs/components/src/lib/dial-pad/dial-pad.ts",
			"registerFunctionName": "registerDialPad",
			"description": "Base class for dial-pad",
			"props": [
				{
					"name": "autofocus",
					"description": "Indicates that this element should get focus after the page finishes loading.",
					"type": "boolean",
					"attributeName": "autofocus",
					"propertyName": "autofocus"
				},
				{
					"name": "callActive",
					"description": "Indicates the active state of the dial-pad.",
					"type": "boolean",
					"attributeName": "call-active",
					"propertyName": "callActive"
				},
				{
					"name": "callButtonLabel",
					"type": "string",
					"attributeName": "call-button-label",
					"propertyName": "callButtonLabel"
				},
				{
					"name": "disabled",
					"description": "Indicates the disabled state of the dial-pad.",
					"type": "boolean",
					"attributeName": "disabled",
					"propertyName": "disabled"
				},
				{
					"name": "endCallButtonLabel",
					"type": "string",
					"attributeName": "end-call-button-label",
					"propertyName": "endCallButtonLabel"
				},
				{
					"name": "helperText",
					"description": "Indicates the helper-text's text.",
					"type": "string",
					"attributeName": "helper-text",
					"propertyName": "helperText"
				},
				{
					"name": "noCall",
					"description": "Indicates the no-call state of the dial-pad.",
					"type": "boolean",
					"attributeName": "no-call",
					"propertyName": "noCall"
				},
				{
					"name": "noInput",
					"description": "Indicates the no-input state of the dial-pad.",
					"type": "boolean",
					"attributeName": "no-input",
					"propertyName": "noInput"
				},
				{
					"name": "pattern",
					"description": "Indicates the dial pad's pattern.",
					"type": "string",
					"attributeName": "pattern",
					"propertyName": "pattern"
				},
				{
					"name": "pending",
					"description": "Indicates the pending state of the dial-pad.",
					"type": "boolean",
					"attributeName": "pending",
					"propertyName": "pending"
				},
				{
					"name": "placeholder",
					"description": "Indicates the placeholder's text.",
					"type": "string",
					"attributeName": "placeholder",
					"propertyName": "placeholder"
				},
				{
					"name": "value",
					"description": "Indicates the value's text.",
					"type": "string",
					"attributeName": "value",
					"propertyName": "value"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Emitted when the text field loses focus",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "change",
					"description": "Emitted when the text field value changes",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "dial",
					"description": "Emitted when the call button is clicked",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "end-call",
					"description": "Emitted when the end call button is clicked",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "focus",
					"description": "Emitted when the text field receives focus",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "input",
					"description": "Emitted when the text field value changes",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keypad-click",
					"description": "Emitted when a digit button is clicked",
					"type": "CustomEvent<HTMLElement>"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [
				{
					"name": "modelValue",
					"propName": "value",
					"eventNames": ["input"],
					"valueMapping": "event.currentTarget.value"
				}
			],
			"methods": [
				{
					"name": "focus",
					"description": "Moves focus into the diapl-pad.",
					"args": [],
					"returnType": "void"
				},
				{
					"name": "valueChanged",
					"args": [
						{ "name": "_oldValue", "type": "string" },
						{ "name": "newValue", "type": "string" }
					],
					"returnType": "unknown"
				}
			],
			"slots": []
		},
		{
			"name": "dialog",
			"className": "Dialog",
			"vividModulePath": "libs/components/src/lib/dialog/dialog.ts",
			"registerFunctionName": "registerDialog",
			"description": "",
			"props": [
				{
					"name": "dismissButtonAriaLabel",
					"type": "string",
					"attributeName": "dismiss-button-aria-label",
					"propertyName": "dismissButtonAriaLabel"
				},
				{
					"name": "fullWidthBody",
					"type": "boolean",
					"attributeName": "full-width-body",
					"propertyName": "fullWidthBody"
				},
				{
					"name": "headline",
					"type": "string",
					"attributeName": "headline",
					"propertyName": "headline"
				},
				{
					"name": "icon",
					"description": "undefined\nSee the Vivid Icon Gallery for available icons: https://icons.vivid.vonage.com/",
					"type": "IconId",
					"attributeName": "icon",
					"propertyName": "icon"
				},
				{
					"name": "iconPlacement",
					"type": "'top' | 'side'",
					"attributeName": "icon-placement",
					"propertyName": "iconPlacement"
				},
				{
					"name": "modal",
					"description": "Controls whether the dialog is modal.",
					"type": "boolean",
					"attributeName": "modal",
					"propertyName": "modal"
				},
				{
					"name": "noDismissButton",
					"description": "Hides the dismiss button.",
					"type": "boolean",
					"attributeName": "no-dismiss-button",
					"propertyName": "noDismissButton"
				},
				{
					"name": "noDismissOnEsc",
					"description": "Prevents the dialog from being dismissed when the escape key is pressed.",
					"type": "boolean",
					"attributeName": "no-dismiss-on-esc",
					"propertyName": "noDismissOnEsc"
				},
				{
					"name": "noLightDismiss",
					"description": "Prevents the dialog from being dismissed when clicking outside it.",
					"type": "boolean",
					"attributeName": "no-light-dismiss",
					"propertyName": "noLightDismiss"
				},
				{
					"name": "nonDismissible",
					"description": "Disables all means of dismissal for the dialog.",
					"type": "boolean",
					"attributeName": "non-dismissible",
					"propertyName": "nonDismissible"
				},
				{
					"name": "open",
					"description": "Indicates dialog's state",
					"type": "boolean",
					"attributeName": "open",
					"propertyName": "open"
				},
				{
					"name": "subtitle",
					"type": "string",
					"attributeName": "subtitle",
					"propertyName": "subtitle"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "cancel",
					"description": "The `cancel` event fires when the user requests to close the dialog. You can prevent the dialog from closing by calling `.preventDefault()` on the event.",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "close",
					"description": "The `close` event fires when the dialog closes (either via user interaction or via the API). It returns the return value inside the event's details property.",
					"type": "CustomEvent<string>"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				},
				{
					"name": "open",
					"description": "The `open` event fires when the dialog opens.",
					"type": "CustomEvent<undefined>"
				}
			],
			"vueModels": [
				{
					"name": "open",
					"propName": "open",
					"eventNames": ["open", "close"],
					"valueMapping": "event.currentTarget.open"
				}
			],
			"methods": [
				{ "name": "close", "args": [], "returnType": "unknown" },
				{ "name": "show", "args": [], "returnType": "unknown" },
				{ "name": "showModal", "args": [], "returnType": "unknown" }
			],
			"slots": [
				{
					"name": "action-items",
					"description": "Use the action-items slot in order to add action buttons to the bottom of the dialog."
				},
				{
					"name": "body",
					"description": "Use the body slot in order to add custom HTML to the dialog."
				},
				{
					"name": "footer",
					"description": "Use the footer slot in order to add action buttons to the bottom of the dialog."
				},
				{
					"name": "graphic",
					"description": "Use the graphic slot in order to replace the icon."
				},
				{
					"name": "main",
					"description": "Assign nodes to the main slot to fully override a dialog’s predefined flow and style with your own."
				}
			]
		},
		{
			"name": "divider",
			"className": "Divider",
			"vividModulePath": "libs/components/src/lib/divider/divider.ts",
			"registerFunctionName": "registerDivider",
			"description": "",
			"props": [
				{
					"name": "orientation",
					"description": "The orientation of the divider.",
					"type": "'horizontal' | 'vertical'",
					"attributeName": "orientation",
					"propertyName": "orientation"
				},
				{
					"name": "role",
					"description": "The role of the element. This property will be removed",
					"type": "'separator' | 'presentation'",
					"attributeName": "role",
					"propertyName": "role"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [],
			"methods": [],
			"slots": []
		},
		{
			"name": "empty-state",
			"className": "EmptyState",
			"vividModulePath": "libs/components/src/lib/empty-state/empty-state.ts",
			"registerFunctionName": "registerEmptyState",
			"description": "An empty state element. Used when there is no data to display to the user.",
			"props": [
				{
					"name": "connotation",
					"description": "The connotation the empty state should have.",
					"type": "'accent' | 'cta' | 'success' | 'alert' | 'warning' | 'information'",
					"attributeName": "connotation",
					"propertyName": "connotation"
				},
				{
					"name": "headline",
					"description": "An optional headline for the empty state.",
					"type": "string",
					"attributeName": "headline",
					"propertyName": "headline"
				},
				{
					"name": "icon",
					"description": "Icon for the empty state.\nSee the Vivid Icon Gallery for available icons: https://icons.vivid.vonage.com/",
					"type": "IconId",
					"attributeName": "icon",
					"propertyName": "icon"
				},
				{
					"name": "iconDecoration",
					"type": "'outlined' | 'filled'",
					"attributeName": "icon-decoration",
					"propertyName": "iconDecoration"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [],
			"methods": [],
			"slots": [
				{
					"name": "action-items",
					"description": "Slot to add action items to the empty state"
				},
				{
					"name": "default",
					"description": "The default slot controls the body text of the empty state"
				},
				{
					"name": "graphic",
					"description": "The graphic slot allows overriding the icon with a custom illustration"
				}
			]
		},
		{
			"name": "fab",
			"className": "Fab",
			"vividModulePath": "libs/components/src/lib/fab/fab.ts",
			"registerFunctionName": "registerFab",
			"description": "",
			"props": [
				{
					"name": "autofocus",
					"description": "Determines if the element should receive document focus on page load.",
					"type": "boolean",
					"attributeName": "autofocus",
					"propertyName": "autofocus"
				},
				{
					"name": "connotation",
					"description": "The connotation the fab should have.",
					"type": "'cta' | 'accent' | 'announcement'",
					"attributeName": "connotation",
					"propertyName": "connotation"
				},
				{
					"name": "disabled",
					"description": "Sets the element's disabled state. A disabled element will not be included during form submission.",
					"type": "boolean",
					"attributeName": "disabled",
					"propertyName": "disabled"
				},
				{
					"name": "form",
					"description": "The id of a form to associate the element to.",
					"type": "string",
					"attributeName": "form",
					"propertyName": "formId"
				},
				{
					"name": "formaction",
					"description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element for more details.",
					"type": "string",
					"attributeName": "formaction",
					"propertyName": "formaction"
				},
				{
					"name": "formenctype",
					"description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element for more details.",
					"type": "string",
					"attributeName": "formenctype",
					"propertyName": "formenctype"
				},
				{
					"name": "formmethod",
					"description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element for more details.",
					"type": "string",
					"attributeName": "formmethod",
					"propertyName": "formmethod"
				},
				{
					"name": "formnovalidate",
					"description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element for more details.",
					"type": "boolean",
					"attributeName": "formnovalidate",
					"propertyName": "formnovalidate"
				},
				{
					"name": "formtarget",
					"description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element for more details.",
					"type": "'_self' | '_blank' | '_parent' | '_top'",
					"attributeName": "formtarget",
					"propertyName": "formtarget"
				},
				{
					"name": "icon",
					"description": "A decorative icon the custom element should have.\nSee the Vivid Icon Gallery for available icons: https://icons.vivid.vonage.com/",
					"type": "IconId",
					"attributeName": "icon",
					"propertyName": "icon"
				},
				{
					"name": "iconTrailing",
					"description": "Indicates the icon affix alignment.",
					"type": "boolean",
					"attributeName": "icon-trailing",
					"propertyName": "iconTrailing"
				},
				{
					"name": "initialValue",
					"description": "The default value of the element. This value sets the `value` property\nonly when the `value` property has not been explicitly set.",
					"type": "string",
					"attributeName": "value",
					"propertyName": "initialValue"
				},
				{
					"name": "label",
					"description": "Indicates the fab's label.",
					"type": "string",
					"attributeName": "label",
					"propertyName": "label"
				},
				{
					"name": "name",
					"description": "The name of the element. This element's value will be surfaced during form submission under the provided name.",
					"type": "string",
					"attributeName": "name",
					"propertyName": "name"
				},
				{
					"name": "required",
					"description": "Require the field to be completed prior to form submission.",
					"type": "boolean",
					"attributeName": "required",
					"propertyName": "required"
				},
				{
					"name": "size",
					"description": "The size the FAB should have.",
					"type": "'condensed' | 'normal' | 'expanded'",
					"attributeName": "size",
					"propertyName": "size"
				},
				{
					"name": "type",
					"description": "The button type.",
					"type": "'submit' | 'reset' | 'button'",
					"attributeName": "type",
					"propertyName": "type"
				},
				{
					"name": "value",
					"description": "The current value of the element.",
					"type": "string",
					"attributeName": "current-value",
					"propertyName": "value"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [],
			"methods": [
				{
					"name": "checkValidity",
					"description": "Return the current validity of the element.",
					"args": [],
					"returnType": "boolean"
				},
				{
					"name": "reportValidity",
					"description": "Return the current validity of the element.\nIf false, fires an invalid event at the element.",
					"args": [],
					"returnType": "boolean"
				},
				{
					"name": "validate",
					"description": "{@inheritDoc (FormAssociated:interface).validate}",
					"args": [],
					"returnType": "void"
				}
			],
			"slots": [
				{
					"name": "icon",
					"description": "The preferred way to add an icon to the component."
				}
			]
		},
		{
			"name": "file-picker",
			"className": "FilePicker",
			"vividModulePath": "libs/components/src/lib/file-picker/file-picker.ts",
			"registerFunctionName": "registerFilePicker",
			"description": "",
			"props": [
				{
					"name": "accept",
					"description": "List of accepted files types",
					"type": "string",
					"attributeName": "accept",
					"propertyName": "accept"
				},
				{
					"name": "disabled",
					"description": "Sets the element's disabled state. A disabled element will not be included during form submission.",
					"type": "boolean",
					"attributeName": "disabled",
					"propertyName": "disabled"
				},
				{
					"name": "errorText",
					"description": "The error text for the form element.",
					"type": "string",
					"attributeName": "error-text"
				},
				{
					"name": "fileTooBigError",
					"description": "Overrides the localized error message for file too big",
					"type": "string",
					"attributeName": "file-too-big-error",
					"propertyName": "fileTooBigError"
				},
				{
					"name": "helperText",
					"description": "Provides additional information to help the user enter the correct information.\nTo add HTML to the helper text, use the helper-text slot instead.",
					"type": "string",
					"attributeName": "helper-text",
					"propertyName": "helperText"
				},
				{
					"name": "initialValue",
					"description": "The default value of the element. This value sets the `value` property\nonly when the `value` property has not been explicitly set.",
					"type": "string",
					"attributeName": "value",
					"propertyName": "initialValue"
				},
				{
					"name": "invalidFileTypeError",
					"description": "Overrides the localized error message for invalid file type",
					"type": "string",
					"attributeName": "invalid-file-type-error",
					"propertyName": "invalidFileTypeError"
				},
				{
					"name": "label",
					"description": "The label for the form element.",
					"type": "string",
					"attributeName": "label"
				},
				{
					"name": "maxFileSize",
					"description": "The max file size that can be selected.",
					"type": "number",
					"attributeName": "max-file-size",
					"propertyName": "maxFileSize"
				},
				{
					"name": "maxFiles",
					"description": "The max files that can be selected.",
					"type": "number",
					"attributeName": "max-files",
					"propertyName": "maxFiles"
				},
				{
					"name": "maxFilesExceededError",
					"description": "Overrides the localized error message for max file exceed",
					"type": "string",
					"attributeName": "max-files-exceeded-error",
					"propertyName": "maxFilesExceededError"
				},
				{
					"name": "name",
					"description": "The name of the element. This element's value will be surfaced during form submission under the provided name.",
					"type": "string",
					"attributeName": "name",
					"propertyName": "name"
				},
				{
					"name": "required",
					"description": "Require the field to be completed prior to form submission.",
					"type": "boolean",
					"attributeName": "required",
					"propertyName": "required"
				},
				{
					"name": "singleFile",
					"description": "Single file state.",
					"type": "boolean",
					"attributeName": "single-file",
					"propertyName": "singleFile"
				},
				{
					"name": "size",
					"description": "The size the file-uploader should have.",
					"type": "'normal' | 'expanded'",
					"attributeName": "size",
					"propertyName": "size"
				},
				{
					"name": "value",
					"description": "The current value of the element.",
					"type": "string",
					"attributeName": "current-value",
					"propertyName": "value"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "change",
					"description": "Emitted when a file is added or removed.",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [],
			"methods": [
				{
					"name": "acceptChanged",
					"args": [
						{ "name": "_oldValue", "type": "string" },
						{ "name": "newValue", "type": "string" }
					],
					"returnType": "void"
				},
				{
					"name": "checkValidity",
					"description": "Return the current validity of the element.",
					"args": [],
					"returnType": "boolean"
				},
				{
					"name": "fileTooBigErrorChanged",
					"args": [
						{ "name": "_oldValue", "type": "string" },
						{ "name": "newValue", "type": "string" }
					],
					"returnType": "void"
				},
				{ "name": "formResetCallback", "args": [], "returnType": "void" },
				{
					"name": "invalidFileTypeErrorChanged",
					"args": [
						{ "name": "_oldValue", "type": "string" },
						{ "name": "newValue", "type": "string" }
					],
					"returnType": "void"
				},
				{
					"name": "maxFileSizeChanged",
					"args": [
						{ "name": "_oldValue", "type": "number" },
						{ "name": "newValue", "type": "number" }
					],
					"returnType": "void"
				},
				{
					"name": "maxFilesChanged",
					"args": [
						{ "name": "_oldValue", "type": "number" },
						{ "name": "newValue", "type": "number" }
					],
					"returnType": "void"
				},
				{
					"name": "maxFilesExceededErrorChanged",
					"args": [
						{ "name": "_oldValue", "type": "string" },
						{ "name": "newValue", "type": "string" }
					],
					"returnType": "void"
				},
				{
					"name": "nameChanged",
					"args": [
						{ "name": "previous", "type": "string" },
						{ "name": "next", "type": "string" }
					],
					"returnType": "unknown"
				},
				{
					"name": "removeAllFiles",
					"description": "Removes all files from the File Picker.",
					"args": [],
					"returnType": "unknown"
				},
				{
					"name": "reportValidity",
					"description": "Return the current validity of the element.\nIf false, fires an invalid event at the element.",
					"args": [],
					"returnType": "boolean"
				},
				{ "name": "singleFileChanged", "args": [], "returnType": "unknown" },
				{
					"name": "validate",
					"description": "{@inheritDoc (FormAssociated:interface).validate}",
					"args": [],
					"returnType": "void"
				}
			],
			"slots": [
				{
					"name": "helper-text",
					"description": "Describes how to use the file-picker. Alternative to the `helper-text` attribute."
				}
			]
		},
		{
			"name": "header",
			"className": "Header",
			"vividModulePath": "libs/components/src/lib/header/header.ts",
			"registerFunctionName": "registerHeader",
			"description": "",
			"props": [
				{
					"name": "alternate",
					"description": "applies scheme alternate to header region",
					"type": "boolean",
					"attributeName": "alternate",
					"propertyName": "alternate"
				},
				{
					"name": "elevationShadow",
					"description": "header elevation shadow",
					"type": "boolean",
					"attributeName": "elevation-shadow",
					"propertyName": "elevationShadow"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [],
			"methods": [],
			"slots": [
				{
					"name": "action-items",
					"description": "Nodes assigned to action-items slot will be set at the end of the header."
				},
				{
					"name": "app-content",
					"description": "Content vertically aligned with header."
				},
				{ "name": "default", "description": "Default slot." }
			]
		},
		{
			"name": "icon",
			"className": "Icon",
			"vividModulePath": "libs/components/src/lib/icon/icon.ts",
			"registerFunctionName": "registerIcon",
			"description": "",
			"props": [
				{
					"name": "connotation",
					"description": "The connotation the icon should have.",
					"type": "'accent' | 'cta' | 'success' | 'alert' | 'warning' | 'information' | 'announcement'",
					"attributeName": "connotation",
					"propertyName": "connotation"
				},
				{
					"name": "label",
					"description": "Provides a (screen reader only) descriptive label for the icon.",
					"type": "string",
					"attributeName": "label",
					"propertyName": "label"
				},
				{
					"name": "name",
					"description": "Indicates which icon to resolve.\nSee the Vivid Icon Gallery for available icons: https://icons.vivid.vonage.com/",
					"type": "IconId",
					"attributeName": "name",
					"propertyName": "name"
				},
				{
					"name": "size",
					"type": "-6 | -5 | -4 | -3 | -2 | -1 | 0 | 1 | 2 | 3 | 4 | 5",
					"attributeName": "size",
					"propertyName": "size"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [],
			"methods": [
				{ "name": "nameChanged", "args": [], "returnType": "unknown" }
			],
			"slots": [{ "name": "default", "description": "Default slot." }]
		},
		{
			"name": "layout",
			"className": "Layout",
			"vividModulePath": "libs/components/src/lib/layout/layout.ts",
			"registerFunctionName": "registerLayout",
			"description": "[--layout-grid-template-columns=repeat([the `auto-sizing` mapped value],\nminmax([the `column-basis` mapped value], 1fr))] - Controls the `grid-template-columns` of the layout.",
			"props": [
				{
					"name": "autoSizing",
					"description": "sets the initial preferred auto-sizing from predefined available options",
					"type": "'fit' | 'fill'",
					"attributeName": "auto-sizing",
					"propertyName": "autoSizing"
				},
				{
					"name": "columnBasis",
					"description": "sets the initial preferred measure of a column from predefined available options",
					"type": "'small' | 'medium' | 'large' | 'block'",
					"attributeName": "column-basis",
					"propertyName": "columnBasis"
				},
				{
					"name": "columnSpacing",
					"description": "sets the initial preferred spacing of a column from predefined available options",
					"type": "'small' | 'medium' | 'large'",
					"attributeName": "column-spacing",
					"propertyName": "columnSpacing"
				},
				{
					"name": "gutters",
					"description": "sets the initial preferred margin from predefined available options",
					"type": "'small' | 'medium' | 'large'",
					"attributeName": "gutters",
					"propertyName": "gutters"
				},
				{
					"name": "rowSpacing",
					"description": "sets the initial preferred spacing of a row from predefined available options",
					"type": "'small' | 'medium' | 'large'",
					"attributeName": "row-spacing",
					"propertyName": "rowSpacing"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [],
			"methods": [],
			"slots": [{ "name": "default", "description": "Default slot." }]
		},
		{
			"name": "menu",
			"className": "Menu",
			"vividModulePath": "libs/components/src/lib/menu/menu.ts",
			"registerFunctionName": "registerMenu",
			"description": "",
			"props": [
				{
					"name": "anchor",
					"description": "ID or direct reference to the component's anchor element.",
					"type": "string | HTMLElement",
					"attributeName": "anchor",
					"propertyName": "anchor"
				},
				{
					"name": "autoDismiss",
					"description": "indicates whether the menu will automatically close when focus moves away from it.",
					"type": "boolean",
					"attributeName": "auto-dismiss",
					"propertyName": "autoDismiss"
				},
				{
					"name": "open",
					"description": "indicates whether the menu is open",
					"type": "boolean",
					"attributeName": "open",
					"propertyName": "open"
				},
				{
					"name": "placement",
					"description": "placement of the menu",
					"type": "'top' | 'right' | 'bottom' | 'left' | 'top-start' | 'top-end' | 'right-start' | 'right-end' | 'bottom-start' | 'bottom-end' | 'left-start' | 'left-end'",
					"attributeName": "placement",
					"propertyName": "placement"
				},
				{
					"name": "positionStrategy",
					"description": "The strategy-absolute attribute.",
					"type": "'absolute' | 'fixed'",
					"attributeName": "position-strategy",
					"propertyName": "positionStrategy"
				},
				{
					"name": "trigger",
					"description": "Controls how the menu opens and closes itself.",
					"type": "'auto' | 'legacy' | 'off'",
					"attributeName": "trigger",
					"propertyName": "trigger"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "close",
					"description": "Fired when the menu is closed",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				},
				{
					"name": "open",
					"description": "Fired when the menu is opened",
					"type": "CustomEvent<undefined>"
				}
			],
			"vueModels": [],
			"methods": [
				{
					"name": "collapseExpandedItem",
					"description": "Collapses any expanded Menu Items.",
					"args": [],
					"returnType": "void"
				},
				{
					"name": "focus",
					"description": "Moves focus into the menu. If there is a child with the `autofocus` attribute, it will be focused.\nOtherwise, the first focusable child will be focused.",
					"args": [],
					"returnType": "void"
				},
				{
					"name": "openChanged",
					"args": [
						{ "name": "_", "type": "boolean" },
						{ "name": "newValue", "type": "boolean" }
					],
					"returnType": "void"
				}
			],
			"slots": [
				{
					"name": "action-items",
					"description": "Used to add action items to the bottom of the menu."
				},
				{
					"name": "anchor",
					"description": "Used to set the anchor element for the menu."
				},
				{ "name": "default", "description": "Default slot." },
				{
					"name": "header",
					"description": "Used to add additional content to the top of the menu."
				}
			]
		},
		{
			"name": "menu-item",
			"className": "MenuItem",
			"vividModulePath": "libs/components/src/lib/menu-item/menu-item.ts",
			"registerFunctionName": "registerMenuItem",
			"description": "",
			"props": [
				{
					"name": "checkAppearance",
					"description": "Controls the appearance of the check indicator.",
					"type": "'normal' | 'tick-only'",
					"attributeName": "check-appearance",
					"propertyName": "checkedAppearance"
				},
				{
					"name": "checkTrailing",
					"description": "Controls the placement of the menu item's checkmark or radio icon.",
					"type": "boolean",
					"attributeName": "check-trailing",
					"propertyName": "checkTrailing"
				},
				{
					"name": "checked",
					"description": "The checked value of the element.",
					"type": "boolean",
					"attributeName": "checked",
					"propertyName": "checked"
				},
				{
					"name": "connotation",
					"description": "The connotation the fab should have.",
					"type": "'cta' | 'accent'",
					"attributeName": "connotation",
					"propertyName": "connotation"
				},
				{
					"name": "disabled",
					"description": "The disabled state of the element.",
					"type": "boolean",
					"attributeName": "disabled",
					"propertyName": "disabled"
				},
				{
					"name": "expanded",
					"description": "The expanded state of the element.",
					"type": "boolean",
					"attributeName": "expanded",
					"propertyName": "expanded"
				},
				{
					"name": "icon",
					"description": "A decorative icon the custom element should have.\nSee the Vivid Icon Gallery for available icons: https://icons.vivid.vonage.com/",
					"type": "IconId",
					"attributeName": "icon",
					"propertyName": "icon"
				},
				{
					"name": "role",
					"description": "The role of the element.",
					"type": "'menuitem' | 'menuitemcheckbox' | 'checkbox' | 'menuitemradio' | 'radio' | 'presentation'",
					"attributeName": "role",
					"propertyName": "role"
				},
				{
					"name": "text",
					"description": "Indicates the menu item's text.",
					"type": "string",
					"attributeName": "text",
					"propertyName": "text"
				},
				{
					"name": "textSecondary",
					"description": "Indicates the menu item's secondary text.",
					"type": "string",
					"attributeName": "text-secondary",
					"propertyName": "textSecondary"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "change",
					"description": "Fires a custom 'change' event when a non-submenu item with a role of `menuitemcheckbox`, `checkbox`, `menuitemradio`, `radio`, or `menuitem` is invoked",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "expanded-change",
					"description": "Fires a custom 'expanded-change' event when the expanded state changes",
					"type": "CustomEvent<HTMLElement>"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [
				{
					"name": "modelValue",
					"propName": "checked",
					"eventNames": ["change"],
					"valueMapping": "event.currentTarget.checked"
				}
			],
			"methods": [],
			"slots": [
				{
					"name": "meta",
					"description": "Assign nodes to the `meta` slot to set a badge or an additional icon."
				},
				{
					"name": "submenu",
					"description": "Assign a Menu to the `submenu` slot to add a submenu."
				},
				{
					"name": "trailing-meta",
					"description": "Assign nodes to the `meta` slot to set a badge or an additional icon."
				}
			]
		},
		{
			"name": "nav",
			"className": "Nav",
			"vividModulePath": "libs/components/src/lib/nav/nav.ts",
			"registerFunctionName": "registerNav",
			"description": "",
			"props": [],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [],
			"methods": [],
			"slots": [{ "name": "default", "description": "Default slot." }]
		},
		{
			"name": "nav-disclosure",
			"className": "NavDisclosure",
			"vividModulePath": "libs/components/src/lib/nav-disclosure/nav-disclosure.ts",
			"registerFunctionName": "registerNavDisclosure",
			"description": "",
			"props": [
				{
					"name": "appearance",
					"description": "The appearance nav-disclosure should have.",
					"type": "'ghost' | 'ghost-light'",
					"attributeName": "appearance",
					"propertyName": "appearance"
				},
				{
					"name": "connotation",
					"description": "The connotation nav-disclosure should have.",
					"type": "'accent' | 'cta'",
					"attributeName": "connotation",
					"propertyName": "connotation"
				},
				{
					"name": "icon",
					"description": "A decorative icon the custom element should have.\nSee the Vivid Icon Gallery for available icons: https://icons.vivid.vonage.com/",
					"type": "IconId",
					"attributeName": "icon",
					"propertyName": "icon"
				},
				{
					"name": "label",
					"type": "string",
					"attributeName": "label",
					"propertyName": "label"
				},
				{
					"name": "open",
					"description": "Indicates whether the nav-disclosure is open",
					"type": "boolean",
					"attributeName": "open",
					"propertyName": "open"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				},
				{
					"name": "toggle",
					"description": "Event emitted when the nav disclosure is toggled.",
					"type": "CustomEvent<undefined>"
				}
			],
			"vueModels": [],
			"methods": [],
			"slots": [
				{ "name": "default", "description": "Default slot." },
				{
					"name": "icon",
					"description": "The preferred way to add an icon to the component."
				},
				{
					"name": "meta",
					"description": "A slot to add additional content to the nav disclosure."
				}
			]
		},
		{
			"name": "nav-item",
			"className": "NavItem",
			"vividModulePath": "libs/components/src/lib/nav-item/nav-item.ts",
			"registerFunctionName": "registerNavItem",
			"description": "A Nav Item Custom HTML Element.\nBased largely on the https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element .",
			"props": [
				{
					"name": "appearance",
					"description": "Sets the nav item's appearance",
					"type": "'ghost' | 'ghost-light'",
					"attributeName": "appearance",
					"propertyName": "appearance"
				},
				{
					"name": "connotation",
					"description": "Sets the connotation color of the selected nav item",
					"type": "'accent' | 'cta'",
					"attributeName": "connotation",
					"propertyName": "connotation"
				},
				{
					"name": "download",
					"description": "Prompts the user to save the linked URL. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
					"type": "string",
					"attributeName": "download",
					"propertyName": "download"
				},
				{
					"name": "href",
					"description": "The URL the hyperlink references. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
					"type": "string",
					"attributeName": "href",
					"propertyName": "href"
				},
				{
					"name": "hreflang",
					"description": "Hints at the language of the referenced resource. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
					"type": "string",
					"attributeName": "hreflang",
					"propertyName": "hreflang"
				},
				{
					"name": "icon",
					"description": "A decorative icon the custom element should have.\nSee the Vivid Icon Gallery for available icons: https://icons.vivid.vonage.com/",
					"type": "IconId",
					"attributeName": "icon",
					"propertyName": "icon"
				},
				{
					"name": "ping",
					"description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
					"type": "string",
					"attributeName": "ping",
					"propertyName": "ping"
				},
				{
					"name": "referrerpolicy",
					"description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
					"type": "string",
					"attributeName": "referrerpolicy",
					"propertyName": "referrerpolicy"
				},
				{
					"name": "rel",
					"description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
					"type": "string",
					"attributeName": "rel",
					"propertyName": "rel"
				},
				{
					"name": "target",
					"description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
					"type": "'_self' | '_blank' | '_parent' | '_top'",
					"attributeName": "target",
					"propertyName": "target"
				},
				{
					"name": "text",
					"description": "Text of the nav item",
					"type": "string",
					"attributeName": "text",
					"propertyName": "text"
				},
				{
					"name": "type",
					"description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
					"type": "string",
					"attributeName": "type",
					"propertyName": "type"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [],
			"methods": [],
			"slots": [
				{
					"name": "icon",
					"description": "The preferred way to add an icon to the component."
				},
				{
					"name": "meta",
					"description": "A slot to add additional content to the nav item."
				}
			]
		},
		{
			"name": "note",
			"className": "Note",
			"vividModulePath": "libs/components/src/lib/note/note.ts",
			"registerFunctionName": "registerNote",
			"description": "",
			"props": [
				{
					"name": "connotation",
					"type": "'accent' | 'information' | 'success' | 'warning' | 'announcement' | 'alert'",
					"attributeName": "connotation",
					"propertyName": "connotation"
				},
				{
					"name": "headline",
					"description": "Indicates the note's headline text",
					"type": "string",
					"attributeName": "headline",
					"propertyName": "headline"
				},
				{
					"name": "icon",
					"description": "A decorative icon the custom element should have.\nSee the Vivid Icon Gallery for available icons: https://icons.vivid.vonage.com/",
					"type": "IconId",
					"attributeName": "icon",
					"propertyName": "icon"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [],
			"methods": [],
			"slots": [
				{
					"name": "default",
					"description": "Any slotted content will appear below the headline."
				},
				{
					"name": "icon",
					"description": "The preferred way to add an icon to the component."
				}
			]
		},
		{
			"name": "number-field",
			"className": "NumberField",
			"vividModulePath": "libs/components/src/lib/number-field/number-field.ts",
			"registerFunctionName": "registerNumberField",
			"description": "",
			"props": [
				{
					"name": "appearance",
					"type": "'fieldset' | 'ghost'",
					"attributeName": "appearance",
					"propertyName": "appearance"
				},
				{
					"name": "autoComplete",
					"type": "string",
					"attributeName": "autoComplete",
					"propertyName": "autoComplete"
				},
				{
					"name": "autofocus",
					"description": "Indicates that this element should get focus after the page finishes loading. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefautofocus | autofocus HTML attribute for more information.",
					"type": "boolean",
					"attributeName": "autofocus",
					"propertyName": "autofocus"
				},
				{
					"name": "decrementButtonAriaLabel",
					"type": "string",
					"attributeName": "decrement-button-aria-label",
					"propertyName": "decrementButtonAriaLabel"
				},
				{
					"name": "disabled",
					"description": "Sets the element's disabled state. A disabled element will not be included during form submission.",
					"type": "boolean",
					"attributeName": "disabled",
					"propertyName": "disabled"
				},
				{
					"name": "errorText",
					"description": "The error text for the form element.",
					"type": "string",
					"attributeName": "error-text"
				},
				{
					"name": "helperText",
					"description": "Provides additional information to help the user enter the correct information.\nTo add HTML to the helper text, use the helper-text slot instead.",
					"type": "string",
					"attributeName": "helper-text",
					"propertyName": "helperText"
				},
				{
					"name": "icon",
					"description": "A decorative icon the custom element should have.\nSee the Vivid Icon Gallery for available icons: https://icons.vivid.vonage.com/",
					"type": "IconId",
					"attributeName": "icon",
					"propertyName": "icon"
				},
				{
					"name": "incrementButtonAriaLabel",
					"type": "string",
					"attributeName": "increment-button-aria-label",
					"propertyName": "incrementButtonAriaLabel"
				},
				{
					"name": "initialValue",
					"description": "The default value of the element. This value sets the `value` property\nonly when the `value` property has not been explicitly set.",
					"type": "string",
					"attributeName": "value",
					"propertyName": "initialValue"
				},
				{
					"name": "label",
					"description": "The label for the form element.",
					"type": "string",
					"attributeName": "label"
				},
				{
					"name": "list",
					"description": "Allows associating a https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist | datalist to the element by https://developer.mozilla.org/en-US/docs/Web/API/Element/id.",
					"type": "string",
					"attributeName": "list",
					"propertyName": "list"
				},
				{
					"name": "max",
					"description": "The maximum the value can be",
					"type": "number",
					"attributeName": "max",
					"propertyName": "max"
				},
				{
					"name": "maxlength",
					"description": "The maximum number of characters a user can enter.",
					"type": "number",
					"attributeName": "maxlength",
					"propertyName": "maxlength"
				},
				{
					"name": "min",
					"description": "The minimum the value can be",
					"type": "number",
					"attributeName": "min",
					"propertyName": "min"
				},
				{
					"name": "minlength",
					"description": "The minimum number of characters a user can enter.",
					"type": "number",
					"attributeName": "minlength",
					"propertyName": "minlength"
				},
				{
					"name": "name",
					"description": "The name of the element. This element's value will be surfaced during form submission under the provided name.",
					"type": "string",
					"attributeName": "name",
					"propertyName": "name"
				},
				{
					"name": "placeholder",
					"description": "Sets the placeholder value of the element, generally used to provide a hint to the user.",
					"type": "string",
					"attributeName": "placeholder",
					"propertyName": "placeholder"
				},
				{
					"name": "readonly",
					"description": "When true, the control will be immutable by user interaction. See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute for more information.",
					"type": "boolean",
					"attributeName": "readonly",
					"propertyName": "readOnly"
				},
				{
					"name": "required",
					"description": "Require the field to be completed prior to form submission.",
					"type": "boolean",
					"attributeName": "required",
					"propertyName": "required"
				},
				{
					"name": "scale",
					"description": "The size the number-field should have.",
					"type": "'condensed' | 'normal'",
					"attributeName": "scale",
					"propertyName": "scale"
				},
				{
					"name": "shape",
					"type": "'rounded' | 'pill'",
					"attributeName": "shape",
					"propertyName": "shape"
				},
				{
					"name": "size",
					"description": "Sets the width of the element to a specified number of characters.",
					"type": "number",
					"attributeName": "size",
					"propertyName": "size"
				},
				{
					"name": "step",
					"description": "Amount to increment or decrement the value by",
					"type": "number",
					"attributeName": "step",
					"propertyName": "step"
				},
				{
					"name": "successText",
					"description": "The success text for the form element.",
					"type": "string",
					"attributeName": "success-text"
				},
				{
					"name": "value",
					"description": "The current value of the element.",
					"type": "string",
					"attributeName": "current-value",
					"propertyName": "value"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "change",
					"description": "Fires a custom 'change' event when the value has changed",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires a custom 'input' event when the value has changed",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [
				{
					"name": "modelValue",
					"propName": "value",
					"eventNames": ["input"],
					"valueMapping": "event.currentTarget.value"
				}
			],
			"methods": [
				{
					"name": "checkValidity",
					"description": "Return the current validity of the element.",
					"args": [],
					"returnType": "boolean"
				},
				{
					"name": "reportValidity",
					"description": "Return the current validity of the element.\nIf false, fires an invalid event at the element.",
					"args": [],
					"returnType": "boolean"
				},
				{
					"name": "select",
					"description": "Selects all the text in the number field",
					"args": [],
					"returnType": "unknown"
				},
				{
					"name": "stepChanged",
					"args": [
						{ "name": "_", "type": "number" },
						{ "name": "next", "type": "number" }
					],
					"returnType": "unknown"
				},
				{
					"name": "stepDown",
					"description": "Decrements the value using the step value",
					"args": [],
					"returnType": "unknown"
				},
				{
					"name": "stepUp",
					"description": "Increments the value using the step value",
					"args": [],
					"returnType": "unknown"
				},
				{
					"name": "validate",
					"description": "{@inheritDoc (FormAssociated:interface).validate}",
					"args": [],
					"returnType": "unknown"
				}
			],
			"slots": [
				{
					"name": "helper-text",
					"description": "Describes how to use the number-field. Alternative to the `helper-text` attribute."
				}
			]
		},
		{
			"name": "option",
			"className": "ListboxOption",
			"vividModulePath": "libs/components/src/lib/option/option.ts",
			"registerFunctionName": "registerOption",
			"description": "An Option Custom HTML Element.\nImplements https://www.w3.org/TR/wai-aria-1.1/#option | ARIA option .",
			"props": [
				{
					"name": "disabled",
					"description": "The disabled state of the option.",
					"type": "boolean",
					"attributeName": "disabled",
					"propertyName": "disabled"
				},
				{
					"name": "icon",
					"description": "A decorative icon the custom element should have.\nSee the Vivid Icon Gallery for available icons: https://icons.vivid.vonage.com/",
					"type": "IconId",
					"attributeName": "icon",
					"propertyName": "icon"
				},
				{
					"name": "iconTrailing",
					"description": "Indicates the icon affix alignment.",
					"type": "boolean",
					"attributeName": "icon-trailing",
					"propertyName": "iconTrailing"
				},
				{
					"name": "initialValue",
					"description": "The initial value of the option. This value sets the `value` property\nonly when the `value` property has not been explicitly set.",
					"type": "string",
					"attributeName": "value",
					"propertyName": "initialValue"
				},
				{
					"name": "label",
					"type": "string",
					"attributeName": "label",
					"propertyName": "_label"
				},
				{
					"name": "matchedText",
					"description": "Text to highlighted as matching a search query.",
					"type": "string",
					"attributeName": "matched-text",
					"propertyName": "matchedText"
				},
				{
					"name": "selected",
					"description": "The selected attribute value. This sets the initial selected value.",
					"type": "boolean",
					"attributeName": "selected",
					"propertyName": "selectedAttribute"
				},
				{
					"name": "tagConnotation",
					"description": "When displayed as a tag, the connotation of the tag.",
					"type": "'accent' | 'cta'",
					"attributeName": "tag-connotation",
					"propertyName": "tagConnotation"
				},
				{
					"name": "text",
					"type": "string",
					"attributeName": "text",
					"propertyName": "_text"
				},
				{
					"name": "value",
					"description": "Value to be submitted as part of the form data",
					"type": "string",
					"propertyName": "value"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [],
			"methods": [
				{ "name": "initialValueChanged", "args": [], "returnType": "void" }
			],
			"slots": [
				{
					"name": "icon",
					"description": "The preferred way to add an icon to the component."
				}
			]
		},
		{
			"name": "pagination",
			"className": "Pagination",
			"vividModulePath": "libs/components/src/lib/pagination/pagination.ts",
			"registerFunctionName": "registerPagination",
			"description": "",
			"props": [
				{
					"name": "navIcons",
					"type": "boolean",
					"attributeName": "nav-icons",
					"propertyName": "navIcons"
				},
				{
					"name": "selectedIndex",
					"type": "number",
					"attributeName": "selected-index",
					"propertyName": "selectedIndex"
				},
				{
					"name": "shape",
					"description": "The shape the pagination should have.",
					"type": "'rounded' | 'pill'",
					"attributeName": "shape",
					"propertyName": "shape"
				},
				{
					"name": "size",
					"description": "The size the pagination should have.",
					"type": "'super-condensed' | 'condensed' | 'normal'",
					"attributeName": "size",
					"propertyName": "size"
				},
				{
					"name": "total",
					"type": "number",
					"attributeName": "total",
					"propertyName": "total"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				},
				{
					"name": "pagination-change",
					"description": "Fires when the page changes.",
					"type": "CustomEvent<{selectedIndex: number, total: number, oldIndex: number}>"
				}
			],
			"vueModels": [],
			"methods": [
				{
					"name": "paginationButtonsChanged",
					"args": [
						{ "name": "_", "type": "HTMLButtonElement[] | undefined" },
						{ "name": "newValue", "type": "HTMLButtonElement[]" }
					],
					"returnType": "unknown"
				},
				{
					"name": "selectedIndexChanged",
					"args": [
						{ "name": "oldValue", "type": "number" },
						{ "name": "newValue", "type": "number" }
					],
					"returnType": "unknown"
				},
				{
					"name": "totalChanged",
					"args": [
						{ "name": "_", "type": "number" },
						{ "name": "newValue", "type": "number" }
					],
					"returnType": "unknown"
				}
			],
			"slots": []
		},
		{
			"name": "progress",
			"className": "Progress",
			"vividModulePath": "libs/components/src/lib/progress/progress.ts",
			"registerFunctionName": "registerProgress",
			"description": "",
			"props": [
				{
					"name": "connotation",
					"description": "Indicates the progress' connotation.",
					"type": "'accent' | 'success' | 'alert' | 'cta' | 'pacific'",
					"attributeName": "connotation",
					"propertyName": "connotation"
				},
				{
					"name": "max",
					"description": "The maximum value",
					"type": "number",
					"attributeName": "max",
					"propertyName": "max"
				},
				{
					"name": "min",
					"description": "The minimum value",
					"type": "number",
					"attributeName": "min",
					"propertyName": "min"
				},
				{
					"name": "paused",
					"description": "Indicates the progress is paused",
					"type": "boolean",
					"attributeName": "paused",
					"propertyName": "paused"
				},
				{
					"name": "reverse",
					"description": "Indicates the progress' reverse status.",
					"type": "boolean",
					"attributeName": "reverse",
					"propertyName": "reverse"
				},
				{
					"name": "shape",
					"description": "Indicates the progress' shape.",
					"type": "'rounded' | 'sharp'",
					"attributeName": "shape",
					"propertyName": "shape"
				},
				{
					"name": "value",
					"description": "The value of the progress",
					"type": "number",
					"attributeName": "value",
					"propertyName": "value"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [],
			"methods": [],
			"slots": []
		},
		{
			"name": "progress-ring",
			"className": "ProgressRing",
			"vividModulePath": "libs/components/src/lib/progress-ring/progress-ring.ts",
			"registerFunctionName": "registerProgressRing",
			"description": "",
			"props": [
				{
					"name": "connotation",
					"type": "'accent' | 'success' | 'alert' | 'cta'",
					"attributeName": "connotation",
					"propertyName": "connotation"
				},
				{
					"name": "max",
					"description": "The maximum value",
					"type": "number",
					"attributeName": "max",
					"propertyName": "max"
				},
				{
					"name": "min",
					"description": "The minimum value",
					"type": "number",
					"attributeName": "min",
					"propertyName": "min"
				},
				{
					"name": "paused",
					"description": "Indicates the progress is paused",
					"type": "boolean",
					"attributeName": "paused",
					"propertyName": "paused"
				},
				{
					"name": "size",
					"type": "-6 | -5 | -4 | -3 | -2 | -1 | 0 | 1 | 2 | 3 | 4 | 5",
					"attributeName": "size",
					"propertyName": "size"
				},
				{
					"name": "value",
					"description": "The value of the progress",
					"type": "number",
					"attributeName": "value",
					"propertyName": "value"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [],
			"methods": [],
			"slots": []
		},
		{
			"name": "radio",
			"className": "Radio",
			"vividModulePath": "libs/components/src/lib/radio/radio.ts",
			"registerFunctionName": "registerRadio",
			"description": "",
			"props": [
				{
					"name": "ariaLabel",
					"type": "string",
					"attributeName": "aria-label",
					"propertyName": "ariaLabel"
				},
				{
					"name": "checked",
					"description": "The current checkedness of the element.",
					"type": "boolean",
					"attributeName": "current-checked",
					"propertyName": "checked"
				},
				{
					"name": "connotation",
					"description": "The connotation the radioButton should have.",
					"type": "'accent' | 'cta'",
					"attributeName": "connotation",
					"propertyName": "connotation"
				},
				{
					"name": "defaultChecked",
					"description": "The default checkedness of the element. This value sets the `checked` property\nonly when the `checked` property has not been explicitly set.",
					"type": "boolean",
					"attributeName": "checked",
					"propertyName": "defaultChecked"
				},
				{
					"name": "disabled",
					"description": "Sets the element's disabled state. A disabled element will not be included during form submission.",
					"type": "boolean",
					"attributeName": "disabled",
					"propertyName": "disabled"
				},
				{
					"name": "errorText",
					"description": "The error text for the form element.",
					"type": "string",
					"attributeName": "error-text"
				},
				{
					"name": "initialValue",
					"description": "The default value of the element. This value sets the `value` property\nonly when the `value` property has not been explicitly set.",
					"type": "string",
					"attributeName": "value",
					"propertyName": "initialValue"
				},
				{
					"name": "label",
					"description": "The label for the form element.",
					"type": "string",
					"attributeName": "label"
				},
				{
					"name": "name",
					"description": "The name of the element. This element's value will be surfaced during form submission under the provided name.",
					"type": "string",
					"attributeName": "name",
					"propertyName": "name"
				},
				{
					"name": "readonly",
					"description": "When true, the control will be immutable by user interaction. See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute for more information.",
					"type": "boolean",
					"attributeName": "readonly",
					"propertyName": "readOnly"
				},
				{
					"name": "required",
					"description": "Require the field to be completed prior to form submission.",
					"type": "boolean",
					"attributeName": "required",
					"propertyName": "required"
				},
				{
					"name": "value",
					"description": "The current value of the element.",
					"type": "string",
					"attributeName": "current-value",
					"propertyName": "value"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "change",
					"description": "Fires a custom 'change' event when the value changes",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [],
			"methods": [
				{
					"name": "checkValidity",
					"description": "Return the current validity of the element.",
					"args": [],
					"returnType": "boolean"
				},
				{
					"name": "reportValidity",
					"description": "Return the current validity of the element.\nIf false, fires an invalid event at the element.",
					"args": [],
					"returnType": "boolean"
				}
			],
			"slots": []
		},
		{
			"name": "radio-group",
			"className": "RadioGroup",
			"vividModulePath": "libs/components/src/lib/radio-group/radio-group.ts",
			"registerFunctionName": "registerRadioGroup",
			"description": "",
			"props": [
				{
					"name": "disabled",
					"description": "Disables the radio group and child radios.",
					"type": "boolean",
					"attributeName": "disabled",
					"propertyName": "disabled"
				},
				{
					"name": "errorText",
					"type": "string",
					"attributeName": "error-text",
					"propertyName": "errorText"
				},
				{
					"name": "helperText",
					"description": "Provides additional information to help the user enter the correct information.\nTo add HTML to the helper text, use the helper-text slot instead.",
					"type": "string",
					"attributeName": "helper-text",
					"propertyName": "helperText"
				},
				{
					"name": "label",
					"description": "The label for the radio group",
					"type": "string",
					"attributeName": "label",
					"propertyName": "label"
				},
				{
					"name": "name",
					"description": "The name of the radio group. Setting this value will set the name value\nfor all child radio elements.",
					"type": "string",
					"attributeName": "name",
					"propertyName": "name"
				},
				{
					"name": "orientation",
					"description": "The orientation of the group",
					"type": "'horizontal' | 'vertical' | 'horizontal' | 'vertical'",
					"attributeName": "orientation",
					"propertyName": "orientation"
				},
				{
					"name": "readonly",
					"description": "When true, the child radios will be immutable by user interaction. See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute for more information.",
					"type": "boolean",
					"attributeName": "readonly",
					"propertyName": "readOnly"
				},
				{
					"name": "required",
					"description": "When true, the radio group and all its radio buttons will be required",
					"type": "boolean",
					"attributeName": "required",
					"propertyName": "required"
				},
				{
					"name": "value",
					"description": "The value of the checked radio",
					"type": "string",
					"attributeName": "value",
					"propertyName": "value"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "change",
					"description": "Fires a custom 'change' event when the value changes",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [
				{
					"name": "modelValue",
					"propName": "value",
					"eventNames": ["change"],
					"valueMapping": "event.currentTarget.value"
				}
			],
			"methods": [{ "name": "nameChanged", "args": [], "returnType": "void" }],
			"slots": [
				{ "name": "default", "description": "Default slot." },
				{
					"name": "helper-text",
					"description": "Describes how to use the text-field. Alternative to the `helper-text` attribute."
				}
			]
		},
		{
			"name": "range-slider",
			"className": "RangeSlider",
			"vividModulePath": "libs/components/src/lib/range-slider/range-slider.ts",
			"registerFunctionName": "registerRangeSlider",
			"description": "Base class for range-slider",
			"props": [
				{
					"name": "ariaEndLabel",
					"description": "Aria label for the end thumb",
					"type": "string",
					"attributeName": "aria-end-label",
					"propertyName": "ariaEndLabel"
				},
				{
					"name": "ariaStartLabel",
					"description": "Aria label for the start thumb",
					"type": "string",
					"attributeName": "aria-start-label",
					"propertyName": "ariaStartLabel"
				},
				{
					"name": "connotation",
					"description": "The connotation of the component",
					"type": "'accent' | 'cta'",
					"attributeName": "connotation",
					"propertyName": "connotation"
				},
				{
					"name": "disabled",
					"description": "Sets the element's disabled state. A disabled element will not be included during form submission.",
					"type": "boolean",
					"attributeName": "disabled",
					"propertyName": "disabled"
				},
				{
					"name": "end",
					"description": "The current end value of the element. This property serves as a mechanism\nto set the `end` property through both property assignment and the\n.setAttribute() method. This is useful for setting the field's value\nin UI libraries that bind data through the .setAttribute() API\nand don't support IDL attribute binding.",
					"type": "string",
					"attributeName": "current-end",
					"propertyName": "currentEnd"
				},
				{
					"name": "initialEnd",
					"description": "The initial end value. This value sets the `end` property\nonly when the `end` property has not been explicitly set.",
					"type": "string",
					"attributeName": "end",
					"propertyName": "initialEnd"
				},
				{
					"name": "initialStart",
					"description": "The initial start value. This value sets the `start` property\nonly when the `start` property has not been explicitly set.",
					"type": "string",
					"attributeName": "start",
					"propertyName": "initialStart"
				},
				{
					"name": "initialValue",
					"description": "The default value of the element. This value sets the `value` property\nonly when the `value` property has not been explicitly set.",
					"type": "string",
					"attributeName": "value",
					"propertyName": "initialValue"
				},
				{
					"name": "label",
					"description": "The label for the form element.",
					"type": "string",
					"attributeName": "label"
				},
				{
					"name": "markers",
					"description": "Display markers on/off",
					"type": "boolean",
					"attributeName": "markers",
					"propertyName": "markers"
				},
				{
					"name": "max",
					"description": "The maximum value of the range.",
					"type": "number",
					"attributeName": "max",
					"propertyName": "max"
				},
				{
					"name": "min",
					"description": "The minimum value of the range.",
					"type": "number",
					"attributeName": "min",
					"propertyName": "min"
				},
				{
					"name": "name",
					"description": "The name of the element. This element's value will be surfaced during form submission under the provided name.",
					"type": "string",
					"attributeName": "name",
					"propertyName": "name"
				},
				{
					"name": "orientation",
					"description": "The orientation of the slider.",
					"type": "'horizontal' | 'vertical'",
					"attributeName": "orientation",
					"propertyName": "orientation"
				},
				{
					"name": "pin",
					"description": "Show current values on the thumbs.",
					"type": "boolean",
					"attributeName": "pin",
					"propertyName": "pin"
				},
				{
					"name": "required",
					"description": "Require the field to be completed prior to form submission.",
					"type": "boolean",
					"attributeName": "required",
					"propertyName": "required"
				},
				{
					"name": "start",
					"description": "The current start value of the element. This property serves as a mechanism\nto set the `start` property through both property assignment and the\n.setAttribute() method. This is useful for setting the field's value\nin UI libraries that bind data through the .setAttribute() API\nand don't support IDL attribute binding.",
					"type": "string",
					"attributeName": "current-start",
					"propertyName": "currentStart"
				},
				{
					"name": "step",
					"description": "Value to increment or decrement via arrow keys, mouse click or drag.",
					"type": "number",
					"attributeName": "step",
					"propertyName": "step"
				},
				{
					"name": "value",
					"description": "The current value of the element.",
					"type": "string",
					"attributeName": "current-value",
					"propertyName": "value"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "change",
					"description": "Event emitted when either the start or end value changes.",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Event emitted when either the start or end value changes.",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "input:end",
					"description": "Event emitted when the end value changes",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "input:start",
					"description": "Event emitted when the start value changes",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [
				{
					"name": "end",
					"propName": "end",
					"eventNames": ["input:end"],
					"valueMapping": "event.currentTarget.end"
				},
				{
					"name": "start",
					"propName": "start",
					"eventNames": ["input:start"],
					"valueMapping": "event.currentTarget.start"
				}
			],
			"methods": [
				{
					"name": "checkValidity",
					"description": "Return the current validity of the element.",
					"args": [],
					"returnType": "boolean"
				},
				{ "name": "formResetCallback", "args": [], "returnType": "unknown" },
				{
					"name": "reportValidity",
					"description": "Return the current validity of the element.\nIf false, fires an invalid event at the element.",
					"args": [],
					"returnType": "boolean"
				}
			],
			"slots": []
		},
		{
			"name": "rich-text-editor",
			"className": "RichTextEditor",
			"vividModulePath": "libs/components/src/lib/rich-text-editor/rich-text-editor.ts",
			"registerFunctionName": "registerRichTextEditor",
			"description": "",
			"props": [
				{
					"name": "placeholder",
					"type": "string",
					"attributeName": "placeholder",
					"propertyName": "placeholder"
				},
				{
					"name": "selectionEnd",
					"type": "number",
					"attributeName": "selection-end",
					"propertyName": "selectionEnd"
				},
				{
					"name": "selectionStart",
					"type": "number",
					"attributeName": "selection-start",
					"propertyName": "selectionStart"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [],
			"methods": [
				{
					"name": "addInlineImage",
					"args": [
						{
							"name": "imageProps",
							"type": "{\n\t\tfile: File;\n\t\tposition?: number;\n\t\talt?: string;\n\t}"
						}
					],
					"returnType": "unknown"
				},
				{ "name": "focus", "args": [], "returnType": "unknown" },
				{ "name": "placeholderChanged", "args": [], "returnType": "unknown" },
				{
					"name": "scrollToAttachments",
					"args": [{ "name": "additionalPixels", "type": "unknown" }],
					"returnType": "unknown"
				},
				{ "name": "selectionEndChanged", "args": [], "returnType": "unknown" },
				{
					"name": "selectionStartChanged",
					"args": [],
					"returnType": "unknown"
				},
				{
					"name": "setSelectionDecoration",
					"args": [{ "name": "decoration", "type": "string" }],
					"returnType": "unknown"
				},
				{
					"name": "setSelectionTextSize",
					"args": [
						{
							"name": "textSize",
							"type": "'extra-large' | 'large' | 'normal' | 'small'"
						}
					],
					"returnType": "unknown"
				},
				{
					"name": "setTextBlock",
					"args": [
						{ "name": "blockType", "type": "'title' | 'subtitle' | 'body'" }
					],
					"returnType": "unknown"
				}
			],
			"slots": []
		},
		{
			"name": "searchable-select",
			"className": "SearchableSelect",
			"vividModulePath": "libs/components/src/lib/searchable-select/searchable-select.ts",
			"registerFunctionName": "registerSearchableSelect",
			"description": "",
			"props": [
				{
					"name": "appearance",
					"type": "'fieldset' | 'ghost'",
					"attributeName": "appearance",
					"propertyName": "appearance"
				},
				{
					"name": "clearable",
					"description": "Adds a clear button to the input field that clears the selected values.",
					"type": "boolean",
					"attributeName": "clearable",
					"propertyName": "clearable"
				},
				{
					"name": "disabled",
					"description": "Sets the element's disabled state. A disabled element will not be included during form submission.",
					"type": "boolean",
					"attributeName": "disabled",
					"propertyName": "disabled"
				},
				{
					"name": "errorText",
					"description": "The error text for the form element.",
					"type": "string",
					"attributeName": "error-text"
				},
				{
					"name": "externalTags",
					"type": "boolean",
					"attributeName": "external-tags",
					"propertyName": "externalTags"
				},
				{
					"name": "fixedDropdown",
					"type": "boolean",
					"attributeName": "fixed-dropdown",
					"propertyName": "fixedDropdown"
				},
				{
					"name": "helperText",
					"description": "Provides additional information to help the user enter the correct information.\nTo add HTML to the helper text, use the helper-text slot instead.",
					"type": "string",
					"attributeName": "helper-text",
					"propertyName": "helperText"
				},
				{
					"name": "icon",
					"description": "A decorative icon the custom element should have.\nSee the Vivid Icon Gallery for available icons: https://icons.vivid.vonage.com/",
					"type": "IconId",
					"attributeName": "icon",
					"propertyName": "icon"
				},
				{
					"name": "iconTrailing",
					"description": "Indicates the icon affix alignment.",
					"type": "boolean",
					"attributeName": "icon-trailing",
					"propertyName": "iconTrailing"
				},
				{
					"name": "initialValue",
					"description": "The default value of the element. This value sets the `value` property\nonly when the `value` property has not been explicitly set.",
					"type": "string",
					"attributeName": "value",
					"propertyName": "initialValue"
				},
				{
					"name": "label",
					"description": "The label for the form element.",
					"type": "string",
					"attributeName": "label"
				},
				{
					"name": "loading",
					"description": "Whether the component is in a loading state.",
					"type": "boolean",
					"attributeName": "loading",
					"propertyName": "loading"
				},
				{
					"name": "maxLines",
					"type": "number",
					"attributeName": "max-lines",
					"propertyName": "maxLines"
				},
				{
					"name": "maxSelected",
					"type": "number",
					"attributeName": "max-selected",
					"propertyName": "maxSelected"
				},
				{
					"name": "multiple",
					"type": "boolean",
					"attributeName": "multiple",
					"propertyName": "multiple"
				},
				{
					"name": "name",
					"description": "The name of the element. This element's value will be surfaced during form submission under the provided name.",
					"type": "string",
					"attributeName": "name",
					"propertyName": "name"
				},
				{
					"name": "open",
					"type": "boolean",
					"attributeName": "open",
					"propertyName": "open"
				},
				{
					"name": "optionFilter",
					"description": "Function to filter the options to display.",
					"type": "any",
					"propertyName": "optionFilter"
				},
				{
					"name": "placeholder",
					"type": "string",
					"attributeName": "placeholder",
					"propertyName": "placeholder"
				},
				{
					"name": "required",
					"description": "Require the field to be completed prior to form submission.",
					"type": "boolean",
					"attributeName": "required",
					"propertyName": "required"
				},
				{
					"name": "shape",
					"type": "'rounded' | 'pill'",
					"attributeName": "shape",
					"propertyName": "shape"
				},
				{
					"name": "successText",
					"description": "The success text for the form element.",
					"type": "string",
					"attributeName": "success-text"
				},
				{
					"name": "value",
					"description": "The current value of the element.",
					"type": "string",
					"attributeName": "current-value",
					"propertyName": "value"
				},
				{
					"name": "values",
					"description": "List of selected option values.",
					"type": "string[]",
					"propertyName": "values"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "change",
					"description": "Fired when the selected options change",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fired when the selected options change",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				},
				{
					"name": "search-text-change",
					"description": "Fired when the search text changes",
					"type": "CustomEvent<undefined>"
				}
			],
			"vueModels": [
				{
					"name": "modelValue",
					"propName": "value",
					"eventNames": ["input"],
					"valueMapping": "event.currentTarget.value"
				},
				{
					"name": "values",
					"propName": "values",
					"eventNames": ["input"],
					"valueMapping": "event.currentTarget.values"
				}
			],
			"methods": [
				{
					"name": "checkValidity",
					"description": "Return the current validity of the element.",
					"args": [],
					"returnType": "boolean"
				},
				{
					"name": "reportValidity",
					"description": "Return the current validity of the element.\nIf false, fires an invalid event at the element.",
					"args": [],
					"returnType": "boolean"
				}
			],
			"slots": [
				{ "name": "default", "description": "Holds the available options." },
				{
					"name": "helper-text",
					"description": "Describes how to use the component. Alternative to the `helper-text` attribute."
				},
				{
					"name": "icon",
					"description": "The preferred way to add an icon to the control."
				},
				{
					"name": "loading-options",
					"description": "Message that appears there are no options to display and the component is in a loading state."
				},
				{
					"name": "meta",
					"description": "Slot to add meta content to the control."
				},
				{
					"name": "no-matches",
					"description": "Message that appears when no options match the search query."
				},
				{
					"name": "no-options",
					"description": "Message that appears when no options are available."
				}
			]
		},
		{
			"name": "select",
			"className": "Select",
			"vividModulePath": "libs/components/src/lib/select/select.ts",
			"registerFunctionName": "registerSelect",
			"description": "",
			"props": [
				{
					"name": "appearance",
					"description": "The appearance attribute.",
					"type": "'fieldset' | 'ghost'",
					"attributeName": "appearance",
					"propertyName": "appearance"
				},
				{
					"name": "disabled",
					"description": "Sets the element's disabled state. A disabled element will not be included during form submission.",
					"type": "boolean",
					"attributeName": "disabled",
					"propertyName": "disabled"
				},
				{
					"name": "errorText",
					"description": "The error text for the form element.",
					"type": "string",
					"attributeName": "error-text"
				},
				{
					"name": "fixedDropdown",
					"description": "The fixed-dropdown attribute.",
					"type": "boolean",
					"attributeName": "fixed-dropdown",
					"propertyName": "fixedDropdown"
				},
				{
					"name": "helperText",
					"description": "Provides additional information to help the user enter the correct information.\nTo add HTML to the helper text, use the helper-text slot instead.",
					"type": "string",
					"attributeName": "helper-text",
					"propertyName": "helperText"
				},
				{
					"name": "icon",
					"description": "A decorative icon the custom element should have.\nSee the Vivid Icon Gallery for available icons: https://icons.vivid.vonage.com/",
					"type": "IconId",
					"attributeName": "icon",
					"propertyName": "icon"
				},
				{
					"name": "iconTrailing",
					"description": "Indicates the icon affix alignment.",
					"type": "boolean",
					"attributeName": "icon-trailing",
					"propertyName": "iconTrailing"
				},
				{
					"name": "initialValue",
					"description": "The default value of the element. This value sets the `value` property\nonly when the `value` property has not been explicitly set.",
					"type": "string",
					"attributeName": "value",
					"propertyName": "initialValue"
				},
				{
					"name": "label",
					"description": "The label for the form element.",
					"type": "string",
					"attributeName": "label"
				},
				{
					"name": "multiple",
					"description": "Indicates if the listbox is in multi-selection mode.",
					"type": "boolean",
					"attributeName": "multiple",
					"propertyName": "multiple"
				},
				{
					"name": "name",
					"description": "The name of the element. This element's value will be surfaced during form submission under the provided name.",
					"type": "string",
					"attributeName": "name",
					"propertyName": "name"
				},
				{
					"name": "open",
					"description": "The open attribute.",
					"type": "boolean",
					"attributeName": "open",
					"propertyName": "open"
				},
				{
					"name": "placeholder",
					"description": "The placeholder attribute.",
					"type": "string",
					"attributeName": "placeholder",
					"propertyName": "placeholder"
				},
				{
					"name": "required",
					"description": "Require the field to be completed prior to form submission.",
					"type": "boolean",
					"attributeName": "required",
					"propertyName": "required"
				},
				{
					"name": "scale",
					"description": "The size the select should have.",
					"type": "'condensed' | 'normal'",
					"attributeName": "scale",
					"propertyName": "scale"
				},
				{
					"name": "shape",
					"description": "The shape attribute.",
					"type": "'rounded' | 'pill'",
					"attributeName": "shape",
					"propertyName": "shape"
				},
				{
					"name": "successText",
					"description": "The success text for the form element.",
					"type": "string",
					"attributeName": "success-text"
				},
				{
					"name": "value",
					"description": "The current value of the element.",
					"type": "string",
					"attributeName": "current-value",
					"propertyName": "value"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "change",
					"description": "Fires a custom 'change' event when the value updates",
					"type": "CustomEvent<HTMLElement>"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires a custom 'input' event when the value updates",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [
				{
					"name": "modelValue",
					"propName": "value",
					"eventNames": ["input"],
					"valueMapping": "event.currentTarget.value"
				}
			],
			"methods": [
				{
					"name": "checkValidity",
					"description": "Return the current validity of the element.",
					"args": [],
					"returnType": "boolean"
				},
				{ "name": "formResetCallback", "args": [], "returnType": "unknown" },
				{ "name": "labelChanged", "args": [], "returnType": "unknown" },
				{
					"name": "reportValidity",
					"description": "Return the current validity of the element.\nIf false, fires an invalid event at the element.",
					"args": [],
					"returnType": "boolean"
				},
				{
					"name": "selectFirstOption",
					"description": "Moves focus to the first selectable option.",
					"args": [],
					"returnType": "void"
				},
				{
					"name": "setDefaultSelectedOption",
					"args": [],
					"returnType": "void"
				},
				{
					"name": "setSelectedOptions",
					"description": "Sets an option as selected and gives it focus.",
					"args": [],
					"returnType": "unknown"
				},
				{
					"name": "slottedOptionsChanged",
					"args": [
						{ "name": "prev", "type": "Element[] | undefined" },
						{ "name": "next", "type": "Element[]" }
					],
					"returnType": "unknown"
				}
			],
			"slots": [
				{ "name": "default", "description": "Default slot." },
				{
					"name": "helper-text",
					"description": "Describes how to use the select. Alternative to the `helper-text` attribute."
				},
				{
					"name": "icon",
					"description": "The preferred way to add an icon to the select control."
				},
				{
					"name": "meta",
					"description": "Slot to add meta content to the select control."
				}
			]
		},
		{
			"name": "selectable-box",
			"className": "SelectableBox",
			"vividModulePath": "libs/components/src/lib/selectable-box/selectable-box.ts",
			"registerFunctionName": "registerSelectableBox",
			"description": "",
			"props": [
				{
					"name": "checked",
					"description": "Controls the checked state of the box",
					"type": "boolean",
					"attributeName": "checked",
					"propertyName": "checked"
				},
				{
					"name": "clickable",
					"type": "boolean",
					"attributeName": "clickable",
					"propertyName": "clickable"
				},
				{
					"name": "clickableBox",
					"description": "Makes the entire selectable box clickable",
					"type": "boolean",
					"attributeName": "clickable-box",
					"propertyName": "clickableBox"
				},
				{
					"name": "connotation",
					"description": "The connotation the selectable box should have.",
					"type": "'accent' | 'cta'",
					"attributeName": "connotation",
					"propertyName": "connotation"
				},
				{
					"name": "controlType",
					"description": "The type of control the box should have: checkbox or radio.",
					"type": "'checkbox' | 'radio'",
					"attributeName": "control-type",
					"propertyName": "controlType"
				},
				{
					"name": "tight",
					"description": "Removes the padding around the box's slot content",
					"type": "boolean",
					"attributeName": "tight",
					"propertyName": "tight"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "change",
					"description": "Fired when the checked state changes",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [],
			"methods": [],
			"slots": [{ "name": "default", "description": "Slot for box's content." }]
		},
		{
			"name": "side-drawer",
			"className": "SideDrawer",
			"vividModulePath": "libs/components/src/lib/side-drawer/side-drawer.ts",
			"registerFunctionName": "registerSideDrawer",
			"description": "",
			"props": [
				{
					"name": "alternate",
					"description": "applies scheme alternate region",
					"type": "boolean",
					"attributeName": "alternate",
					"propertyName": "alternate"
				},
				{
					"name": "modal",
					"description": "sets the side drawer's type to modal",
					"type": "boolean",
					"attributeName": "modal",
					"propertyName": "modal"
				},
				{
					"name": "open",
					"description": "indicates whether the side drawer is open",
					"type": "boolean",
					"attributeName": "open",
					"propertyName": "open"
				},
				{
					"name": "trailing",
					"description": "sets the side of the side drawer",
					"type": "boolean",
					"attributeName": "trailing",
					"propertyName": "trailing"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "cancel",
					"description": "Fired when the user requests to close the side-drawer. You can prevent the side drawer from closing by calling `.preventDefault()` on the event.",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "close",
					"description": "Fired when the side drawer is closed.",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				},
				{
					"name": "open",
					"description": "Fired when the side drawer is opened.",
					"type": "CustomEvent<undefined>"
				}
			],
			"vueModels": [],
			"methods": [],
			"slots": [
				{
					"name": "app-content",
					"description": "Sets assigned nodes to the main application content, the side drawer is opened next to."
				},
				{
					"name": "default",
					"description": "Sets assigned nodes to the side drawer itself."
				}
			]
		},
		{
			"name": "slider",
			"className": "Slider",
			"vividModulePath": "libs/components/src/lib/slider/slider.ts",
			"registerFunctionName": "registerSlider",
			"description": "",
			"props": [
				{
					"name": "connotation",
					"description": "slider connotation",
					"type": "'accent' | 'cta'",
					"attributeName": "connotation",
					"propertyName": "connotation"
				},
				{
					"name": "disabled",
					"description": "Sets the element's disabled state. A disabled element will not be included during form submission.",
					"type": "boolean",
					"attributeName": "disabled",
					"propertyName": "disabled"
				},
				{
					"name": "initialValue",
					"description": "The default value of the element. This value sets the `value` property\nonly when the `value` property has not been explicitly set.",
					"type": "string",
					"attributeName": "value",
					"propertyName": "initialValue"
				},
				{
					"name": "markers",
					"description": "Display markers on/off",
					"type": "boolean",
					"attributeName": "markers",
					"propertyName": "markers"
				},
				{
					"name": "max",
					"description": "The maximum allowed value.",
					"type": "number",
					"attributeName": "max",
					"propertyName": "max"
				},
				{
					"name": "min",
					"description": "The minimum allowed value.",
					"type": "number",
					"attributeName": "min",
					"propertyName": "min"
				},
				{
					"name": "mode",
					"description": "The selection mode.",
					"type": "'single-value'",
					"attributeName": "mode",
					"propertyName": "mode"
				},
				{
					"name": "name",
					"description": "The name of the element. This element's value will be surfaced during form submission under the provided name.",
					"type": "string",
					"attributeName": "name",
					"propertyName": "name"
				},
				{
					"name": "orientation",
					"description": "The orientation of the slider.",
					"type": "'horizontal' | 'vertical'",
					"attributeName": "orientation",
					"propertyName": "orientation"
				},
				{
					"name": "pin",
					"description": "Show current value on the thumb.",
					"type": "boolean",
					"attributeName": "pin",
					"propertyName": "pin"
				},
				{
					"name": "readonly",
					"description": "When true, the control will be immutable by user interaction. See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute for more information.",
					"type": "boolean",
					"attributeName": "readonly",
					"propertyName": "readOnly"
				},
				{
					"name": "required",
					"description": "Require the field to be completed prior to form submission.",
					"type": "boolean",
					"attributeName": "required",
					"propertyName": "required"
				},
				{
					"name": "step",
					"description": "Value to increment or decrement via arrow keys, mouse click or drag.",
					"type": "number",
					"attributeName": "step",
					"propertyName": "step"
				},
				{
					"name": "value",
					"description": "The current value of the element.",
					"type": "string",
					"attributeName": "current-value",
					"propertyName": "value"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "change",
					"description": "Fires a custom 'change' event when the slider value changes",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [
				{
					"name": "modelValue",
					"propName": "value",
					"eventNames": ["change"],
					"valueMapping": "event.currentTarget.value"
				}
			],
			"methods": [
				{
					"name": "checkValidity",
					"description": "Return the current validity of the element.",
					"args": [],
					"returnType": "boolean"
				},
				{
					"name": "decrement",
					"description": "Decrement the value by the step",
					"args": [],
					"returnType": "void"
				},
				{
					"name": "increment",
					"description": "Increment the value by the step",
					"args": [],
					"returnType": "void"
				},
				{
					"name": "reportValidity",
					"description": "Return the current validity of the element.\nIf false, fires an invalid event at the element.",
					"args": [],
					"returnType": "boolean"
				},
				{
					"name": "setThumbPositionForOrientation",
					"description": "Places the thumb based on the current value",
					"args": [
						{ "name": "_", "type": "'ltr' | 'rtl'" },
						{ "name": "direction", "type": "unknown" }
					],
					"returnType": "void"
				}
			],
			"slots": []
		},
		{
			"name": "split-button",
			"className": "SplitButton",
			"vividModulePath": "libs/components/src/lib/split-button/split-button.ts",
			"registerFunctionName": "registerSplitButton",
			"description": "",
			"props": [
				{
					"name": "appearance",
					"description": "The appearance the split button should have.",
					"type": "'filled' | 'outlined' | 'ghost'",
					"attributeName": "appearance",
					"propertyName": "appearance"
				},
				{
					"name": "connotation",
					"description": "The connotation the split button should have.",
					"type": "'accent' | 'announcement' | 'cta' | 'success' | 'alert'",
					"attributeName": "connotation",
					"propertyName": "connotation"
				},
				{
					"name": "disabled",
					"description": "Indicates if the button is disabled.",
					"type": "boolean",
					"attributeName": "disabled",
					"propertyName": "disabled"
				},
				{
					"name": "icon",
					"description": "A decorative icon the custom element should have.\nSee the Vivid Icon Gallery for available icons: https://icons.vivid.vonage.com/",
					"type": "IconId",
					"attributeName": "icon",
					"propertyName": "icon"
				},
				{
					"name": "indicatorAriaLabel",
					"description": "Defines a string value that labels the indicator element.\n\nhttps://www.w3.org/TR/wai-aria-1.1/#aria-label",
					"type": "string",
					"attributeName": "indicator-aria-label",
					"propertyName": "indicatorAriaLabel"
				},
				{
					"name": "label",
					"description": "Indicates the split button's label.",
					"type": "string",
					"attributeName": "label",
					"propertyName": "label"
				},
				{
					"name": "shape",
					"description": "The shape the split button should have.",
					"type": "'rounded' | 'pill'",
					"attributeName": "shape",
					"propertyName": "shape"
				},
				{
					"name": "size",
					"description": "The size the split button should have.",
					"type": "'super-condensed' | 'condensed' | 'normal' | 'expanded'",
					"attributeName": "size",
					"propertyName": "size"
				},
				{
					"name": "splitIndicator",
					"description": "Indicates the split button's icon indicator.",
					"type": "string",
					"attributeName": "split-indicator",
					"propertyName": "splitIndicator"
				}
			],
			"events": [
				{
					"name": "action-click",
					"description": "Event emitted when the action button is clicked",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "indicator-click",
					"description": "Event emitted when the indicator button is clicked",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [],
			"methods": [],
			"slots": [
				{ "name": "default", "description": "Default slot." },
				{
					"name": "icon",
					"description": "The preferred way to add an icon to the component."
				}
			]
		},
		{
			"name": "switch",
			"className": "Switch",
			"vividModulePath": "libs/components/src/lib/switch/switch.ts",
			"registerFunctionName": "registerSwitch",
			"description": "",
			"props": [
				{
					"name": "checked",
					"description": "The current checkedness of the element.",
					"type": "boolean",
					"attributeName": "current-checked",
					"propertyName": "checked"
				},
				{
					"name": "connotation",
					"description": "Indicates the switch's connotation.",
					"type": "'accent' | 'alert' | 'announcement' | 'success' | 'cta'",
					"attributeName": "connotation",
					"propertyName": "connotation"
				},
				{
					"name": "defaultChecked",
					"description": "The default checkedness of the element. This value sets the `checked` property\nonly when the `checked` property has not been explicitly set.",
					"type": "boolean",
					"attributeName": "checked",
					"propertyName": "defaultChecked"
				},
				{
					"name": "disabled",
					"description": "Sets the element's disabled state. A disabled element will not be included during form submission.",
					"type": "boolean",
					"attributeName": "disabled",
					"propertyName": "disabled"
				},
				{
					"name": "initialValue",
					"description": "The default value of the element. This value sets the `value` property\nonly when the `value` property has not been explicitly set.",
					"type": "string",
					"attributeName": "value",
					"propertyName": "initialValue"
				},
				{
					"name": "label",
					"description": "Indicates the switch's label.",
					"type": "string",
					"attributeName": "label",
					"propertyName": "label"
				},
				{
					"name": "name",
					"description": "The name of the element. This element's value will be surfaced during form submission under the provided name.",
					"type": "string",
					"attributeName": "name",
					"propertyName": "name"
				},
				{
					"name": "readonly",
					"description": "When true, the control will be immutable by user interaction. See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute for more information.",
					"type": "boolean",
					"attributeName": "readonly",
					"propertyName": "readOnly"
				},
				{
					"name": "required",
					"description": "Require the field to be completed prior to form submission.",
					"type": "boolean",
					"attributeName": "required",
					"propertyName": "required"
				},
				{
					"name": "value",
					"description": "The current value of the element.",
					"type": "string",
					"attributeName": "current-value",
					"propertyName": "value"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "change",
					"description": "Emits a custom change event when the checked state changes",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [
				{
					"name": "modelValue",
					"propName": "checked",
					"eventNames": ["change"],
					"valueMapping": "event.currentTarget.checked"
				}
			],
			"methods": [
				{
					"name": "checkValidity",
					"description": "Return the current validity of the element.",
					"args": [],
					"returnType": "boolean"
				},
				{
					"name": "reportValidity",
					"description": "Return the current validity of the element.\nIf false, fires an invalid event at the element.",
					"args": [],
					"returnType": "boolean"
				}
			],
			"slots": []
		},
		{
			"name": "tab",
			"className": "Tab",
			"vividModulePath": "libs/components/src/lib/tab/tab.ts",
			"registerFunctionName": "registerTab",
			"description": "",
			"props": [
				{
					"name": "connotation",
					"description": "The connotation the tab should have.",
					"type": "'accent' | 'cta'",
					"attributeName": "connotation",
					"propertyName": "connotation"
				},
				{
					"name": "disabled",
					"description": "When true, the control will be immutable by user interaction. See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled | disabled HTML attribute for more information.",
					"type": "boolean",
					"attributeName": "disabled",
					"propertyName": "disabled"
				},
				{
					"name": "icon",
					"description": "A decorative icon the custom element should have.\nSee the Vivid Icon Gallery for available icons: https://icons.vivid.vonage.com/",
					"type": "IconId",
					"attributeName": "icon",
					"propertyName": "icon"
				},
				{
					"name": "iconTrailing",
					"description": "Indicates the icon affix alignment.",
					"type": "boolean",
					"attributeName": "icon-trailing",
					"propertyName": "iconTrailing"
				},
				{
					"name": "label",
					"description": "Indicates the tab's label.",
					"type": "string",
					"attributeName": "label",
					"propertyName": "label"
				},
				{
					"name": "removable",
					"description": "Adds a close button",
					"type": "boolean",
					"attributeName": "removable",
					"propertyName": "removable"
				},
				{
					"name": "shape",
					"description": "The shape the tab should have.",
					"type": "'rounded' | 'sharp'",
					"attributeName": "shape",
					"propertyName": "shape"
				},
				{
					"name": "tabIndex",
					"type": "number",
					"attributeName": "tabIndex",
					"propertyName": "tabIndex"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [],
			"methods": [
				{
					"name": "_handleCloseClick",
					"args": [{ "name": "e", "type": "Event" }],
					"returnType": "unknown"
				},
				{
					"name": "_onKeyDown",
					"args": [{ "name": "e", "type": "KeyboardEvent" }],
					"returnType": "unknown"
				}
			],
			"slots": [
				{
					"name": "icon",
					"description": "The preferred way to add an icon to the component."
				}
			]
		},
		{
			"name": "tab-panel",
			"className": "TabPanel",
			"vividModulePath": "libs/components/src/lib/tab-panel/tab-panel.ts",
			"registerFunctionName": "registerTabPanel",
			"description": "",
			"props": [],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [],
			"methods": [],
			"slots": [{ "name": "default", "description": "Default slot." }]
		},
		{
			"name": "tabs",
			"className": "Tabs",
			"vividModulePath": "libs/components/src/lib/tabs/tabs.ts",
			"registerFunctionName": "registerTabs",
			"description": "",
			"props": [
				{
					"name": "activeid",
					"description": "The id of the active tab",
					"type": "string",
					"attributeName": "activeid",
					"propertyName": "activeid"
				},
				{
					"name": "activeindicator",
					"description": "Deprecated attribute. It has no effect.",
					"type": "boolean",
					"attributeName": "activeindicator",
					"propertyName": "activeindicator"
				},
				{
					"name": "connotation",
					"description": "The connotation the tabs should have.",
					"type": "'accent' | 'cta'",
					"attributeName": "connotation",
					"propertyName": "connotation"
				},
				{
					"name": "gutters",
					"description": "sets the initial preferred margin from predefined available options",
					"type": "'none' | 'small'",
					"attributeName": "gutters",
					"propertyName": "gutters"
				},
				{
					"name": "orientation",
					"description": "The orientation",
					"type": "'vertical' | 'horizontal'",
					"attributeName": "orientation",
					"propertyName": "orientation"
				},
				{
					"name": "scrollablePanel",
					"description": "sets overflow to the tab-panel",
					"type": "boolean",
					"attributeName": "scrollable-panel",
					"propertyName": "scrollablePanel"
				},
				{
					"name": "tabsLayout",
					"description": "Controls the layout of the tabs.",
					"type": "'align-start' | 'stretch'",
					"attributeName": "tabs-layout",
					"propertyName": "tabsLayout"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "change",
					"description": "Fires a custom 'change' event when a tab is clicked or during keyboard navigation",
					"type": "CustomEvent<HTMLElement>"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [],
			"methods": [
				{
					"name": "adjust",
					"description": "Adjusts the active index by numerical increments.\nOnly enabled tabs are considered.",
					"args": [{ "name": "adjustment", "type": "number" }],
					"returnType": "void"
				}
			],
			"slots": [{ "name": "default", "description": "Default slot." }]
		},
		{
			"name": "tag",
			"className": "Tag",
			"vividModulePath": "libs/components/src/lib/tag/tag.ts",
			"registerFunctionName": "registerTag",
			"description": "",
			"props": [
				{
					"name": "appearance",
					"description": "The appearance the tag should have.",
					"type": "'subtle' | 'duotone'",
					"attributeName": "appearance",
					"propertyName": "appearance"
				},
				{
					"name": "connotation",
					"description": "The connotation the tag should have.",
					"type": "'accent' | 'cta'",
					"attributeName": "connotation",
					"propertyName": "connotation"
				},
				{
					"name": "disabled",
					"description": "indicates whether the tag is disabled",
					"type": "boolean",
					"attributeName": "disabled",
					"propertyName": "disabled"
				},
				{
					"name": "icon",
					"description": "A decorative icon the custom element should have.\nSee the Vivid Icon Gallery for available icons: https://icons.vivid.vonage.com/",
					"type": "IconId",
					"attributeName": "icon",
					"propertyName": "icon"
				},
				{
					"name": "label",
					"description": "Indicates the tag's label.",
					"type": "string",
					"attributeName": "label",
					"propertyName": "label"
				},
				{
					"name": "removable",
					"description": "indicates whether the tag is removable",
					"type": "boolean",
					"attributeName": "removable",
					"propertyName": "removable"
				},
				{
					"name": "selectable",
					"description": "indicates whether the tag is selectable",
					"type": "boolean",
					"attributeName": "selectable",
					"propertyName": "selectable"
				},
				{
					"name": "selected",
					"description": "indicates whether the tag is selected",
					"type": "boolean",
					"attributeName": "selected",
					"propertyName": "selected"
				},
				{
					"name": "shape",
					"description": "The shape the tag should have.",
					"type": "'rounded' | 'pill'",
					"attributeName": "shape",
					"propertyName": "shape"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				},
				{
					"name": "removed",
					"description": "Fires when the tag is removed",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "selected-change",
					"description": "Fires when the selected state changes",
					"type": "CustomEvent<undefined>"
				}
			],
			"vueModels": [],
			"methods": [
				{ "name": "handleClick", "args": [], "returnType": "void" },
				{
					"name": "handleKeydown",
					"args": [{ "name": "e", "type": "KeyboardEvent" }],
					"returnType": "unknown"
				},
				{ "name": "remove", "args": [], "returnType": "void" }
			],
			"slots": [
				{
					"name": "icon",
					"description": "The preferred way to add an icon to the component."
				}
			]
		},
		{
			"name": "tag-group",
			"className": "TagGroup",
			"vividModulePath": "libs/components/src/lib/tag-group/tag-group.ts",
			"registerFunctionName": "registerTagGroup",
			"description": "",
			"props": [],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [],
			"methods": [],
			"slots": [
				{ "name": "default", "description": "The content of the tag-group." }
			]
		},
		{
			"name": "text-area",
			"className": "TextArea",
			"vividModulePath": "libs/components/src/lib/text-area/text-area.ts",
			"registerFunctionName": "registerTextArea",
			"description": "",
			"props": [
				{
					"name": "autofocus",
					"description": "Indicates that this element should get focus after the page finishes loading.",
					"type": "boolean",
					"attributeName": "autofocus",
					"propertyName": "autofocus"
				},
				{
					"name": "charCount",
					"description": "Use in combination with `maxlength` to display a character count.",
					"type": "boolean",
					"attributeName": "char-count",
					"propertyName": "charCount"
				},
				{
					"name": "cols",
					"description": "Sizes the element horizontally by a number of character columns.",
					"type": "number",
					"attributeName": "cols",
					"propertyName": "cols"
				},
				{
					"name": "disabled",
					"description": "Sets the element's disabled state. A disabled element will not be included during form submission.",
					"type": "boolean",
					"attributeName": "disabled",
					"propertyName": "disabled"
				},
				{
					"name": "errorText",
					"description": "The error text for the form element.",
					"type": "string",
					"attributeName": "error-text"
				},
				{
					"name": "form",
					"description": "The https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id | id of the https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form | form the element is associated to",
					"type": "string",
					"attributeName": "form",
					"propertyName": "formId"
				},
				{
					"name": "helperText",
					"description": "Provides additional information to help the user enter the correct information.\nTo add HTML to the helper text, use the helper-text slot instead.",
					"type": "string",
					"attributeName": "helper-text",
					"propertyName": "helperText"
				},
				{
					"name": "initialValue",
					"description": "The default value of the element. This value sets the `value` property\nonly when the `value` property has not been explicitly set.",
					"type": "string",
					"attributeName": "value",
					"propertyName": "initialValue"
				},
				{
					"name": "label",
					"description": "The label for the form element.",
					"type": "string",
					"attributeName": "label"
				},
				{
					"name": "list",
					"description": "Allows associating a https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist | datalist to the element by https://developer.mozilla.org/en-US/docs/Web/API/Element/id.",
					"type": "string",
					"attributeName": "list",
					"propertyName": "list"
				},
				{
					"name": "maxlength",
					"description": "The maximum number of characters a user can enter.",
					"type": "number",
					"attributeName": "maxlength",
					"propertyName": "maxlength"
				},
				{
					"name": "minlength",
					"description": "The minimum number of characters a user can enter.",
					"type": "number",
					"attributeName": "minlength",
					"propertyName": "minlength"
				},
				{
					"name": "name",
					"description": "The name of the element. This element's value will be surfaced during form submission under the provided name.",
					"type": "string",
					"attributeName": "name",
					"propertyName": "name"
				},
				{
					"name": "placeholder",
					"description": "Sets the placeholder value of the element, generally used to provide a hint to the user.",
					"type": "string",
					"attributeName": "placeholder",
					"propertyName": "placeholder"
				},
				{
					"name": "readOnly",
					"description": "When true, the control will be immutable by user interaction. See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute for more information.",
					"type": "boolean",
					"attributeName": "readOnly",
					"propertyName": "readOnly"
				},
				{
					"name": "required",
					"description": "Require the field to be completed prior to form submission.",
					"type": "boolean",
					"attributeName": "required",
					"propertyName": "required"
				},
				{
					"name": "resize",
					"description": "The resize mode of the element.",
					"type": "'none' | 'both' | 'horizontal' | 'vertical'",
					"attributeName": "resize",
					"propertyName": "resize"
				},
				{
					"name": "rows",
					"description": "Sizes the element vertically by a number of character rows.",
					"type": "number",
					"attributeName": "rows",
					"propertyName": "rows"
				},
				{
					"name": "spellcheck",
					"description": "Sets if the element is eligible for spell checking\nbut the UA.",
					"type": "boolean",
					"attributeName": "spellcheck",
					"propertyName": "spellcheck"
				},
				{
					"name": "successText",
					"description": "The success text for the form element.",
					"type": "string",
					"attributeName": "success-text"
				},
				{
					"name": "value",
					"description": "The current value of the element.",
					"type": "string",
					"attributeName": "current-value",
					"propertyName": "value"
				},
				{
					"name": "wrap",
					"description": "The wrap attribute",
					"type": "'hard' | 'soft' | 'off'",
					"attributeName": "wrap",
					"propertyName": "wrap"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "change",
					"description": "Emits a custom 'change' event when the textarea emits a change event",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [
				{
					"name": "modelValue",
					"propName": "value",
					"eventNames": ["input"],
					"valueMapping": "event.currentTarget.value"
				}
			],
			"methods": [
				{
					"name": "checkValidity",
					"description": "Return the current validity of the element.",
					"args": [],
					"returnType": "boolean"
				},
				{
					"name": "reportValidity",
					"description": "Return the current validity of the element.\nIf false, fires an invalid event at the element.",
					"args": [],
					"returnType": "boolean"
				},
				{
					"name": "select",
					"description": "Selects all the text in the text area",
					"args": [],
					"returnType": "unknown"
				},
				{
					"name": "validate",
					"description": "{@inheritDoc (FormAssociated:interface).validate}",
					"args": [],
					"returnType": "void"
				}
			],
			"slots": [
				{
					"name": "helper-text",
					"description": "Describes how to use the text-area. Alternative to the `helper-text` attribute."
				}
			]
		},
		{
			"name": "text-field",
			"className": "TextField",
			"vividModulePath": "libs/components/src/lib/text-field/text-field.ts",
			"registerFunctionName": "registerTextField",
			"description": "Base class for text-field",
			"props": [
				{
					"name": "appearance",
					"type": "'fieldset' | 'ghost'",
					"attributeName": "appearance",
					"propertyName": "appearance"
				},
				{
					"name": "autoComplete",
					"type": "string",
					"attributeName": "autoComplete",
					"propertyName": "autoComplete"
				},
				{
					"name": "autofocus",
					"description": "Indicates that this element should get focus after the page finishes loading. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefautofocus | autofocus HTML attribute for more information.",
					"type": "boolean",
					"attributeName": "autofocus",
					"propertyName": "autofocus"
				},
				{
					"name": "charCount",
					"description": "Use in combination with `maxlength` to display a character count.",
					"type": "boolean",
					"attributeName": "char-count",
					"propertyName": "charCount"
				},
				{
					"name": "disabled",
					"description": "Sets the element's disabled state. A disabled element will not be included during form submission.",
					"type": "boolean",
					"attributeName": "disabled",
					"propertyName": "disabled"
				},
				{
					"name": "errorText",
					"description": "The error text for the form element.",
					"type": "string",
					"attributeName": "error-text"
				},
				{
					"name": "helperText",
					"description": "Provides additional information to help the user enter the correct information.\nTo add HTML to the helper text, use the helper-text slot instead.",
					"type": "string",
					"attributeName": "helper-text",
					"propertyName": "helperText"
				},
				{
					"name": "icon",
					"description": "A decorative icon the custom element should have.\nSee the Vivid Icon Gallery for available icons: https://icons.vivid.vonage.com/",
					"type": "IconId",
					"attributeName": "icon",
					"propertyName": "icon"
				},
				{
					"name": "initialValue",
					"description": "The default value of the element. This value sets the `value` property\nonly when the `value` property has not been explicitly set.",
					"type": "string",
					"attributeName": "value",
					"propertyName": "initialValue"
				},
				{
					"name": "inputmode",
					"description": "Hints at the type of data that might be entered by the user while editing the element or its contents.\nThis allows a browser to display an appropriate virtual keyboard.",
					"type": "string",
					"attributeName": "inputmode",
					"propertyName": "inputMode"
				},
				{
					"name": "label",
					"description": "The label for the form element.",
					"type": "string",
					"attributeName": "label"
				},
				{
					"name": "list",
					"description": "Allows associating a https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist | datalist to the element by https://developer.mozilla.org/en-US/docs/Web/API/Element/id.",
					"type": "string",
					"attributeName": "list",
					"propertyName": "list"
				},
				{
					"name": "maxlength",
					"description": "The maximum number of characters a user can enter.",
					"type": "number",
					"attributeName": "maxlength",
					"propertyName": "maxlength"
				},
				{
					"name": "minlength",
					"description": "The minimum number of characters a user can enter.",
					"type": "number",
					"attributeName": "minlength",
					"propertyName": "minlength"
				},
				{
					"name": "name",
					"description": "The name of the element. This element's value will be surfaced during form submission under the provided name.",
					"type": "string",
					"attributeName": "name",
					"propertyName": "name"
				},
				{
					"name": "pattern",
					"description": "A regular expression that the value must match to pass validation.",
					"type": "string",
					"attributeName": "pattern",
					"propertyName": "pattern"
				},
				{
					"name": "placeholder",
					"description": "Sets the placeholder value of the element, generally used to provide a hint to the user.",
					"type": "string",
					"attributeName": "placeholder",
					"propertyName": "placeholder"
				},
				{
					"name": "readonly",
					"description": "When true, the control will be immutable by user interaction. See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute for more information.",
					"type": "boolean",
					"attributeName": "readonly",
					"propertyName": "readOnly"
				},
				{
					"name": "required",
					"description": "Require the field to be completed prior to form submission.",
					"type": "boolean",
					"attributeName": "required",
					"propertyName": "required"
				},
				{
					"name": "scale",
					"description": "The size the text-field should have.",
					"type": "'condensed' | 'normal'",
					"attributeName": "scale",
					"propertyName": "scale"
				},
				{
					"name": "shape",
					"type": "'rounded' | 'pill'",
					"attributeName": "shape",
					"propertyName": "shape"
				},
				{
					"name": "size",
					"description": "Sets the width of the element to a specified number of characters.",
					"type": "number",
					"attributeName": "size",
					"propertyName": "size"
				},
				{
					"name": "spellcheck",
					"description": "Controls whether or not to enable spell checking for the input field, or if the default spell checking configuration should be used.",
					"type": "boolean",
					"attributeName": "spellcheck",
					"propertyName": "spellcheck"
				},
				{
					"name": "successText",
					"description": "The success text for the form element.",
					"type": "string",
					"attributeName": "success-text"
				},
				{
					"name": "type",
					"description": "Allows setting a type or mode of text.",
					"type": "'email' | 'password' | 'tel' | 'text' | 'url'",
					"attributeName": "type",
					"propertyName": "type"
				},
				{
					"name": "value",
					"description": "The current value of the element.",
					"type": "string",
					"attributeName": "current-value",
					"propertyName": "value"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "change",
					"description": "Fires a custom 'change' event when the value has changed",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [
				{
					"name": "modelValue",
					"propName": "value",
					"eventNames": ["input"],
					"valueMapping": "event.currentTarget.value"
				}
			],
			"methods": [
				{
					"name": "checkValidity",
					"description": "Return the current validity of the element.",
					"args": [],
					"returnType": "boolean"
				},
				{ "name": "focus", "args": [], "returnType": "unknown" },
				{
					"name": "reportValidity",
					"description": "Return the current validity of the element.\nIf false, fires an invalid event at the element.",
					"args": [],
					"returnType": "boolean"
				},
				{
					"name": "select",
					"description": "Selects all the text in the text field",
					"args": [],
					"returnType": "unknown"
				},
				{
					"name": "validate",
					"description": "{@inheritDoc (FormAssociated:interface).validate}",
					"args": [],
					"returnType": "unknown"
				}
			],
			"slots": [
				{
					"name": "action-items",
					"description": "Used to add action items to the end of the text-field."
				},
				{
					"name": "helper-text",
					"description": "Describes how to use the text-field. Alternative to the `helper-text` attribute."
				},
				{
					"name": "leading-action-items",
					"description": "Used to add action items to the start of the text-field."
				}
			]
		},
		{
			"name": "time-picker",
			"className": "TimePicker",
			"vividModulePath": "libs/components/src/lib/time-picker/time-picker.ts",
			"registerFunctionName": "registerTimePicker",
			"description": "",
			"props": [
				{
					"name": "clock",
					"description": "Forces a 12h or 24h clock to be used.",
					"type": "'12h' | '24h'",
					"attributeName": "clock",
					"propertyName": "clock"
				},
				{
					"name": "disabled",
					"description": "Sets the element's disabled state. A disabled element will not be included during form submission.",
					"type": "boolean",
					"attributeName": "disabled",
					"propertyName": "disabled"
				},
				{
					"name": "errorText",
					"description": "The error text for the form element.",
					"type": "string",
					"attributeName": "error-text"
				},
				{
					"name": "helperText",
					"description": "Provides additional information to help the user enter the correct information.\nTo add HTML to the helper text, use the helper-text slot instead.",
					"type": "string",
					"attributeName": "helper-text",
					"propertyName": "helperText"
				},
				{
					"name": "initialValue",
					"description": "The default value of the element. This value sets the `value` property\nonly when the `value` property has not been explicitly set.",
					"type": "string",
					"attributeName": "value",
					"propertyName": "initialValue"
				},
				{
					"name": "label",
					"description": "The label for the form element.",
					"type": "string",
					"attributeName": "label"
				},
				{
					"name": "max",
					"description": "The latest accepted time of the time-picker.",
					"type": "string",
					"attributeName": "max",
					"propertyName": "max"
				},
				{
					"name": "min",
					"description": "The earliest accepted time of the time-picker.",
					"type": "string",
					"attributeName": "min",
					"propertyName": "min"
				},
				{
					"name": "minutesStep",
					"description": "Distance between presented minute options.",
					"type": "number",
					"attributeName": "minutes-step",
					"propertyName": "minutesStep"
				},
				{
					"name": "name",
					"description": "The name of the element. This element's value will be surfaced during form submission under the provided name.",
					"type": "string",
					"attributeName": "name",
					"propertyName": "name"
				},
				{
					"name": "readonly",
					"description": "Whether the date-picker is readonly.",
					"type": "boolean",
					"attributeName": "readonly",
					"propertyName": "readOnly"
				},
				{
					"name": "required",
					"description": "Require the field to be completed prior to form submission.",
					"type": "boolean",
					"attributeName": "required",
					"propertyName": "required"
				},
				{
					"name": "secondsStep",
					"description": "Distance between presented seconds options. If null, seconds are not presented.",
					"type": "number",
					"attributeName": "seconds-step",
					"propertyName": "secondsStep"
				},
				{
					"name": "value",
					"description": "The current value of the element.",
					"type": "string",
					"attributeName": "current-value",
					"propertyName": "value"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "change",
					"description": "Emitted when the time is changed by the user.",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Emitted when the time is changed by the user.",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [
				{
					"name": "modelValue",
					"propName": "value",
					"eventNames": ["input"],
					"valueMapping": "event.currentTarget.value"
				}
			],
			"methods": [
				{
					"name": "checkValidity",
					"description": "Return the current validity of the element.",
					"args": [],
					"returnType": "boolean"
				},
				{
					"name": "reportValidity",
					"description": "Return the current validity of the element.\nIf false, fires an invalid event at the element.",
					"args": [],
					"returnType": "boolean"
				}
			],
			"slots": [
				{
					"name": "helper-text",
					"description": "Describes how to use the time-picker. Alternative to the `helper-text` attribute."
				}
			]
		},
		{
			"name": "toggletip",
			"className": "Toggletip",
			"vividModulePath": "libs/components/src/lib/toggletip/toggletip.ts",
			"registerFunctionName": "registerToggletip",
			"description": "",
			"props": [
				{
					"name": "alternate",
					"description": "toggle color scheme",
					"type": "boolean",
					"attributeName": "alternate",
					"propertyName": "alternate"
				},
				{
					"name": "anchor",
					"description": "ID or direct reference to the component's anchor element.",
					"type": "string | HTMLElement",
					"attributeName": "anchor",
					"propertyName": "anchor"
				},
				{
					"name": "headline",
					"description": "the optional title of the toggletip",
					"type": "string",
					"attributeName": "headline",
					"propertyName": "headline"
				},
				{
					"name": "open",
					"description": "indicates whether the toggletip is open",
					"type": "boolean",
					"attributeName": "open",
					"propertyName": "open"
				},
				{
					"name": "placement",
					"description": "placement of the toggletip",
					"type": "'top' | 'right' | 'bottom' | 'left' | 'top-start' | 'top-end' | 'right-start' | 'right-end' | 'bottom-start' | 'bottom-end' | 'left-start' | 'left-end'",
					"attributeName": "placement",
					"propertyName": "placement"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [],
			"methods": [
				{
					"name": "openChanged",
					"args": [
						{ "name": "oldValue", "type": "boolean" },
						{ "name": "newValue", "type": "boolean" }
					],
					"returnType": "void"
				}
			],
			"slots": [
				{
					"name": "action-items",
					"description": "The content to display in the toggletip action items."
				},
				{
					"name": "anchor",
					"description": "Used to set the anchor element for the toggletip."
				},
				{
					"name": "default",
					"description": "The content to display in the toggletip."
				}
			]
		},
		{
			"name": "tooltip",
			"className": "Tooltip",
			"vividModulePath": "libs/components/src/lib/tooltip/tooltip.ts",
			"registerFunctionName": "registerTooltip",
			"description": "",
			"props": [
				{
					"name": "anchor",
					"description": "ID or direct reference to the component's anchor element.",
					"type": "string | HTMLElement",
					"attributeName": "anchor",
					"propertyName": "anchor"
				},
				{
					"name": "open",
					"type": "boolean",
					"attributeName": "open",
					"propertyName": "open"
				},
				{
					"name": "placement",
					"type": "'top' | 'right' | 'bottom' | 'left' | 'top-start' | 'top-end' | 'right-start' | 'right-end' | 'bottom-start' | 'bottom-end' | 'left-start' | 'left-end'",
					"attributeName": "placement",
					"propertyName": "placement"
				},
				{
					"name": "text",
					"description": "the text of the tooltip\naccepts string",
					"type": "string",
					"attributeName": "text",
					"propertyName": "text"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [],
			"methods": [],
			"slots": [
				{
					"name": "anchor",
					"description": "Used to set the anchor element for the tooltip."
				}
			]
		},
		{
			"name": "tree-item",
			"className": "TreeItem",
			"vividModulePath": "libs/components/src/lib/tree-item/tree-item.ts",
			"registerFunctionName": "registerTreeItem",
			"description": "",
			"props": [
				{
					"name": "disabled",
					"description": "When true, the control will be immutable by user interaction. See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled | disabled HTML attribute for more information.",
					"type": "boolean",
					"attributeName": "disabled",
					"propertyName": "disabled"
				},
				{
					"name": "expanded",
					"description": "When true, the control will be appear expanded by user interaction.",
					"type": "boolean",
					"attributeName": "expanded",
					"propertyName": "expanded"
				},
				{
					"name": "icon",
					"description": "A decorative icon the custom element should have.\nSee the Vivid Icon Gallery for available icons: https://icons.vivid.vonage.com/",
					"type": "IconId",
					"attributeName": "icon",
					"propertyName": "icon"
				},
				{
					"name": "selected",
					"description": "When true, the control will appear selected by user interaction.",
					"type": "boolean",
					"attributeName": "selected",
					"propertyName": "selected"
				},
				{
					"name": "text",
					"description": "Indicates the text's text.",
					"type": "string",
					"attributeName": "text",
					"propertyName": "text"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "expanded-change",
					"description": "Fires a custom 'expanded-change' event when the expanded state changes",
					"type": "CustomEvent<HTMLElement>"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				},
				{
					"name": "selected-change",
					"description": "Fires a custom 'selected-change' event when the selected state changes",
					"type": "CustomEvent<HTMLElement>"
				}
			],
			"vueModels": [],
			"methods": [
				{ "name": "expandedChanged", "args": [], "returnType": "void" },
				{ "name": "itemsChanged", "args": [], "returnType": "void" },
				{ "name": "selectedChanged", "args": [], "returnType": "void" }
			],
			"slots": [
				{
					"name": "icon",
					"description": "The preferred way to add an icon to the component."
				},
				{ "name": "item", "description": "To specify a child tree item." }
			]
		},
		{
			"name": "tree-view",
			"className": "TreeView",
			"vividModulePath": "libs/components/src/lib/tree-view/tree-view.ts",
			"registerFunctionName": "registerTreeView",
			"description": "",
			"props": [
				{
					"name": "renderCollapsedNodes",
					"description": "/**\n When true, the control will be appear expanded by user interaction.",
					"type": "boolean",
					"attributeName": "render-collapsed-nodes",
					"propertyName": "renderCollapsedNodes"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				}
			],
			"vueModels": [],
			"methods": [
				{ "name": "slottedTreeItemsChanged", "args": [], "returnType": "void" }
			],
			"slots": [{ "name": "default", "description": "Default slot." }]
		},
		{
			"name": "video-player",
			"className": "VideoPlayer",
			"vividModulePath": "libs/components/src/lib/video-player/video-player.ts",
			"registerFunctionName": "registerVideoPlayer",
			"description": "Base class for video-player",
			"props": [
				{
					"name": "autoplay",
					"description": "Allows the video will play automatically (muted)",
					"type": "boolean",
					"attributeName": "autoplay",
					"propertyName": "autoplay"
				},
				{
					"name": "loop",
					"description": "Allows the video to loop back to the beginning when finished",
					"type": "boolean",
					"attributeName": "loop",
					"propertyName": "loop"
				},
				{
					"name": "playbackRates",
					"description": "Sets the available playback rates. When an empty string, no choices will be available",
					"type": "string",
					"attributeName": "playback-rates",
					"propertyName": "playbackRates"
				},
				{
					"name": "poster",
					"description": "Reference to an image which is displayed before the video is played",
					"type": "string",
					"attributeName": "poster",
					"propertyName": "poster"
				},
				{
					"name": "skipBy",
					"description": "Allows the video to loop back to the beginning when finished",
					"type": "'0' | '5' | '10' | '30'",
					"attributeName": "skip-by",
					"propertyName": "skipBy"
				},
				{
					"name": "src",
					"description": "URL of a video file",
					"type": "string",
					"attributeName": "src",
					"propertyName": "src"
				}
			],
			"events": [
				{
					"name": "blur",
					"description": "Fires when the element loses focus.",
					"type": "FocusEvent"
				},
				{
					"name": "click",
					"description": "Fires when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
					"type": "MouseEvent"
				},
				{
					"name": "ended",
					"description": "Fired when the video is ended",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "focus",
					"description": "Fires when the element receives focus.",
					"type": "FocusEvent"
				},
				{
					"name": "input",
					"description": "Fires when the value of an element has been changed.",
					"type": "Event"
				},
				{
					"name": "keydown",
					"description": "Fires when a key is pressed.",
					"type": "KeyboardEvent"
				},
				{
					"name": "keyup",
					"description": "Fires when a key is released.",
					"type": "KeyboardEvent"
				},
				{
					"name": "pause",
					"description": "Fired when the video is paused",
					"type": "CustomEvent<undefined>"
				},
				{
					"name": "play",
					"description": "Fired when the video is played",
					"type": "CustomEvent<undefined>"
				}
			],
			"vueModels": [],
			"methods": [],
			"slots": [{ "name": "default", "description": "Default slot" }]
		}
	],
	"iconsManifestUrl": "https://icon.resources.vonage.com/v4.6.5/manifest.json"
}
