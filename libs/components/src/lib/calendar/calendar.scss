@use 'partials/variables' as variables;
@use '../../../../../dist/libs/tokens/scss/tokens.constants' as constants;
@use '../../../../../dist/libs/tokens/scss/size.variables' as size;
@use '../../../../shared/src/lib/sass/mixins/border-radius' as
	border-radius-variables;

:host {
	display: block;
	overflow: auto;
	block-size: inherit;
	max-block-size: inherit;
}

ol {
	padding: 0;
	margin: 0;
	list-style: none;
}

[role='grid'i] {
	position: relative;
	z-index: 0;
	display: grid;
	margin: auto;
	grid-template-areas:
		'filler column-headers'
		'row-headers calendar';
	grid-template-columns: min-content auto;
	inline-size: max(100%, 500px);
	min-inline-size: 880px;
}

.row-headers {
	display: grid;
	grid-area: row-headers;
	grid-template-rows: repeat(variables.$total-rows, 1fr);
	margin-inline-end: 2px;
	> [role='rowheader'i] {
		display: flex;
		align-items: flex-end;
		justify-content: flex-end;
		> time {
			font: var(#{constants.$vvd-typography-base-condensed});
			font-size: small;
			line-height: 1;
			text-transform: uppercase;
			white-space: nowrap;
		}
	}

	.sticky-column &,
	.sticky-all & {
		position: sticky;
		z-index: 1;
		background-color: var(
			#{variables.$calendar-column-background-color},
			var(#{constants.$vvd-color-canvas})
		);
		inset-inline-start: 0;
		margin-inline-end: 3px;
	}
}

.calendar-row {
	display: contents;
}

.calendar-grid-presentation {
	display: grid;
	overflow: hidden;
	border-radius: #{border-radius-variables.$border-radius-normal};
	background: var(#{constants.$vvd-color-surface-2dp});
	counter-reset: listing;
	filter: var(#{constants.$vvd-shadow-surface-2dp});
	gap: variables.$gap;
	grid-area: calendar;
	grid-auto-flow: column;
	grid-template: repeat(variables.$total-rows, 1fr) / repeat(
			variables.$total-columns,
			1fr
		);
}

.hours {
	display: contents;
	> [role='listitem'i] {
		position: relative;
		grid-column: 1 / 8;
		grid-row: var(--row);
		min-block-size: #{size.$vvd-size-expanded};
		pointer-events: none;
		&:not(:first-child)::after {
			position: absolute;
			border-block-end: var(#{constants.$vvd-color-neutral-100}) 1px solid;
			content: '';
			inline-size: 100%;
			margin-block-start: -1px;
		}

		@for $i from 1 through variables.$total-rows {
			$current-row: $i;
			&:nth-child(#{variables.$total-rows}n + #{$i}) {
				--row: #{$current-row};
			}
		}
	}
}

[role='gridcell'i] {
	display: grid;
	gap: variables.$gap;
	grid-auto-flow: column;

	// grid-template-rows: repeat(variables.$total-rows * variables.$fraction, 1fr);
}

[role='gridcell'i],
[role='columnheader'i],
[role='columnheader'i] [role='button'i] {
	position: relative;
	&::before {
		position: absolute;
		z-index: -1;
		background-color: var(#{constants.$vvd-color-information-400});
		content: '';
		inset: 0;
	}
	&:focus {
		outline: none;
	}
	&:not(:focus-visible)::before {
		display: none;
	}
}

.columns {
	display: contents;
	> [role='gridcell'i] {
		position: relative;
		grid-column: var(--column);
		grid-row: 1 / #{variables.$total-rows + 1};

		@for $i from 1 through variables.$total-columns {
			&:nth-child(#{$i}) {
				--column: #{$i};
			}
		}
		&:not(:first-child)::after {
			position: absolute;
			block-size: 100%;
			border-inline-end: var(#{constants.$vvd-color-neutral-100}) 1px solid;
			content: '';
			margin-inline-start: -1px;
		}
	}
}

.column-headers {
	display: grid;
	grid-area: column-headers;
	grid-template-columns: repeat(variables.$total-columns, 1fr);
	[role='columnheader'i] {
		h2 {
			display: grid;
			align-items: baseline;
			margin: 0;
			font: var(#{constants.$vvd-typography-heading-4});
			grid-template-columns: 1fr auto 1fr;
			> em {
				font: inherit;
				inline-size: min-content;
				inset-inline-start: 0;
			}
			> small {
				font: var(#{constants.$vvd-typography-base-condensed});
				text-transform: uppercase;
			}
		}
	}

	.sticky-header &,
	.sticky-all & {
		position: sticky;
		z-index: 1;
		background-color: var(
			#{variables.$calendar-header-background-color},
			var(#{constants.$vvd-color-canvas})
		);
		inset-block-start: 0;
		margin-block-end: 3px;
	}
}

.filler {
	background-color: transparent;
	grid-area: filler;

	.sticky-header &,
	.sticky-all & {
		position: sticky;
		z-index: 2;
		background-color: var(
			#{variables.$calendar-header-background-color},
			var(#{constants.$vvd-color-canvas})
		);
		inset-block-start: 0;
		margin-block-end: 3px;
	}
}
