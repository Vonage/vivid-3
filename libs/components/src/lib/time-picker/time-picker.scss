@use "../../../../../dist/libs/tokens/scss/tokens.constants" as constants;
@use "../../../../shared/src/lib/sass/mixins/connotation/config" with (
	$connotations: accent,
	$shades: primary faint soft dim pale,
	$default: accent,
);
@use "../../../../shared/src/lib/sass/mixins/connotation" as connotation;
@use "../../../../shared/src/lib/sass/mixins/appearance/config" as appearance-config with (
	$appearances: listitem,
	$states: idle hover active selected selectedAndHover selectedAndDisabled,
	$default: listitem,
);
@use "../../../../shared/src/lib/sass/mixins/appearance" as appearance;
@use "../../../../shared/src/lib/sass/mixins/border-radius" as border-radius-variables;
@use "../../../../shared/src/lib/sass/mixins/focus" as focus;

:host {
	display: inline-block;
}

.base {
	inline-size: 100%;
}

.control {
	inline-size: 100%;
}

.dialog {
	display: inline-flex;
	flex-direction: column;

	.footer {
		display: flex;
		align-items: center;
		justify-content: flex-end;
		padding: 8px;
		border-top: 1px solid var(#{constants.$vvd-color-neutral-200});
		gap: 8px;
	}
}

.time-pickers {
	$item-inline-size: 50px;
	$item-block-size: 28px;
	$item-gap: 4px;
	$num-items-visible: 6;
	$num-items-to-reserve-space-for: ($num-items-visible - 1);

	@function space-for-items($n) {
		@return $item-block-size * $n + $item-gap * ($n - 1);
	}

	display: flex;
	overflow: hidden;
	padding: $item-gap;
	block-size: space-for-items($num-items-visible);
	gap: $item-gap;

	.picker {
		position: relative;
		display: flex;
		overflow: hidden;
		flex-direction: column;
		padding: 0;
		border-radius: #{border-radius-variables.$border-radius-semi-condensed};
		margin: 0;
		gap: $item-gap;
		inline-size: $item-inline-size;
		list-style: none;

		// Make scrollbar appearance less intrusive
		scrollbar-width: thin;

		// Hide scrollbar when not hovering
		&:hover {
			overflow-y: auto;
		}

		// Reserve space to allow scrolling items to top
		&::after {
			display: block;
			flex-shrink: 0;
			block-size: space-for-items($num-items-to-reserve-space-for);
			content: "";
		}

		&:focus-visible {
			#{focus.$focus-stroke-gap-color}: transparent;
			#{focus.$focus-inset}: -2px;

			@include focus.focus;
		}
	}


	.item {
		@include connotation.connotation (time-picker);
		@include appearance.appearance;

		display: flex;
		flex-shrink: 0;
		align-items: center;
		justify-content: center;
		border-radius: #{border-radius-variables.$border-radius-semi-condensed};
		background-color: var(#{appearance.get-appearance-token(fill)});
		block-size: $item-block-size;
		color: var(#{appearance.get-appearance-token(text)});
		cursor: pointer;
		font: var(#{constants.$vvd-typography-base});
		inline-size: $item-inline-size;
	}
}
