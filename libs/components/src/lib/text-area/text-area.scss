@use '@repo/shared/mixins/focus' as focus;
@use '@repo/shared/mixins/focus' as focus-variables;
@use '@repo/shared/mixins/border-radius' as border-radius-variables;
@use '@repo/tokens/scss/tokens.constants' as constants;
@use '@repo/shared/mixins/connotation/config' with (
	$connotations: accent success alert,
	$shades: primary primary-text primary-increment intermediate firm fierce faint
		soft,
	$default: accent
);
@use '@repo/shared/mixins/connotation' as connotation;
@use '@repo/shared/mixins/appearance/config' as appearance-config with (
	$appearances: fieldset ghost,
	$states: idle hover disabled readonly error success,
	$default: fieldset
);
@use '@repo/shared/mixins/appearance' as appearance;
@use '@repo/tokens/scss/size.variables' as size;
@use '@repo/shared/mixins/scrollbar' as scrollbar;

$low-ink-color: --_low-ink-color;
$outline-width: 2px;

:host {
	display: inline-block;
}

.base {
	@include appearance.appearance;
	@include connotation.connotation(text-area);

	& {
		display: inline-grid;
		grid-template-columns: 1fr max-content;
		inline-size: 100%;
		row-gap: 4px;
	}

	@supports (user-select: none) {
		user-select: none;
	}

	&:not(.disabled) {
		#{$low-ink-color}: var(#{constants.$vvd-color-neutral-600});
	}

	&.disabled {
		#{$low-ink-color}: var(#{appearance.get-appearance-token(text)});
		cursor: not-allowed;
	}
}

.label {
	color: var(#{constants.$vvd-color-canvas-text});
	contain: inline-size;
	font: var(#{constants.$vvd-typography-base});
	grid-column: 1 / 2;
	grid-row: 1;
	line-height: 20px;
}

.char-count {
	color: var(#{$low-ink-color});
	font: var(#{constants.$vvd-typography-base});
	grid-column: 2 / -1;
}

.control {
	@include scrollbar.scrollbar;

	& {
		box-sizing: border-box;
		padding: 8px 16px;
		border: 0 none;
		border-radius: #{border-radius-variables.$border-radius-normal};
		appearance: none; /* for box-shadow visibility on IOS */
		background-color: var(#{appearance.get-appearance-token(fill)});
		box-shadow: inset 0 0 0 1px var(#{appearance.get-appearance-token(outline)});
		color: var(#{appearance.get-appearance-token(text)});
		font: var(#{constants.$vvd-typography-base});
		grid-column: 1 / -1;
		min-block-size: #{size.$vvd-size-condensed};
		resize: none;
		transition: box-shadow 0.2s, background-color 0.2s, color 0.2s;
	}

	@supports selector(::-webkit-resizer) {
		&::-webkit-resizer {
			$resizer-size: 10px;

			background-image: linear-gradient(
				315deg,
				transparent 0,
				transparent 2px,
				var(#{constants.$vvd-color-canvas-text}) 2px,
				var(#{constants.$vvd-color-canvas-text}) 3px,
				transparent 3px,
				transparent 5px,
				var(#{constants.$vvd-color-canvas-text}) 5px,
				var(#{constants.$vvd-color-canvas-text}) 6px,
				transparent 6px,
				transparent 8px,
				transparent 100%
			);
			background-repeat: no-repeat;
			background-size: $resizer-size $resizer-size;
			block-size: $resizer-size;
			inline-size: $resizer-size;
		}
	}

	&:disabled {
		opacity: 1; /* 2. correct opacity on iOS */
		pointer-events: none;
		-webkit-text-fill-color: var(
			#{appearance.get-appearance-token(text)}
		); /* 1. sets text fill to current `color` for safari */
	}

	&::placeholder,
	&:disabled::placeholder {
		opacity: 1; /* 2. correct opacity on iOS */
		pointer-events: none;
		-webkit-text-fill-color: var(
			#{$low-ink-color}
		); /* 1. sets text fill to current `color` for safari */
	}

	&:focus-visible {
		#{focus-variables.$focus-stroke-gap-color}: transparent;

		@include focus.focus;
	}

	:host([resize='both']) & {
		resize: both;
	}

	:host([resize='horizontal']) & {
		resize: horizontal;
	}

	:host([resize='vertical']) & {
		resize: vertical;
	}
}
