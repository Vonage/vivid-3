@use "../../../../../dist/libs/tokens/scss/tokens.constants" as constants;
@use "partials/variables" as variables;
@use "partials/mixins" as mixins;
@use "../focus/partials/variables" as focus-variables;

@use "../../../../shared/src/lib/sass/mixins/connotation/config" with (
	$connotations: accent cta,
	$shades: primary primary-text primary-increment contrast fierce firm soft faint,
	$default: accent
);
@use "../../../../shared/src/lib/sass/mixins/connotation" as connotation;

@use "../../../../shared/src/lib/sass/mixins/appearance/config" as appearance-config with (
	$appearances: filled outlined ghost,
	$states: idle hover disabled active,
	$default: ghost
);
@use "../../../../shared/src/lib/sass/mixins/appearance" as appearance;
@use "../../../../../dist/libs/tokens/scss/size.variables" as size;

:host {
	display: inline-block;
}

.base {
	display: inline-flex;
	justify-content: flex-start;
	inline-size: inherit;
}


.control,
.indicator {
	@include connotation.connotation(split-button);
	@include appearance.appearance;

	position: relative;
	flex-shrink: 0;
	display: inline-flex;
	box-sizing: border-box;
	align-items: center;
	justify-content: center;
	border: 0 none;
	margin: 0;
	padding: 0;
	background-color: var(#{appearance.get-appearance-token(fill)});
	block-size: var(#{variables.$block-size});
	color: var(#{appearance.get-appearance-token(text)});
	gap: var(#{variables.$icon-gap}); //only control
	//only control flex:1;
	vertical-align: middle;

	&:focus-visible {
		outline: none;
	}

	@supports (user-select: none) {
		user-select: none;
	}

	/* Disabled */
	&:not(:disabled) {
		cursor: pointer;
	}

	&:disabled {
		cursor: not-allowed;
	}
}

/* Shape */
.control {
	&:not(.shape-pill) {
		border-radius: 6px 0 0 6px;
	}

	&.shape-pill {
		border-radius: 24px 0 0 24px;
	}
}

.indicator {
	&:not(.shape-pill) {
		border-radius: 0 6px 6px 0;
	}

	&.shape-pill {
		border-radius: 0 24px 24px 0;
	}
}

.control{

	&.icon-only {
		contain: size;
		//padding-inline: 0;
		place-content: center;
		@supports (aspect-ratio: 1) {
			aspect-ratio: 1;
		}
		@supports not (aspect-ratio: 1) {
			inline-size: var(#{variables.$block-size});
		}
	}

	&:not(.icon-only) {
		inline-size: inherit;
		flex-grow: 1;
	}

	&::before {
		content: "";
		position: absolute;
		display: block;
		block-size: 100%;
		box-shadow: inset 0 0 0 1px var(#{appearance.get-appearance-token(outline)});
		z-index: 1;
		top: 0px;
		left: 0px;
		border-radius: 6px;
		pointer-events: none;
	}

	&.size-super-condensed {
		@include mixins.get-size-properties(#{size.$vvd-size-super-condensed}, #{constants.$vvd-typography-base-condensed-bold}, 4px, 8px);
		&::before {
			inline-size: calc(100% + #{size.$vvd-size-super-condensed});
		}
	}
	&.size-condensed {
		@include mixins.get-size-properties(#{size.$vvd-size-condensed}, #{constants.$vvd-typography-base-condensed-bold}, 8px, 12px);
		&::before {
			inline-size: calc(100% + #{size.$vvd-size-extra-condensed});
		}
	}
	&.size-expanded {
		@include mixins.get-size-properties(#{size.$vvd-size-expanded}, #{constants.$vvd-typography-base-extended-bold}, 10px, 20px);
		&::before {
			inline-size: calc(100% + #{size.$vvd-size-semi-expanded});
		}
	}
	&:not(.size-condensed, .size-expanded, .size-super-condensed) {
		@include mixins.get-size-properties(#{size.$vvd-size-normal}, #{constants.$vvd-typography-base-bold}, 8px, 16px);
		&::before {
			inline-size: calc(100% + #{size.$vvd-size-condensed});
		}
	}
}

.indicator {
	inline-size: calc(var(#{variables.$inline-size}) + 1px);

	&::before {
		content: "";
		inline-size: 1px;
		background-color: var(#{appearance.get-appearance-token(text)});
		inset-inline-start: 0;
		position: absolute;
		opacity: 0.35;
	}

	&:not(.appearance-filled, .appearance-outlined) {
		&::before {
			block-size: 50%;
		}
	}

	&:is(.appearance-filled, .appearance-outlined){
		&::before {
			block-size: 100%;
		}
	}


	&.size-super-condensed {
		@include mixins.get-size-properties-indicator(#{size.$vvd-size-super-condensed}, #{constants.$vvd-typography-base-condensed}, #{size.$vvd-size-super-condensed});
	}
	&.size-condensed {
		@include mixins.get-size-properties-indicator(#{size.$vvd-size-condensed}, #{constants.$vvd-typography-base-condensed}, #{size.$vvd-size-extra-condensed});
	}
	&.size-expanded {
		@include mixins.get-size-properties-indicator(#{size.$vvd-size-expanded}, #{constants.$vvd-typography-base-extended}, #{size.$vvd-size-normal});
	}
	&:not(.size-condensed, .size-expanded, .size-super-condensed) {
		@include mixins.get-size-properties-indicator(#{size.$vvd-size-normal}, #{constants.$vvd-typography-base-extended}, #{size.$vvd-size-condensed});
	}
}

.text {
	overflow: hidden;
	max-inline-size: 100%;
	text-overflow: ellipsis;
	white-space: nowrap;
}


/* Icon */
.icon {
	line-height: 1;

	.icon-trailing & {
		order: 1;
	}

	.control > & {
		font-size: calc(var(#{variables.$block-size}) / 2);
	}
}

/* Focus */
.focus-indicator {
	:not(:focus-visible) > & {
		display: none;
	}

	.control:not(.appearance-filled) &,
	.indicator:not(.appearance-filled) & {
		#{focus-variables.$focus-stroke-gap-color}: transparent;
	}
}

