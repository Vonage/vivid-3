@use 'sass:map';
@use '../../../../../dist/libs/tokens/scss/tokens.constants' as constants;
@use 'partials/variables' as variables;
@use 'partials/mixins' as mixins;
@use '../../../../shared/src/lib/sass/mixins/focus' as focus;
@use '../../../../shared/src/lib/sass/mixins/focus' as focus-variables;
@use '../../../../shared/src/lib/sass/mixins/connotation/config' with (
	$connotations: accent cta success alert announcement,
	$shades: primary primary-text primary-increment contrast fierce firm soft
		faint,
	$default: accent
);
@use '../../../../shared/src/lib/sass/mixins/connotation' as connotation;
@use '../../../../shared/src/lib/sass/mixins/appearance/config' as
	appearance-config with (
	$appearances: filled outlined ghost,
	$states: idle hover disabled active,
	$default: ghost
);
@use '../../../../shared/src/lib/sass/mixins/appearance' as appearance;
@use '../../../../../dist/libs/tokens/scss/size.variables' as size;
@use '../../../../shared/src/lib/sass/mixins/border-radius' as
	border-radius-variables;
@include connotation.variables-backwards-compatibility(
	'split-button',
	':where(.control, .indicator):not(.appearance-filled, .appearance-outlined)'
);

:host {
	display: inline-block;
}

.base {
	display: inline-flex;
	justify-content: flex-start;
	inline-size: inherit;
}

.control,
.indicator {
	@include connotation.connotation(split-button);
	@include appearance.appearance(
		appearance.state-selectors(
			map.merge(
				appearance.$state-aspect-selectors,
				(
					active: ':active, [aria-expanded="true"]',
				)
			)
		)
	);

	display: inline-flex;
	box-sizing: border-box;
	flex-shrink: 0;
	align-items: center;
	justify-content: center;
	padding: 0;
	border: 1px solid var(#{appearance.get-appearance-token(outline)});
	margin: 0;
	background-color: var(#{appearance.get-appearance-token(fill)});
	block-size: var(#{variables.$block-size});
	color: var(#{appearance.get-appearance-token(text)});
	vertical-align: middle;

	@supports (user-select: none) {
		user-select: none;
	}
}

.control {
	border-bottom-left-radius: var(#{variables.$border-radius});
	border-inline-end: 0;
	border-top-left-radius: var(#{variables.$border-radius});
	gap: var(#{variables.$icon-gap});

	&:not(.appearance-filled) {
		#{focus-variables.$focus-stroke-gap-color}: transparent;
	}

	&.appearance-outlined {
		#{focus-variables.$focus-inset}: -1px;
	}

	&:focus-visible {
		@include focus.focus;
	}

	/* Disabled */
	&:not(:disabled) {
		cursor: pointer;
	}

	&:disabled {
		cursor: not-allowed;
	}

	&.icon-only {
		contain: size;
		place-content: center;

		@supports (aspect-ratio: 1) {
			aspect-ratio: 1;
		}

		@supports not (aspect-ratio: 1) {
			inline-size: var(#{variables.$block-size});
		}
	}

	&:not(.icon-only) {
		flex-grow: 1;
		inline-size: inherit;
	}

	/* size */
	&.size-super-condensed {
		@include mixins.get-size-properties(
			#{size.$vvd-size-super-condensed},
			#{constants.$vvd-typography-base-condensed-bold},
			4px,
			8px
		);
	}
	&.size-condensed {
		@include mixins.get-size-properties(
			#{size.$vvd-size-condensed},
			#{constants.$vvd-typography-base-condensed-bold},
			8px,
			12px
		);
	}
	&.size-expanded {
		@include mixins.get-size-properties(
			#{size.$vvd-size-expanded},
			#{constants.$vvd-typography-base-extended-bold},
			10px,
			20px
		);
	}
	&:not(.size-condensed, .size-expanded, .size-super-condensed) {
		@include mixins.get-size-properties(
			#{size.$vvd-size-normal},
			#{constants.$vvd-typography-base-bold},
			8px,
			16px
		);
	}

	/* shape */
	&:not(.shape-pill) {
		#{variables.$border-radius}: #{border-radius-variables.$border-radius-normal};

		&.size-super-condensed,
		&.super-condensed {
			#{variables.$border-radius}: #{border-radius-variables.$border-radius-semi-condensed};
		}
	}

	&.shape-pill {
		#{variables.$border-radius}: #{border-radius-variables.$border-radius-extra-expanded};
	}

	.text {
		overflow: hidden;
		max-inline-size: 100%;
		text-overflow: ellipsis;
		white-space: nowrap;
	}
}

.indicator {
	position: relative;
	border-bottom-right-radius: var(#{variables.$border-radius});
	border-inline-start: 0;
	border-top-right-radius: var(#{variables.$border-radius});
	inline-size: var(#{variables.$inline-size});
	isolation: isolate;

	&:not(.appearance-filled) {
		#{focus-variables.$focus-stroke-gap-color}: transparent;
	}

	&.appearance-outlined {
		#{focus-variables.$focus-inset}: 1px;
	}

	&:focus-visible {
		@include focus.focus;
	}

	/* Disabled */
	&:not(:disabled) {
		cursor: pointer;
	}

	&:disabled {
		cursor: not-allowed;
	}

	/* Separator */
	&::before {
		position: absolute;
		background-color: var(#{appearance.get-appearance-token(text)});
		content: '';
		inline-size: 1px;
		inset-inline-start: 0;
		opacity: 0.35;
	}

	&:not(.appearance-filled, .appearance-outlined) {
		&::before {
			block-size: 50%;
		}
	}

	&:is(.appearance-filled, .appearance-outlined) {
		&::before {
			block-size: 100%;
		}
	}

	/* size */
	&.size-super-condensed {
		@include mixins.get-size-properties-indicator(
			#{size.$vvd-size-super-condensed},
			#{constants.$vvd-typography-base-condensed},
			#{size.$vvd-size-super-condensed}
		);
	}
	&.size-condensed {
		@include mixins.get-size-properties-indicator(
			#{size.$vvd-size-condensed},
			#{constants.$vvd-typography-base-condensed},
			#{size.$vvd-size-extra-condensed}
		);
	}
	&.size-expanded {
		@include mixins.get-size-properties-indicator(
			#{size.$vvd-size-expanded},
			#{constants.$vvd-typography-base-extended},
			#{size.$vvd-size-normal}
		);
	}
	&:not(.size-condensed, .size-expanded, .size-super-condensed) {
		@include mixins.get-size-properties-indicator(
			#{size.$vvd-size-normal},
			#{constants.$vvd-typography-base-extended},
			#{size.$vvd-size-condensed}
		);
	}

	/* Shape */
	&:not(.shape-pill) {
		#{variables.$border-radius}: #{border-radius-variables.$border-radius-normal};

		&.size-super-condensed,
		&.super-condensed {
			#{variables.$border-radius}: #{border-radius-variables.$border-radius-semi-condensed};
		}
	}

	&.shape-pill {
		#{variables.$border-radius}: #{border-radius-variables.$border-radius-extra-expanded};
	}
}

/* Icon */
.icon {
	line-height: 1;

	.icon-trailing & {
		order: 1;
	}

	.control > & {
		font-size: calc(var(#{variables.$block-size}) / 2);
	}
}
