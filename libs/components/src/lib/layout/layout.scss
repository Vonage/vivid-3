@use 'sass:map';
@use 'partials/variables' as variables;
@use 'partials/mixins' as mixins;
@use 'partials/functions' as functions;

.control {
	display: grid;
	grid-auto-rows: var(#{variables.$layout-grid-template-rows}, min-content);

	@include mixins.measurement(map.keys(variables.$bases)...) using ($basis) {
		#{functions.get-selector-with-default('.column-basis', $basis, 'medium', map.keys(variables.$bases))} {
			grid-template-columns: var(
				#{variables.$layout-grid-template-columns},
				repeat(
					var(#{variables.$auto-sizing}),
					minmax(map.get(variables.$bases, $basis), 1fr)
				)
			);
		}
	}

	@include mixins.measurement(map.keys(variables.$spaces)...) using ($space) {
		#{functions.get-selector-with-default('.column-spacing', $space, 'medium', map.keys(variables.$spaces))} {
			column-gap: var(
				#{variables.$layout-column-gap},
				map.get(variables.$spaces, $space)
			);
		}
	}

	@include mixins.measurement(map.keys(variables.$spaces)...) using ($space) {
		#{functions.get-selector-with-default('.row-spacing', $space, 'medium', map.keys(variables.$spaces))} {
			row-gap: var(
				#{variables.$layout-row-gap},
				map.get(variables.$spaces, $space)
			);
		}
	}

	@include mixins.measurement(map.keys(variables.$spaces)...) using ($space) {
		&.gutters-#{$space} {
			margin: map.get(variables.$spaces, $space);
		}
	}

	@include mixins.measurement(map.keys(variables.$auto-sizes)...) using ($size) {
		#{functions.get-selector-with-default('.auto-sizing', $size, fit, map.keys(variables.$auto-sizes))} {
			#{variables.$auto-sizing}: map.get(variables.$auto-sizes, $size);
		}
	}
}
