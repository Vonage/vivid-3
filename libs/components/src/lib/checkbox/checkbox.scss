@use '@repo/shared/mixins/focus' as focus;
@use '@repo/shared/mixins/focus' as focus-variables;
@use '@repo/tokens/scss/tokens.constants' as constants;
@use '@repo/shared/mixins/connotation/config' with (
	$connotations: accent cta,
	$shades: primary primary-text primary-increment fierce intermediate firm,
	$default: accent
);
@use '@repo/shared/mixins/connotation' as connotation;
@use '@repo/shared/mixins/appearance/config' as appearance-config with (
	$appearances: fieldset,
	$states: idle hover checked checked-hover disabled readonly,
	$default: fieldset
);
@use '@repo/shared/mixins/appearance' as appearance;
@use '@repo/tokens/scss/size.variables' as size;
@use '@repo/shared/mixins/border-radius' as border-radius-variables;

$low-ink-color: --_low-ink-color;
$size: #{size.$vvd-size-ultra-condensed};
$gutter: 2px;

:host {
	display: inline-flex;
	flex-direction: column;
	gap: 4px;
	vertical-align: middle;
	#{$low-ink-color}: var(#{constants.$vvd-color-neutral-600});
}
:host([disabled]) {
	cursor: not-allowed;
}

.base {
	@include connotation.connotation(checkbox);
	@include appearance.appearance;

	& {
		display: inline-flex;
		align-items: center;
		gap: 8px;
		vertical-align: middle;
	}

	&:focus-visible {
		outline: none;
	}

	@supports (user-select: none) {
		user-select: none;
	}

	&:not(.disabled) {
		cursor: pointer;
	}

	&.disabled {
		pointer-events: none;
	}
}

.control {
	position: relative;
	display: flex;
	flex-shrink: 0;
	align-items: center;
	justify-content: center;
	border-radius: #{border-radius-variables.$border-radius-semi-condensed};
	background-color: var(#{appearance.get-appearance-token(fill)});
	block-size: $size;
	box-shadow: inset 0 0 0 2px var(#{appearance.get-appearance-token(outline)});
	color: var(#{appearance.get-appearance-token(text)});
	inline-size: $size;

	.base:focus-visible & {
		#{focus-variables.$focus-stroke-gap-color}: transparent;

		&::after {
			@include focus.focus-in-pseudo-element;
		}
	}

	.base.error:not(.checked) & {
		background-color: var(#{constants.$vvd-color-canvas});
		box-shadow: inset 0 0 0 2px var(#{constants.$vvd-color-alert-500});
	}
}

.indicator {
	font-size: calc($size - $gutter * 2);

	@at-root .base:not(.checked) #{&}.checkmark {
		display: none;
	}

	&.minus {
		@at-root .base.checked &,
			.base:not(.indeterminate) & {
			display: none;
		}
	}
}

label {
	display: flex;
	flex-wrap: wrap;
	align-items: center;
	color: var(#{constants.$vvd-color-canvas-text});
	column-gap: 4px;
	cursor: pointer;
	font: var(#{constants.$vvd-typography-base});

	.hide-label & {
		display: none;
	}
}

.icon {
	font-size: calc(#{$size} * 0.6);
	line-height: 1;
}
