@use '../focus/partials/variables' as focus-variables;

@use '../../../../shared/src/lib/sass/mixins/typography' as typography;
@use '../../../../../node_modules/@vonage/vivid-tokens/dist/sass/themes/consts' as theme-consts;
@use '../../../../shared/src/lib/sass/mixins/appearance/config' as appearance-config with (
	$appearances: fieldset ghost,
	$states: idle hover disabled readonly error,
	$default: fieldset,
);
@use '../../../../shared/src/lib/sass/mixins/appearance' as appearance;

$low-ink-color: --_low-ink-color;

:host {
	display: inline-block;
}

.base {
	// due to the fact :user-invalid proposal isn't supported by browsers yet,
	// we apply appearance here instead of the input element itself.
	// input element :invalid state isn't enough as our spec awaits user interaction
	// before showing the error.
	@include appearance.appearance;

	display: inline-grid;
	width: 100%;
	gap: 4px;
	grid-template-columns: min-content 1fr max-content;

	@supports(user-select: none) {
		user-select: none;
	}

	&:not(.disabled) {
		#{$low-ink-color}: var(#{theme-consts.$vvd-color-neutral-70});
	}

	&.disabled {
		#{$low-ink-color}: var(#{theme-consts.$vvd-color-neutral-50});
	}
}

.label {
	@include typography.typography-cat-shorthand('body-2');

	contain: inline-size;
	grid-column: 1 / 4;
	grid-row: 1;

	.char-count+& {
		grid-column: 1 / 3;
	}

	.base:not(.disabled) & {
		color: var(#{theme-consts.$vvd-color-on-canvas});
	}

	.base.disabled & {
		color: var(#{theme-consts.$vvd-color-neutral-50});
	}
}

.char-count {
	@include typography.typography-cat-shorthand('body-2');

	color: var(#{$low-ink-color});
	grid-column: 3 / 4;
}

.fieldset {
	position: relative;
	display: flex;
	align-items: center;
	color: var(#{appearance.get-appearance-token(text)});
	grid-column: 1 / 4;
	transition: color .2s;

	/* Size */
	.base:not(.density-extended)>& {
		block-size: 40px;
	}

	.base.density-extended>& {
		block-size: 48px;
	}

	/* Shape */
	.base:not(.shape-pill) & {
		border-radius: 6px;
	}

	.base.shape-pill & {
		border-radius: 24px;
	}

}

.control {
	// ! note: control is required to stretch fully so that
	// ! autofill indication applies on all fieldset area
	@include typography.typography-cat-shorthand('body-2');

	width: 100%;
	border: 0 none;
	background-color: var(#{appearance.get-appearance-token(fill)});
	block-size: 100%;
	border-radius: inherit;
	box-shadow: inset 0 0 0 1px var(#{appearance.get-appearance-token(outline)});
	color: inherit;
	outline: 0 none;
	padding-inline-end: 16px;
	padding-inline-start: 16px;
	transition: box-shadow .2s, background-color .2s;

	&::placeholder {
		color: var(#{$low-ink-color});
	}
}

.icon {
	// to avoid autofill style hiding other elements
	position: absolute;
	z-index: 1;
	color: var(#{$low-ink-color});
	inset-inline-start: 16px;

	+.control {
		padding-inline-start: 44px;
	}
}

.helper-text {
	@include typography.typography-cat-shorthand('caption');

	color: var(#{$low-ink-color});
	grid-column: 1 / 4;
	margin-inline-start: 16px;
}

.error-message {
	@include typography.typography-cat-shorthand('caption');

	display: flex;
	color: var(#{theme-consts.$vvd-color-on-canvas});
	contain: inline-size;
	grid-column: 2 / 4;

	&-icon {
		color: var(#{theme-consts.$vvd-color-alert});
		font-size: 16px;
		grid-column: 1 / 2;
	}
}

.focus-indicator {
	#{focus-variables.$focus-stroke-gap-color}: transparent;

	pointer-events: none;

	.fieldset:not(:focus-visible, :focus-within) > & {
		display: none;
	}
}
