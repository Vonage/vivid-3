@use 'partials/variables' as variables;
@use '@repo/shared/mixins/border-radius' as border-radius-variables;
@use '@repo/shared/mixins/focus' as focus;
@use '@repo/shared/mixins/focus' as focus-variables;
@use '@repo/tokens/scss/tokens.constants' as constants;
@use '@repo/shared/mixins/connotation/config' with (
	$connotations: accent,
	$shades: primary primary-text primary-increment intermediate firm fierce faint
		soft,
	$default: accent
);
@use '@repo/shared/mixins/connotation' as connotation;
@use '@repo/shared/mixins/appearance/config' as appearance-config with (
	$appearances: fieldset ghost,
	$states: idle hover disabled readonly error success,
	$default: fieldset
);
@use '@repo/shared/mixins/appearance' as appearance;
@use '@repo/tokens/scss/size.variables' as size;
@use '../../shared/patterns/form-elements/with-contextual-help' as
	contextual-help;

$low-ink-color: --_low-ink-color;

:host {
	display: inline-block;
}

.base {
	// due to the fact :user-invalid proposal isn't supported by browsers yet,
	// we apply appearance here instead of the input element itself.
	// input element :invalid state isn't enough as our spec awaits user interaction
	// before showing the error.
	@include appearance.appearance;
	@include connotation.connotation(text-field);

	& {
		#{variables.$text-field-gutter-start}: calc(
			#{size.$vvd-size-normal} / 2.5
		); // default of 16px
		#{variables.$text-field-gutter-end}: calc(
			#{size.$vvd-size-normal} / 2.5
		); // default of 16px
		#{variables.$text-field-icon-size}: calc(
			#{size.$vvd-size-normal} / 2
		); // default of 20px
		#{variables.$text-field-block-size}: #{size.$vvd-size-normal};
		#{variables.$text-field-border-radius}: #{border-radius-variables.$border-radius-normal};
		#{variables.$text-field-pill-border-radius}: #{border-radius-variables.$border-radius-extra-expanded};

		display: inline-grid;
		width: 100%;
		align-items: center;
		gap: 4px;
		grid-template-columns: min-content 1fr max-content;
	}

	&.size-condensed {
		#{variables.$text-field-gutter-start}: calc(
			#{size.$vvd-size-super-condensed} / 2
		); // default of 12px
		#{variables.$text-field-gutter-end}: calc(
			#{size.$vvd-size-super-condensed} / 2
		); // default of 12px
		#{variables.$text-field-icon-size}: calc(
			#{size.$vvd-size-condensed} / 2
		); // default of 16px
		#{variables.$text-field-block-size}: #{size.$vvd-size-condensed};
		#{variables.$text-field-border-radius}: #{border-radius-variables.$border-radius-semi-condensed};
	}

	@supports (user-select: none) {
		user-select: none;
	}

	&:not(.disabled) {
		#{$low-ink-color}: var(#{constants.$vvd-color-neutral-600});
	}

	&.disabled {
		#{$low-ink-color}: var(#{appearance.get-appearance-token(text)});
	}
}

.label:not(slot),
.label::slotted(label) {
	/* As label is in light dom, use !important and initial to prevent values getting overridden by global CSS resets etc. */
	box-sizing: initial !important;
	padding: initial !important;
	margin: initial !important;
	color: var(#{constants.$vvd-color-canvas-text}) !important;
	contain: inline-size !important;
	font: var(#{constants.$vvd-typography-base});
	grid-column: 1 / 4;
	grid-row: 1;

	.char-count + & {
		grid-column: 1 / 3;
	}
}

.char-count {
	color: var(#{$low-ink-color});
	font: var(#{constants.$vvd-typography-base});
}

.fieldset {
	position: relative;
	display: flex;
	align-items: center;
	background-color: var(#{appearance.get-appearance-token(fill)});
	font: var(#{constants.$vvd-typography-base});
	grid-column: 1 / 4;
	padding-block: 0;
	transition: color 0.2s, background-color 0.2s;

	&::after {
		position: absolute;
		display: block;
		border-radius: inherit;
		block-size: 100%;
		box-shadow: inset 0 0 0 1px var(#{appearance.get-appearance-token(outline)});
		content: '';
		inline-size: 100%;
		pointer-events: none;
		transition: box-shadow 0.2s;
	}

	&:focus-visible {
		outline: none;
	}

	.base > & {
		block-size: var(#{variables.$text-field-block-size});
	}

	/* Shape */
	.base:not(.shape-pill) & {
		border-radius: var(#{variables.$text-field-border-radius});
	}

	.base.shape-pill & {
		border-radius: var(#{variables.$text-field-pill-border-radius});
	}
}

.wrapper {
	border-radius: inherit;
	block-size: 100%;
	inline-size: 100%;
}

.control {
	border-radius: inherit;
	text-align: start;

	&:not(slot),
	&::slotted(input) {
		/* As input is in light dom, use !important and initial to prevent values getting overridden by global CSS resets etc. */
		// ! note: input is required to stretch fully so that
		// ! autofill indication applies on all fieldset area
		width: 100% !important;
		box-sizing: border-box !important;
		border: 0 none !important;
		border-radius: inherit !important;
		margin: initial !important;
		appearance: none !important; /* for box-shadow visibility on IOS */
		background-color: transparent !important;
		block-size: 100% !important;
		color: inherit !important;
		font: inherit;
		outline: transparent;
		padding-block: 0 !important;
		padding-inline: var(#{variables.$text-field-gutter-start})
			var(#{variables.$text-field-gutter-end}) !important;
		text-align: inherit;
	}

	&:not(slot):disabled,
	&::slotted(input:disabled) {
		cursor: not-allowed !important;
		opacity: 1 !important; /* 2. correct opacity on iOS */
		-webkit-text-fill-color: var(
			#{appearance.get-appearance-token(text)}
		) !important; /* 1. sets text fill to current `color` for safari */
	}

	// &::slotted(input)::placeholder - not working in safari, see workaround in text-field.ts
	&:not(slot)::placeholder {
		opacity: 1 !important; /* 2. correct opacity on iOS */
		-webkit-text-fill-color: var(
			#{$low-ink-color}
		) !important; /* 1. sets text fill to current `color` for safari */
	}

	&::slotted(input:-webkit-autofill),
	&:not(slot):-webkit-autofill {
		/* stylelint-disable */
		-webkit-box-shadow: 0 0 0 1000px
			var(#{appearance.get-appearance-token(fill)}) inset;
		-webkit-text-fill-color: var(
			#{appearance.get-appearance-token(text)}
		) !important;
		/* stylelint-enable */
	}

	.has-icon &:not(slot),
	.has-icon &::slotted(input) {
		padding-inline-start: calc(
			var(#{variables.$text-field-icon-size}) +
				var(#{variables.$text-field-gutter-start}) * 2
		) !important;
	}
}

.icon {
	// to avoid autofill style hiding other elements
	position: absolute;
	z-index: 1;
	color: var(#{$low-ink-color});
	font-size: var(#{variables.$text-field-icon-size});
	inset-block-start: 50%;
	inset-inline-start: calc(100% + var(#{variables.$text-field-gutter-start}));
	line-height: 1;
	transform: translateY(-50%);
}

.leading-items-wrapper {
	position: relative;

	.base.no-leading & {
		display: none;
	}
}

.action-items-wrapper {
	margin-inline-end: 4px;

	.base:not(.action-items) & {
		display: none;
	}
}

/* focus */

@supports selector(:has(*)) {
	.base:not(.has-activedescendant)
		.fieldset:has(.wrapper .control:focus-within)::after {
		#{focus-variables.$focus-stroke-gap-color}: transparent;

		@include focus.focus;
	}
}

@supports not selector(:has(*)) {
	.base:not(.has-activedescendant) .wrapper:focus-within::after {
		@include focus.focus;
		#{focus-variables.$focus-stroke-gap-color}: transparent;

		position: absolute;
		z-index: 1;
		display: block;
		border-radius: inherit;
		content: '';
		inset: 0;
		pointer-events: none;
	}
}

/* Customize for Dial-pad */
:host([internal-part]) {
	.fieldset {
		background-color: transparent;
		font: var(#{constants.$vvd-typography-heading-4});
		line-height: 1.1;

		&:not(:focus-within) {
			&::after {
				block-size: 1px;
				inset-block-end: 0;
			}
		}

		@supports selector(:has(*)) {
			&:has(.action-items-wrapper:focus-within) {
				&::after {
					block-size: 1px;
					inset-block-end: 0;
				}
			}
		}
	}

	.control {
		text-align: center;
	}
}

slot[name='_mirrored-helper-text'] {
	display: none;
}

@include contextual-help.label-suffix;
