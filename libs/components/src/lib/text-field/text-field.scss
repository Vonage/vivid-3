@use '../focus/partials/variables' as focus-variables;

@use '../../../../shared/src/lib/sass/mixins/typography' as typography;
@use '../../../../../node_modules/@vonage/vivid-tokens/dist/sass/themes/consts' as theme-consts;

@use '../../../../shared/src/lib/sass/mixins/connotation/config' with (
	$connotations: primary,
	$default: primary,
);
@use '../../../../shared/src/lib/sass/mixins/connotation' as connotation;

@use '../../../../shared/src/lib/sass/mixins/appearance/config' as appearance-config with (
	$appearances: fieldset ghost,
	$states: idle hover disabled invalid,
	$default: fieldset,
);
@use '../../../../shared/src/lib/sass/mixins/appearance' as appearance;


.base {
	@include connotation.connotation;
  // due to the fact :user-invalid proposal isn't supported by browsers yet,
  // we apply appearance here instead of the input element itself.
  // input element :invalid state isn't enough as our spec awaits user interaction
  // before showing the error.
	@include appearance.appearance;

	display: grid;
	gap: 4px;
	grid-template-columns: min-content 1fr max-content;
}

.label {
	@include typography.typography-cat-shorthand('body-2');
	color: var(#{theme-consts.$vvd-color-on-canvas});
	grid-column: 1 / 4;
	grid-row: 1;
}

.char-count {
	@include typography.typography-cat-shorthand('body-2');

	color: var(#{theme-consts.$vvd-color-neutral-70});
	grid-column: 3 / 4;
	+ .label {
		grid-column: 1 / 3;
	}
}

.fieldset {
	position: relative;
	display: flex;
	align-items: center;
	contain: strict;
	grid-column: 1 / 4;
	padding-inline: 16px;
	transition: color .2s, box-shadow .2s, background-color .2s;
  background-color: var(#{appearance.get-variable(fill)});
	box-shadow: inset 0 0 0 1px var(#{appearance.get-variable(outline)});
	color: var(#{appearance.get-variable(text)});

	/* Size */
	.base:not(.density-extended) > & {
		block-size: 40px;
	}

	.base.density-extended > & {
		block-size: 48px;
	}

	/* Shape */
	.base:not(.shape-pill) & {
		border-radius: 6px;
	}
	.base.shape-pill & {
		border-radius: 24px;
	}

}

.control {
	@include typography.typography-cat-shorthand('body-2');

	// required to stretch fully so autofill indication applies on all fieldset region
	position: absolute;
	padding: 1px;
	border: 0 none;
	border-radius: inherit;
	inset: 0;
	outline: 0 none;
	padding-inline-start: 16px;
  background-color: unset;

	&::placeholder {
		color: var(#{theme-consts.$vvd-color-neutral-70});
	}
}

.icon {
	// to avoid autofill style hiding other elements
	position: relative;
	z-index: 1;

	+ .control {
		padding-inline-start: 44px;
	}
}

.helper-text {
	@include typography.typography-cat-shorthand('caption');
	color: var(#{theme-consts.$vvd-color-neutral-70});
	grid-column: 1 / 4;
	margin-inline-start: 16px;
}

.error-message {
	@include typography.typography-cat-shorthand('caption');

	color: var(#{theme-consts.$vvd-color-on-canvas});
	display: flex;
	grid-column: 2 / 4;

	&-icon {
		color: var(#{theme-consts.$vvd-color-alert});
		font-size: 16px;
		grid-column: 1 / 2;
	}
}

.focus-indicator {
	#{focus-variables.$focus-stroke-gap-color}: transparent;
  pointer-events: none;

	.fieldset:not(:focus-within) > & {
		display: none;
	}

}
