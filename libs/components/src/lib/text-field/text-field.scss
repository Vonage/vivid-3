@use "partials/variables" as variables;
@use "../focus/partials/variables" as focus-variables;

@use "../../../../../dist/libs/tokens/scss/tokens.constants" as constants;
@use "../../../../shared/src/lib/sass/mixins/connotation/config" with (
	$connotations: accent success alert,
	$shades: primary backdrop intermediate firm faint soft,
	$default: accent,
);
@use "../../../../shared/src/lib/sass/mixins/connotation" as connotation;
@use "../../../../shared/src/lib/sass/mixins/appearance/config" as appearance-config with (
	$appearances: fieldset ghost,
	$states: idle hover disabled readonly,
	$default: fieldset,
);
@use "../../../../shared/src/lib/sass/mixins/appearance" as appearance;
@use "../../../../../dist/libs/tokens/scss/size.variables" as size;

$low-ink-color: --_low-ink-color;

:host {
	display: inline-block;
}

.base {
	// due to the fact :user-invalid proposal isn't supported by browsers yet,
	// we apply appearance here instead of the input element itself.
	// input element :invalid state isn't enough as our spec awaits user interaction
	// before showing the error.
	@include appearance.appearance;
	@include connotation.connotation(text-field);
	#{variables.$text-field-gutter}: calc(#{size.$vvd-size-normal} / 2.5); // default of 16px
	#{variables.$text-field-icon-size}: calc(#{size.$vvd-size-normal} / 2); // default of 20px

	display: inline-grid;
	width: 100%;
	gap: 4px;
	grid-template-columns: min-content 1fr max-content;

	@supports (user-select: none) {
		user-select: none;
	}

	&:not(.disabled) {
		#{$low-ink-color}: var(#{constants.$vvd-color-neutral-600});
	}

	&.disabled {
		#{$low-ink-color}: var(#{appearance.get-appearance-token(text)});
	}
}

.label {
	color: var(#{constants.$vvd-color-canvas-text});
	contain: inline-size;
	font: var(#{constants.$vvd-typography-base});
	grid-column: 1 / 4;
	grid-row: 1;

	.char-count + & {
		grid-column: 1 / 3;
	}
}

.char-count {
	color: var(#{$low-ink-color});
	font: var(#{constants.$vvd-typography-base});
	grid-column: 3 / 4;
}

.fieldset {
	position: relative;
	display: flex;
	align-items: center;
	background-color: var(#{appearance.get-appearance-token(fill)});
	font: var(#{constants.$vvd-typography-base});
	grid-column: 1 / 4;
	padding-block: 0;
	transition: color .2s, background-color .2s;
	isolation: isolate;

	&::after {
		content: "";
		display: block;
		position: absolute;
		border-radius: inherit;
		inline-size: 100%;
		block-size: 100%;
		z-index: 1;
		box-shadow: inset 0 0 0 1px var(#{appearance.get-appearance-token(outline)});
		transition: box-shadow .2s;
		pointer-events: none;
	}

	&:focus-visible {
		outline: none;
	}

	.base > & {
		block-size: #{size.$vvd-size-normal};
	}

	/* Shape */
	.base:not(.shape-pill) & {
		border-radius: 6px;
	}

	.base.shape-pill & {
		border-radius: 24px;
	}
}

.wrapper {
	position: relative;
	block-size: 100%;
	border-radius: inherit;
	inline-size: 100%;

	&:focus-visible {
		outline: none;
	}
}

.control {
	// ! note: control is required to stretch fully so that
	// ! autofill indication applies on all fieldset area
	width: 100%;
	box-sizing: border-box;
	border: 0 none;
	appearance: none; /* for box-shadow visibility on IOS */
	background-color: transparent;
	block-size: 100%;
	border-radius: inherit;
	color: inherit;
	font: inherit;
	padding-block: 0;
	padding-inline-end: var(#{variables.$text-field-gutter});
	padding-inline-start: var(#{variables.$text-field-gutter});

	&:disabled {
		cursor: not-allowed;
		opacity: 1; /* 2. correct opacity on iOS */
		-webkit-text-fill-color: var(#{appearance.get-appearance-token(text)}); /* 1. sets text fill to current `color` for safari */
	}

	&::placeholder,
	&:disabled::placeholder {
		opacity: 1; /* 2. correct opacity on iOS */
		-webkit-text-fill-color: var(#{$low-ink-color}); /* 1. sets text fill to current `color` for safari */
	}

	&:focus-visible {
		outline: none;
	}

	.base.action-items & {
		padding-inline-end: var(#{variables.$text-field-inline-end-padding}, calc(var(#{variables.$text-field-icon-size}) + var(#{variables.$text-field-gutter})));
	}

	.base.has-icon & {
		padding-inline-start: calc((var(#{variables.$text-field-icon-size}) + var(#{variables.$text-field-gutter}) * 2) + var(--padding-left-calculation, 0px));
	}

	.base.leading-action-items:not(.has-icon) & {
		padding-inline-start: var(--costum-padding);
	}

}

.action-items-wrapper {
	position: absolute;
	inset-inline-end: calc(var(#{variables.$text-field-gutter}) / 4);

	.base:not(.action-items) & {
		display: none;
	}

}

.slot-icon-wrapper {
	position: absolute;
	inset-inline-start: 0;
	z-index: 1;
	display: flex;
	column-gap: 16px;
}

.icon {
	align-self: center;
	color: var(#{$low-ink-color});
	font-size: var(#{variables.$text-field-icon-size});
	//margin-inline-start: var(#{variables.$text-field-gutter});
	line-height: 1;
}

.focus-indicator {
	#{focus-variables.$focus-stroke-gap-color}: transparent;

	pointer-events: none;

	// two properties are needed because number-field and combobox inherits the style.
	// only text-field has wrapper.

	.wrapper:not(:focus-visible, :focus-within) > &,
	.fieldset:not(:focus-visible, :focus-within) > & {
		display: none;
	}
}
