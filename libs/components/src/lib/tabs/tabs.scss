@use 'sass:map';
@use '../tabs/partials/variables' as variables;
@use 'partials/mixins' as mixins;
@use '../../../../../dist/libs/tokens/scss/tokens.constants' as constants;
@use '../../../../shared/src/lib/sass/mixins/connotation/config' with (
	$connotations: accent cta,
	$shades: firm,
	$default: accent
);
@use '../../../../shared/src/lib/sass/mixins/connotation' as connotation;
@use '../../../../shared/src/lib/sass/mixins/appearance/config' as
	appearance-config with (
	$appearances: ghost,
	$states: idle,
	$default: ghost
);
@use '../../../../shared/src/lib/sass/mixins/appearance' as appearance;
@use '../../../../shared/src/lib/sass/mixins/border-radius' as
	border-radius-variables;

:host {
	display: block;
}

.base {
	@include appearance.appearance;
	@include connotation.connotation(tabs);

	--vvd-tabs-cta-firm: var(--vvd-tabs-cta-primary);
	--vvd-tabs-accent-firm: var(--vvd-tabs-accent-primary);

	display: grid;
	box-sizing: border-box;

	&.orientation-vertical {
		overflow: hidden;
		block-size: inherit;
		grid-template-columns: auto 1fr;
		grid-template-rows: 1fr;
	}

	&:not(.orientation-vertical) {
		grid-template-columns: 1fr;
		grid-template-rows: auto 1fr;
		max-block-size: 100%;
	}
}

.tablist {
	#{variables.$tabs-tablist-gutter}: 8px;
	#{variables.$tabs-active-indicator-stroke-width}: 2px;

	position: relative;
	display: grid;
	box-sizing: border-box;
	color: var(#{appearance.get-appearance-token(text)});

	.base.orientation-vertical & {
		padding: var(#{variables.$tabs-tablist-gutter});
		grid-row: 1 / 2;
		grid-template-columns: auto 1fr;
		grid-template-rows: auto;
		inline-size: 100%;
		place-self: flex-start end;
		row-gap: var(#{variables.$tabs-tablist-gutter});
	}

	.base:not(.orientation-vertical) & {
		justify-content: flex-start;
		column-gap: var(#{variables.$tabs-tablist-gutter});
		grid-auto-flow: column;
		grid-template-columns: auto;
		grid-template-rows: auto auto;
		inline-size: 100%;
		padding-inline: var(#{variables.$tabs-tablist-gutter});
	}

	&-wrapper {
		.base:not(.orientation-vertical) & {
			overflow: auto hidden;
			align-self: end;
			border-bottom: 1px solid var(--vvd-color-neutral-300);
			inline-size: 100%;
		}

		.base.orientation-vertical & {
			overflow: hidden auto;
			block-size: 100%;
			box-shadow: 1px 0 0 0 var(#{constants.$vvd-color-neutral-300});
		}

		&::-webkit-scrollbar {
			display: none;
		}
	}
}

.tabpanel {
	box-sizing: border-box;
	block-size: 100%;

	// this is for making overflow inside grid to work
	min-block-size: 0;
	min-inline-size: 0;

	.base.scroll & {
		overflow-y: auto;
	}

	@include mixins.measurement(map.keys(variables.$spaces)...) using ($space) {
		.base.gutters-#{$space} & {
			padding: map.get(variables.$spaces, $space);
		}
	}
}

.active-indicator {
	background: currentColor;
	margin-inline-start: calc(var(#{variables.$tabs-tablist-gutter}) * -1);

	.base.orientation-vertical & {
		align-self: center;
		border-radius: #{border-radius-variables.$border-radius-condensed};
		block-size: 80%;
		grid-area: 1 / 1 / auto / auto;
		inline-size: var(#{variables.$tabs-active-indicator-stroke-width});
	}

	.base:not(.orientation-vertical) & {
		position: absolute;
		z-index: 1;
		block-size: var(#{variables.$tabs-active-indicator-stroke-width});
		grid-column: 1 / auto;
		inline-size: calc(
			var(#{variables.$tabs-active-indicator-inline-size}) - 32px
		);
		inset-block-end: 0;
		inset-inline-start: 8px;
		justify-self: center;
		padding-inline: var(#{variables.$tabs-tablist-gutter});
	}
}

.activeIndicatorTransition {
	transition: transform #{variables.$tabs-active-indicator-transition-delay} ease-out
			0s,
		inline-size #{variables.$tabs-active-indicator-transition-delay} ease-out 0s;
}

.base:not(.orientation-vertical)
	.active-indicator:not(.activeIndicatorTransition) {
	opacity: 0;
}
