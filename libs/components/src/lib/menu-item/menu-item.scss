@use "../../../../../dist/libs/tokens/scss/tokens.constants" as constants;
@use "../../../../shared/src/lib/sass/mixins/connotation/config" with (
	$connotations: accent cta,
	$shades: primary primary-text primary-increment faint soft pale dim,
	$default: accent
);
@use '../../../../shared/src/lib/sass/mixins/connotation' as connotation;
@use '../../../../shared/src/lib/sass/mixins/appearance/config' as
	appearance-config with (
	$appearances: listitem,
	$states: idle hover disabled active selected selectedAndHover,
	$default: listitem
);
@use '../../../../shared/src/lib/sass/mixins/appearance' as appearance;
@use '../../../../../dist/libs/tokens/scss/size.variables' as size;
@use 'partials/menu-item-variables' as menu-item-variables;
@use '../../../../shared/src/lib/sass/mixins/border-radius' as
	border-radius-variables;
@use '../../../../shared/src/lib/sass/mixins/focus' as focus;
@use '../../../../shared/src/lib/sass/mixins/focus' as focus-variables;

:host(:focus-visible) {
	outline: none;
}

:host([disabled]) {
	pointer-events: none;
}

.base {
	$gap: 12px;
	$gutter: 16px;

	@include appearance.appearance;
	@include connotation.connotation(menu-item);

	display: flex;
	box-sizing: border-box;
	align-items: center;
	background-color: var(#{appearance.get-appearance-token(fill)});
	box-shadow: inset 0 0 0 1px var(#{appearance.get-appearance-token(outline)});
	gap: $gap;
	inline-size: 100%;
	padding-block: 2px;
	padding-inline: $gutter;

	&:not(.two-lines) {
		min-block-size: #{size.$vvd-size-normal};
	}

	&.two-lines {
		min-block-size: calc(
			#{size.$vvd-size-normal} + #{size.$vvd-size-super-condensed}
		);
	}

	@supports (user-select: none) {
		user-select: none;
	}

	&:not(.disabled) {
		cursor: pointer;
	}

	:host(:not([role='presentation']):focus-visible) & {
		@include focus.focus;
		#{focus-variables.$focus-stroke-gap-color}: transparent;

		border-radius: #{border-radius-variables.$border-radius-normal};
	}
}

.icon {
	flex-shrink: 0;
	font-size: calc(#{size.$vvd-size-normal} / 2);
	line-height: 1;
}

.action,
.decorative {
	display: flex;
	place-content: center;
}

.action {
	color: var(#{appearance.get-appearance-token(text)});

	:host(:not([check-appearance], [aria-checked='true'])) & {
		color: var(#{constants.$vvd-color-neutral-500});
	}

	.base.trailing & {
		order: 2;
	}

	.base.has-meta & {
		order: 2;
	}
}

.decorative {
	.base:not(.disabled) & {
		color: var(#{constants.$vvd-color-neutral-600});
	}
	.base.disabled & {
		color: var(#{constants.$vvd-color-neutral-200});
	}

	.base.has-meta & {
		order: 1;
	}
}

.chevron {
	order: 3;
}

.text {
	display: flex;
	overflow: hidden;
	flex-direction: column;
	margin-inline-end: auto;
}

.text-primary,
.text-secondary {
	display: -webkit-box;
	overflow: hidden;
	-webkit-box-orient: vertical;
	font: var(#{constants.$vvd-typography-base});
}


.text-primary {
	color: var(#{constants.$vvd-color-canvas-text});
	-webkit-line-clamp: var(#{menu-item-variables.$text-primary-line-clamp}, 1);

	.base.two-lines & {
		font: var(#{constants.$vvd-typography-base-bold});
	}
}

.text-secondary {
	-webkit-line-clamp: var(#{menu-item-variables.$text-secondary-line-clamp}, 1);
	.base.two-lines:not(.disabled, .selected) & {
		color: var(#{constants.$vvd-color-neutral-600});
	}
	.base.two-lines:where(.selected):not(.disabled) & {
		color: var(#{constants.$vvd-color-neutral-800});
	}
}
