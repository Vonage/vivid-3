@use '../../../../../dist/libs/tokens/scss/tokens.constants' as constants;
@use '../../../../shared/src/lib/sass/mixins/focus' as focus;
@use '../../../../shared/src/lib/sass/mixins/focus' as focus-variables;
@use 'partials/variables' as variables;
@use '../../../../shared/src/lib/sass/mixins/elevation' as elevation;
@use '../../../../shared/src/lib/sass/mixins/connotation/config' with (
	$connotations: accent cta announcement,
	$shades: primary primary-text primary-increment contrast fierce firm
);
@use '../../../../shared/src/lib/sass/mixins/connotation' as connotation;
@use '../../../../shared/src/lib/sass/mixins/appearance/config' as
	appearance-config with (
	$appearances: filled,
	$states: idle hover disabled active,
	$default: filled
);
@use '../../../../shared/src/lib/sass/mixins/appearance' as appearance;
@use '../../../../../dist/libs/tokens/scss/size.variables' as size;
@use '../../../../shared/src/lib/sass/mixins/border-radius' as
	border-radius-variables;

.control {
	@include connotation.connotation(fab);
	@include appearance.appearance;

	& {
		#{variables.$inline-padding}: 12px;

		display: inline-flex;
		box-sizing: border-box;
		align-items: center;
		border: 0 none;
		border-radius: var(#{variables.$border-radius});
		background: var(
			#{appearance.get-appearance-token(fill)},
			var(elevation.$vvd-elevation-fill)
		);
		block-size: var(#{variables.$block-size});
		color: var(
			#{appearance.get-appearance-token(text)},
			var(constants.$vvd-color-canvas-text)
		);
		column-gap: var(#{variables.$icon-gap});
		filter: var(#{elevation.$vvd-elevation-shadow});
		font: var(#{constants.$vvd-typography-base-bold});
		padding-inline: var(#{variables.$inline-padding});
		transition: background-color 0.15s linear, filter 0.15s linear;
		vertical-align: middle;
	}

	&:not(.connotation-accent, .connotation-cta) {
		#{focus-variables.$focus-stroke-gap-color}: transparent;
	}

	&:focus-visible {
		@include focus.focus;
	}

	@supports (user-select: none) {
		user-select: none;
	}

	/* Size */

	&.size-expanded {
		#{variables.$border-radius}: #{border-radius-variables.$border-radius-super-expanded};
		#{variables.$block-size}: #{size.$vvd-size-super-expanded};
		#{variables.$inline-padding}: 20px;
	}

	&.size-condensed {
		#{variables.$border-radius}: #{border-radius-variables.$border-radius-expanded};
		#{variables.$block-size}: #{size.$vvd-size-condensed};
		font-size: 12px;

		vwc-icon {
			font-size: 16px;
		}
	}

	&:not(.size-expanded, .size-condensed) {
		#{variables.$border-radius}: #{border-radius-variables.$border-radius-extra-expanded};
		#{variables.$block-size}: #{size.$vvd-size-normal};
	}

	&.icon-only {
		#{variables.$inline-padding}: 0;

		border-radius: #{border-radius-variables.$border-radius-full};
		place-content: center;

		@supports (aspect-ratio: 1) {
			aspect-ratio: 1;
		}

		@supports not (aspect-ratio: 1) {
			inline-size: var(#{variables.$block-size});
		}
	}

	&:not(.icon-only) {
		#{variables.$icon-gap}: 10px;
	}

	&:disabled {
		@include elevation.elevation(none);

		cursor: not-allowed;
	}

	&:not(:disabled) {
		@include elevation.elevation(4);

		cursor: pointer;

		&:hover {
			@include elevation.elevation(12);
		}

		&:active {
			@include elevation.elevation(24);
		}
	}
}

/* Icon */
slot[name='icon'] {
	line-height: 1;

	.icon-trailing & {
		display: inline-block;
		order: 1;
	}

	.control.size-extended & {
		font-size: calc(#{size.$vvd-size-super-expanded} / 2.3333);
	}

	.control:not(.size-extended) & {
		font-size: calc(#{size.$vvd-size-normal} / 2);
	}
}
