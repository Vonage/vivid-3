@use '../popup/partials/variables' as popup-variables;
@use '../text-field/partials/variables' as text-field-variables;
@use '../../../../shared/src/lib/sass/mixins/focus' as focus;
@use '../../../../shared/src/lib/sass/mixins/focus' as focus-variables;
@use '../../../../shared/src/lib/sass/mixins/border-radius' as
	border-radius-variables;
@use 'partials/variables' as variables;

:host {
	position: relative;
}

.base {
	#{text-field-variables.$text-field-gutter-end}: 44px;
}

.icon {
	inset-inline-end: 16px;
	inset-inline-start: unset;

	:not(.disabled) & {
		cursor: pointer;
	}

	.disabled & {
		cursor: not-allowed;
	}
}

.listbox {
	max-height: var(variables.$combobox-height, 408px);
	padding: 4px;
	border-radius: #{border-radius-variables.$border-radius-normal};
	contain: paint;
	overflow-y: auto;
}

::part(popup-base) {
	inline-size: max-content;
	min-inline-size: var(#{variables.$combobox-fixed-width}, 100%);
}

/* focus */
@supports selector(:has(*)) {
	.fieldset:has(.control:focus-within)::after {
		#{focus-variables.$focus-stroke-gap-color}: transparent;

		@include focus.focus;
	}
}

@supports not selector(:has(*)) {
	.fieldset:focus-within::after {
		@include focus.focus;
		#{focus-variables.$focus-stroke-gap-color}: transparent;

		position: absolute;
		z-index: 1;
		display: block;
		border-radius: inherit;
		content: '';
		inset: 0;
	}
}
