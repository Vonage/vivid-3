@use "../popup/partials/variables" as popup-variables;
@use "../text-field/partials/variables" as text-field-variables;
@use "../../../../shared/src/lib/sass/mixins/focus" as focus;
@use "../../../../shared/src/lib/sass/mixins/focus" as focus-variables;
@use "../../../../shared/src/lib/sass/mixins/border-radius" as border-radius-variables;
@use "../../../../shared/src/lib/sass/mixins/connotation/config" with (
	$connotations: accent,
	$shades: intermediate primary soft,
	$default: accent
);
@use "../../../../shared/src/lib/sass/mixins/connotation" as connotation;
@use "../../../../shared/src/lib/sass/mixins/appearance/config" as appearance-config with (
	$appearances: fieldset ghost,
	$states: idle disabled,
	$default: fieldset
);
@use "../../../../shared/src/lib/sass/mixins/appearance" as appearance;

:host {
	position: relative;
}

.base {
	#{text-field-variables.$text-field-gutter-end}: 44px;
}

.icon {
	inset-inline-end: 16px;
	inset-inline-start: unset;

	:not(.disabled) & {
		cursor: pointer;
	}

	.disabled & {
		cursor: not-allowed;
	}
}

.listbox {
	@include connotation.connotation (combobox);
	@include appearance.appearance;

	padding: 4px;
	border-radius: #{border-radius-variables.$border-radius-normal};
	background-color: var(#{appearance.get-appearance-token(fill)});
	box-shadow: inset 0 0 0 1px var(#{appearance.get-appearance-token(outline)});
	contain: paint;
}

::part(popup-base) {
	inline-size: 100%;
}


/*focus*/
@supports selector(:has(*)) {
.fieldset:has(.control:focus-within)::after {
	#{focus-variables.$focus-stroke-gap-color}: transparent;

	@include focus.focus;
}
}

@supports not selector(:has(*)) {
.fieldset:focus-within::after {
	@include focus.focus;
	#{focus-variables.$focus-stroke-gap-color}: transparent;
	#{focus-variables.$focus-inset}: -1px;

	position: absolute;
	z-index: 1;
	display: block;
	border-radius: inherit;
	content: "";
	inset: 0;
}
}

