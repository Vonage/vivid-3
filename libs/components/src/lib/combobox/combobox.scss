@use '../popup/partials/variables' as popup-variables;
@use '../text-field/partials/variables' as text-field-variables;
@use '../../../../shared/src/lib/sass/mixins/focus' as focus;
@use '../../../../shared/src/lib/sass/mixins/focus' as focus-variables;
@use '../../../../shared/src/lib/sass/mixins/border-radius' as
	border-radius-variables;
@use '../../../../shared/src/lib/sass/mixins/appearance/config' as
	appearance-config with (
	$appearances: fieldset ghost,
	$states: idle hover disabled readonly error success,
	$default: fieldset
);
@use '../../../../shared/src/lib/sass/mixins/appearance' as appearance;
@use 'partials/variables' as variables;
@use '../../shared/patterns/chevron' as chevron;
@include chevron.chevron;

$low-ink-color: --_low-ink-color;

:host {
	position: relative;
}

.base {
	#{text-field-variables.$text-field-gutter-end}: 8px;

	@include appearance.appearance;

	/* Shape */
	&:not(.shape-pill) & {
		border-radius: var(#{text-field-variables.$text-field-border-radius});
	}

	&.shape-pill & {
		border-radius: var(#{text-field-variables.$text-field-pill-border-radius});
	}

	slot[name='icon'] {
		position: absolute;
		z-index: 1;
		display: inline-block;
		color: var(#{$low-ink-color});
		font-size: var(#{text-field-variables.$text-field-icon-size});
		inset-block-start: 50%;
		inset-inline-start: var(#{text-field-variables.$text-field-gutter-start});
		line-height: 1;
		pointer-events: none;
		transform: translateY(-50%);
	}

	&.has-meta {
		padding-inline-end: 16px;
	}
}

.control {
	text-overflow: ellipsis;
	white-space: nowrap;
}

.fieldset {
	.leading-items-wrapper {
		position: relative;
		display: flex;
		flex-shrink: 0;
		align-items: center;
		gap: 8px;
		padding-inline-end: 16px;
	}
}

.chevron {
	:not(.disabled) & {
		cursor: pointer;
	}

	.disabled & {
		color: var(#{$low-ink-color});
		cursor: not-allowed;
	}
}

.listbox {
	display: flex;
	max-height: var(variables.$combobox-height, 408px);
	flex-direction: column;
	padding: 4px;
	border-radius: #{border-radius-variables.$border-radius-normal};
	contain: paint;
	gap: 2px;
	overflow-y: auto;
}

::part(popup-base) {
	inline-size: max-content;
	min-inline-size: var(#{variables.$combobox-fixed-width}, 100%);
}

/* focus */
@supports selector(:has(*)) {
	.fieldset:has(.control:focus-within)::after {
		#{focus-variables.$focus-stroke-gap-color}: transparent;

		@include focus.focus;
	}
}

@supports not selector(:has(*)) {
	.fieldset:focus-within::after {
		@include focus.focus;
		#{focus-variables.$focus-stroke-gap-color}: transparent;

		position: absolute;
		z-index: 1;
		display: block;
		border-radius: inherit;
		content: '';
		inset: 0;
		pointer-events: none;
	}
}
