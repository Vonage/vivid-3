@use '../../../../shared/src/lib/sass/mixins/focus' as focus;
@use '../../../../shared/src/lib/sass/mixins/focus' as focus-variables;
@use '../../../../../dist/libs/tokens/scss/tokens.constants' as constants;
@use '../../../../shared/src/lib/sass/mixins/connotation/config' with (
	$connotations: accent,
	$shades: primary primary-text primary-increment firm faint soft pale dim,
	$default: accent
);
@use '../../../../shared/src/lib/sass/mixins/connotation' as connotation;
@use '../../../../shared/src/lib/sass/mixins/appearance/config' as
	appearance-config with (
	$appearances: listitem,
	$states: idle hover disabled active selected selectedAndHover,
	$default: listitem
);
@use '../../../../shared/src/lib/sass/mixins/appearance' as appearance;
@use '../../../../../dist/libs/tokens/scss/size.variables' as size;
@use '../../../../shared/src/lib/sass/mixins/border-radius' as
	border-radius-variables;
@use 'partials/variables' as variables;

:host([disabled]) {
	cursor: not-allowed;
}

.base {
	@include connotation.connotation(option);
	@include appearance.appearance;

	& {
		display: flex;
		box-sizing: border-box;
		align-items: center;
		border-radius: #{border-radius-variables.$border-radius-normal};
		background-color: var(#{appearance.get-appearance-token(fill)});
		box-shadow: inset 0 0 0 1px var(#{appearance.get-appearance-token(outline)});
		color: var(
			#{variables.$option-appearance-color-text},
			var(#{appearance.get-appearance-token(text)})
		);
		font: var(#{constants.$vvd-typography-base});
		gap: var(#{variables.$option-gap});
		hyphens: auto;
		inline-size: 100%;
		min-block-size: var(#{variables.$option-min-block-size});
		padding-inline: var(#{variables.$option-padding-inline});
		vertical-align: middle;
		word-break: break-word;
	}

	& {
		#{variables.$option-min-block-size}: #{size.$vvd-size-normal}; // 40px
		#{variables.$option-padding-inline}: calc(
			#{size.$vvd-size-normal} / 2.5
		); // 16px
		#{variables.$option-gap}: calc(
			#{size.$vvd-size-semi-condensed} / 3
		); // 12px
		#{variables.$option-icon-size}: calc(#{size.$vvd-size-normal} / 2); // 20px
	}

	@supports (user-select: none) {
		user-select: none;
	}

	&:not(.disabled) {
		cursor: pointer;
	}

	&.disabled {
		pointer-events: none;
	}

	:host([scale='condensed']) & {
		#{variables.$option-min-block-size}: #{size.$vvd-size-condensed}; // 32px
		#{variables.$option-padding-inline}: calc(
			#{size.$vvd-size-super-condensed} / 2
		); // 12px
		#{variables.$option-gap}: calc(#{size.$vvd-size-normal} / 5); // 8px
		#{variables.$option-icon-size}: calc(
			#{size.$vvd-size-normal} / 2.5
		); // 16px
	}

	&.active {
		#{focus-variables.$focus-stroke-color}: var(
			#{constants.$vvd-color-cta-500}
		);
		#{focus-variables.$focus-stroke-gap-color}: transparent;

		@include focus.focus;
	}

	&.hidden {
		display: none;
	}
}

.text {
	font: var(#{constants.$vvd-typography-base});
}

.match {
	color: var(#{constants.$vvd-color-cta-600});
	font: var(#{constants.$vvd-typography-base-bold});
}

slot[name='icon'] {
	font-size: var(#{variables.$option-icon-size});
	line-height: 1;

	.base:not(.disabled, .selected) & {
		color: var(#{constants.$vvd-color-neutral-600});
	}
}

.checkmark {
	margin-left: auto;
	font-size: var(#{variables.$option-icon-size});
}
