@use '../../../../../dist/libs/tokens/scss/tokens.constants' as constants;
@use '../../../../shared/src/lib/sass/mixins/focus' as focus;
@use '../../../../shared/src/lib/sass/mixins/focus' as focus-variables;
@use '../../../../shared/src/lib/sass/mixins/border-radius' as
	border-radius-variables;
@use '../../../../shared/src/lib/sass/mixins/connotation/config' with (
	$connotations: accent cta,
	$shades: contrast,
	$default: accent
);
@use '../../../../shared/src/lib/sass/mixins/connotation' as connotation;
@use '../../../../../dist/libs/tokens/scss/size.variables' as size;

$block-size: #{size.$vvd-size-super-condensed};

.base {
	@include connotation.connotation(option-tag);

	& {
		position: relative;
		display: inline-flex;
		box-sizing: border-box;
		align-items: center;
		background-color: var(--fill-color);
		block-size: $block-size;
		box-shadow: inset 0 0 0 1px var(--outline-color);
		color: var(--text-color);
		column-gap: 8px;
		font: var(#{constants.$vvd-typography-base-bold});
		max-inline-size: 100%;
		padding-inline: 8px;
		user-select: none;
		vertical-align: middle;
	}

	&:not(.disabled) {
		--text-color: var(#{connotation.get-connotation-token(contrast)});
		--fill-color: color-mix(
			in srgb,
			var(#{connotation.get-connotation-token(contrast)}),
			transparent 87.5%
		);
		--outline-color: transparent;
	}

	&.disabled {
		--text-color: var(#{constants.$vvd-color-neutral-300});
		--fill-color: color-mix(
			in srgb,
			var(#{constants.$vvd-color-neutral-800}),
			transparent 87.5%
		);
		--outline-color: transparent;
	}

	/* Shape */
	&:not(.shape-pill) {
		border-radius: #{border-radius-variables.$border-radius-semi-condensed};
	}
	&.shape-pill {
		border-radius: #{border-radius-variables.$border-radius-semi-expanded};
	}
}

.label {
	overflow: hidden;
	max-inline-size: 100%;
	text-overflow: ellipsis;
	white-space: nowrap;
}

slot[name='icon'] {
	font-size: calc($block-size / 1.5);
	line-height: 1;
}

.icon-placeholder {
	inline-size: calc($block-size / 1.5);
}

.remove-button {
	display: flex;
	align-items: center;
	border-radius: inherit;
	cursor: pointer;
	outline: none;

	.disabled & {
		pointer-events: none;
	}

	&:focus-visible::before {
		#{focus-variables.$focus-stroke-gap-color}: transparent;

		@include focus.focus;

		position: absolute;
		z-index: 1;
		display: block;
		border-radius: inherit;
		content: '';
		inset: 0;
		pointer-events: none;
	}
}
