@use "../../../../../dist/libs/tokens/scss/tokens.constants" as constants;
@use "partials/variables" as variables;
@use "partials/mixins" as mixins;
@use "../focus/partials/variables" as focus-variables;

@use "../../../../shared/src/lib/sass/mixins/connotation/config" with (
	$connotations: accent cta success alert,
	$shades: primary primary-text primary-increment contrast fierce firm soft faint,
	$default: accent,
);
@use "../../../../shared/src/lib/sass/mixins/connotation" as connotation;

@use "../../../../shared/src/lib/sass/mixins/appearance/config" as appearance-config with (
	$appearances: filled outlined ghost,
	$states: idle hover disabled active,
	$default: ghost,
);
@use "../../../../shared/src/lib/sass/mixins/appearance" as appearance;
@use "../../../../../dist/libs/tokens/scss/size.variables" as size;


:host {
	display: inline-block;
}

.control {
	@include connotation.connotation;
	@include appearance.appearance;

	position: relative;
	display: inline-flex;
	box-sizing: border-box;
	align-items: center;
	justify-content: center;
	border: 0 none;
	margin: 0;
	background-color: var(#{appearance.get-appearance-token(fill)});
	block-size: var(#{variables.$block-size});
	box-shadow: inset 0 0 0 1px var(#{appearance.get-appearance-token(outline)});
	color: var(#{appearance.get-appearance-token(text)});
	gap: var(#{variables.$icon-gap});
	vertical-align: middle;



	.text {
		/* stylelint-disable value-no-vendor-prefix */
		display: -webkit-box;
		/* stylelint-enable value-no-vendor-prefix */
		overflow: hidden;
		-webkit-box-orient: vertical;
		inline-size: 100%;
		-webkit-line-clamp: var(#{variables.$button-line-clamp}, 2);
	}

	&:not(.icon-only) {
		inline-size: 100%;
	}

	@supports selector(:focus-visible) {
		&:focus {
			outline: none;
		}
	}

	@supports(user-select: none) {
		user-select: none;
	}

	&:not(:disabled) {
		cursor: pointer;
	}

	&:disabled {
		cursor: not-allowed;
	}

	&.icon-only {
		contain: size;
		padding-inline: 0;
		place-content: center;
		@supports (aspect-ratio: 1) {
			aspect-ratio: 1;
		}
		@supports not (aspect-ratio: 1) {
			inline-size: var(#{variables.$block-size});
		}
	}


	/* Shape */
	&:not(.shape-pill) {
		border-radius: 6px;
	}

	&.shape-pill {
		&:not(.icon-only, .stacked) {
			border-radius: 24px;
		}

		&.stacked {
			border-radius: 24px;
		}

		&.icon-only {
			border-radius: 50%;
		}
	}


	/* Size */
	&:not(.stacked) {
		&.size-super-condensed {
			@include mixins.get-size-properties(#{size.$vvd-size-super-condensed}, #{constants.$vvd-typography-base-condensed-bold}, 4px, 8px);
		}

		&.size-condensed {
			@include mixins.get-size-properties(#{size.$vvd-size-condensed}, #{constants.$vvd-typography-base-condensed-bold}, 8px, 12px);
		}

		&.size-expanded {
			@include mixins.get-size-properties(#{size.$vvd-size-expanded}, #{constants.$vvd-typography-base-extended-bold}, 10px, 20px);
		}

		&:not(.size-condensed, .size-expanded, .size-super-condensed) {
			@include mixins.get-size-properties(#{size.$vvd-size-normal}, #{constants.$vvd-typography-base-bold}, 8px, 16px);
		}
	}

	&.stacked {
		flex-direction: column;
		justify-content: center;

		&.size-super-condensed {
			--stacked-size: #{size.$vvd-size-super-condensed};
			@include mixins.get-size-properties(calc(var(--stacked-size) + 20 * 1px), #{constants.$vvd-typography-base-condensed-bold}, 4px, 8px);
		}

		&.size-condensed {
			--stacked-size: #{size.$vvd-size-condensed};
			@include mixins.get-size-properties(calc(var(--stacked-size) + 24 * 1px), #{constants.$vvd-typography-base-condensed-bold}, 6px, 12px);
		}

		&.size-expanded {
			--stacked-size: #{size.$vvd-size-expanded};
			@include mixins.get-size-properties(calc(var(--stacked-size) + 32 * 1px), #{constants.$vvd-typography-base-extended-bold}, 10px, 20px);
		}

		&:not(.size-condensed, .size-expanded, .size-super-condensed) {
			--stacked-size: #{size.$vvd-size-normal};
			@include mixins.get-size-properties(calc(var(--stacked-size) + 28 * 1px), #{constants.$vvd-typography-base-bold}, 8px, 16px);
		}
	}
}

/* Icon */
.icon {
	line-height: 1;

	.icon-trailing & {
		order: 1;
	}

	.control.stacked > & {
		font-size: calc(var(--stacked-size) / 2);
	}

	.control:not(.stacked) > & {
		font-size: calc(var(#{variables.$block-size}) / 2);
	}
}

.focus-indicator {
	:not(:focus-visible) > & {
		display: none;
	}

	.appearance-outlined &,
	.appearance-ghost & {
		#{focus-variables.$focus-stroke-gap-color}: transparent;
	}
}

.pending {
	order: 2;
}
