@use '@repo/tokens/scss/tokens.constants' as constants;
@use 'partials/variables' as variables;
@use 'partials/mixins' as mixins;
@use '@repo/shared/mixins/focus' as focus;
@use '@repo/shared/mixins/focus' as focus-variables;
@use '@repo/shared/mixins/border-radius' as border-radius-variables;
@use '@repo/shared/mixins/connotation/config' with (
	$connotations: accent cta success alert announcement,
	$shades: primary primary-text primary-increment contrast fierce firm soft
		faint fierce-primary,
	$default: accent
);
@use '@repo/shared/mixins/connotation' as connotation;
@use '@repo/shared/mixins/appearance/config' as appearance-config with (
	$appearances: filled outlined ghost ghost-light outlined-light,
	$states: idle hover disabled active,
	$default: ghost
);
@use '@repo/shared/mixins/appearance' as appearance;
@use '@repo/tokens/scss/size.variables' as size;
@use '../../shared/patterns/chevron' as chevron;
@include chevron.chevron;
@include connotation.variables-backwards-compatibility(
	'button',
	'.control:not(.appearance-ghost-light, .appearance-filled, .appearance-outlined)'
);

:host {
	display: inline-block;
}

.control {
	@include connotation.connotation(button);
	@include appearance.appearance;

	& {
		#{focus-variables.$focus-stroke-gap-color}: transparent;

		display: inline-flex;
		box-sizing: border-box;
		align-items: center;
		justify-content: space-between;
		border: 0 none;
		border-radius: var(#{variables.$button-border-radius});
		margin: 0;
		background-color: var(#{appearance.get-appearance-token(fill)});
		block-size: var(#{variables.$block-size});
		box-shadow: inset 0 0 0 1px var(#{appearance.get-appearance-token(outline)});
		color: var(#{appearance.get-appearance-token(text)});
		gap: var(#{variables.$icon-gap});
		text-decoration: none;
		vertical-align: middle;
	}

	.text {
		display: -webkit-box;
		overflow: hidden;
		-webkit-box-orient: vertical;
		-webkit-line-clamp: var(#{variables.$button-line-clamp}, 1);
		max-inline-size: 100%;
		text-align: start;
	}

	&:not(.icon-only) {
		inline-size: 100%;
	}

	&:not(:disabled) {
		cursor: pointer;
	}

	&:disabled {
		cursor: not-allowed;
	}

	@supports (user-select: none) {
		user-select: none;
	}

	/* Size */
	&:not(.stacked) {
		&.size-super-condensed {
			@include mixins.get-size-properties(
				#{size.$vvd-size-super-condensed},
				#{constants.$vvd-typography-base-condensed-bold},
				4px,
				8px,
				10px
			);
		}

		&.size-condensed {
			@include mixins.get-size-properties(
				#{size.$vvd-size-condensed},
				#{constants.$vvd-typography-base-condensed-bold},
				8px,
				12px,
				12px
			);
		}

		&.size-expanded {
			@include mixins.get-size-properties(
				#{size.$vvd-size-expanded},
				#{constants.$vvd-typography-base-extended-bold},
				10px,
				20px,
				16px
			);
		}

		&:not(.size-condensed, .size-expanded, .size-super-condensed) {
			@include mixins.get-size-properties(
				#{size.$vvd-size-normal},
				#{constants.$vvd-typography-base-bold},
				8px,
				16px,
				16px
			);
		}
	}

	/* Shape */
	/* stylelint-disable */
	/* disabling because of order issues */
	&:not(.shape-pill) {
		#{variables.$button-border-radius}: #{border-radius-variables.$border-radius-normal};

		&.size-condensed,
		&.size-super-condensed {
			&:not(.stacked) {
				#{variables.$button-border-radius}: #{border-radius-variables.$border-radius-semi-condensed};
			}
		}
	}
	/* stylelint-enable */

	&.shape-pill {
		&:not(.icon-only, .stacked.size-super-condensed, .stacked.size-condensed, .stacked.normal) {
			#{variables.$button-border-radius}: #{border-radius-variables.$border-radius-extra-expanded};
		}

		&.stacked.size-condensed,
		&.stacked.size-super-condensed {
			#{variables.$button-border-radius}: #{border-radius-variables.$border-radius-semi-expanded};
		}

		&.stacked.size-normal {
			#{variables.$button-border-radius}: #{border-radius-variables.$border-radius-expanded};
		}

		&.icon-only {
			#{variables.$button-border-radius}: #{border-radius-variables.$border-radius-full};
		}

		&.icon-only.size-super-condensed{
			padding-inline: calc(var(#{variables.$block-size}) / 6);
		}
	}

	&.stacked {
		&.size-super-condensed {
			--stacked-size: #{size.$vvd-size-super-condensed};

			@include mixins.get-size-properties(
				calc(var(--stacked-size) + 20 * 1px),
				#{constants.$vvd-typography-base-condensed-bold},
				4px,
				16px,
				10px
			);
		}

		&.size-condensed {
			--stacked-size: #{size.$vvd-size-condensed};

			@include mixins.get-size-properties(
				calc(var(--stacked-size) + 24 * 1px),
				#{constants.$vvd-typography-base-condensed-bold},
				6px,
				12px,
				12px
			);
		}

		&.size-expanded {
			--stacked-size: #{size.$vvd-size-expanded};

			@include mixins.get-size-properties(
				calc(var(--stacked-size) + 32 * 1px),
				#{constants.$vvd-typography-base-extended-bold},
				10px,
				20px,
				16px
			);
		}

		&:not(.size-condensed, .size-expanded, .size-super-condensed) {
			--stacked-size: #{size.$vvd-size-normal};

			@include mixins.get-size-properties(
				calc(var(--stacked-size) + 28 * 1px),
				#{constants.$vvd-typography-base-bold},
				8px,
				16px,
				16px
			);
		}
	}

	/* Focus style for filled */
	&.appearance-filled {
		#{focus-variables.$focus-stroke-gap-color}: transparent;

		&:focus-visible {
			position: relative;
			outline: none;

			&::after {
				@include focus.focus-in-pseudo-element;
			}
		}
	}

	&:not(.appearance-filled):focus-visible {
		@include focus.focus;
	}
}

/* Icon */
slot[name='icon'] {
	line-height: 1;

	.icon-trailing & {
		display: flex;
		order: 1;
	}

	.control.stacked & {
		font-size: calc(var(--stacked-size) / 2);
	}

	.control:not(.stacked) & {
		font-size: calc(var(#{variables.$block-size}) / 2);
	}
}

.chevron {
	font-size: var(#{variables.$chevron-size});
}

.content {
	display: flex;
	overflow: hidden;
	flex: 1;
	align-items: center;
	justify-content: center;
	gap: var(#{variables.$icon-gap});

	.control.stacked & {
		flex-direction: column;
	}

	:host([dropdown-indicator]) & {
		justify-content: var(#{variables.$button-content-alignment}, flex-start);
		text-align: start;
	}
	:host([dropdown-indicator][stacked]) & {
		align-items: var(#{variables.$button-content-alignment}, flex-start);
		justify-content: center;
	}
}

.pending-no-icon {
	position: absolute;

	& + .text {
		visibility: hidden;
	}
}

:host([icon-trailing][pending]) {
	.pending {
		order: 1;
	}
}

.sr-only {
	position: absolute;
	overflow: hidden;
	width: 1px;
	height: 1px;
	clip: rect(0 0 0 0);
	clip-path: inset(50%);
	white-space: nowrap;
}
