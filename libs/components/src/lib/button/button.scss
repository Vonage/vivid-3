@use '../../../../../dist/libs/tokens/scss/tokens.constants' as constants;
@use 'partials/variables' as variables;
@use 'partials/mixins' as mixins;
@use '../focus/partials/variables' as focus-variables;

@use '../../../../shared/src/lib/sass/mixins/connotation/config' with (
	$connotations: accent cta success alert,
	$shades: primary primary-text primary-increment contrast fierce firm soft faint,
	$default: accent,
);
@use '../../../../shared/src/lib/sass/mixins/connotation' as connotation;

@use '../../../../shared/src/lib/sass/mixins/appearance/config' as appearance-config with (
	$appearances: filled outlined ghost,
	$states: idle hover disabled active,
	$default: ghost,
);
@use '../../../../shared/src/lib/sass/mixins/appearance' as appearance;
@use '../../../../../dist/libs/tokens/scss/size.variables' as size;


:host {
	display: inline-block;
}

.control {
	@include connotation.connotation;
	@include appearance.appearance;

	position: relative;
	display: inline-flex;
	box-sizing: border-box;
	align-items: center;
	border: 0 none;
	margin: 0;
	background-color: var(#{appearance.get-appearance-token(fill)});
	block-size: var(#{variables.$block-size});
	box-shadow: inset 0 0 0 1px var(#{appearance.get-appearance-token(outline)});
	color: var(#{appearance.get-appearance-token(text)});
	gap: var(#{variables.$icon-gap});
	vertical-align: middle;
	white-space: nowrap;

	@supports selector(:focus-visible) {
		&:focus {
			outline: none;
		}
	}

	@supports(user-select: none) {
		user-select: none;
	}

	&:not(:disabled) {
		cursor: pointer;
	}

	&:disabled {
		cursor: not-allowed;
	}

	&.icon-only {
		contain: size;
		padding-inline: 0;
		place-content: center;
		@supports (aspect-ratio: 1) {
			aspect-ratio: 1;
		}
		@supports not (aspect-ratio: 1) {
			inline-size: var(#{variables.$block-size});
		}
	}

	/* Size */
	&:not(.stacked) {
		&.density-condensed {
			@include mixins.get-density-properties(#{size.$vvd-size-condensed}, #{constants.$vvd-typography-base-condensed-bold}, 8px, 12px);
		}

		&.density-extended {
			@include mixins.get-density-properties(#{size.$vvd-size-expanded}, #{constants.$vvd-typography-base-extended-bold}, 10px, 20px);
		}

		&:not(.density-condensed, .density-extended) {
			@include mixins.get-density-properties(#{size.$vvd-size-normal}, #{constants.$vvd-typography-base-bold}, 8px, 16px);
		}
	}

	&.stacked {
		flex-direction: column;
		justify-content: center;
		@include mixins.get-density-properties(calc(#{size.$vvd-size-expanded} + #{size.$vvd-size-ultra-condensed}), #{constants.$vvd-typography-base-bold}, 10px, 16px);
	}
}

/* Shape */
$pill-selector: '.shape-pill:not(.stacked)';
.control:not(#{$pill-selector}) {
	border-radius: 6px;
}

.control#{$pill-selector} {
	&:not(.icon-only) {
		border-radius: 24px;
	}

	&.icon-only {
		border-radius: 50%;
	}
}

/* Icon */
.icon {
	.icon-trailing & {
		order: 1;
	}

	.control.stacked > & {
		font-size: calc(#{size.$vvd-size-normal} / 2);
	}

	.control:not(.stacked) > & {
		font-size: calc(var(#{variables.$block-size}) / 2);
	}

}

.focus-indicator {
	:not(:focus-visible) > & {
		display: none;
	}

	.appearance-outlined &,
	.appearance-ghost & {
		#{focus-variables.$focus-stroke-gap-color}: transparent;
	}
}
